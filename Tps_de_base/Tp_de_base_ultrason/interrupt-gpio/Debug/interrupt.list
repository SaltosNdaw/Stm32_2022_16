
interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003adc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cac  08003cac  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cb4  08003cb4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000002c  08003ce8  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  08003ce8  000200d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104fb  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002595  00000000  00000000  00030557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  00032af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  000336a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d20  00000000  00000000  00034158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e9c5  00000000  00000000  00059e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e654f  00000000  00000000  0006883d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ed8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002da8  00000000  00000000  0014ede0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003c4c 	.word	0x08003c4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08003c4c 	.word	0x08003c4c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	4b3b      	ldr	r3, [pc, #236]	; (80005c4 <MX_GPIO_Init+0x104>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a3a      	ldr	r2, [pc, #232]	; (80005c4 <MX_GPIO_Init+0x104>)
 80004dc:	f043 0304 	orr.w	r3, r3, #4
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b38      	ldr	r3, [pc, #224]	; (80005c4 <MX_GPIO_Init+0x104>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0304 	and.w	r3, r3, #4
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ee:	4b35      	ldr	r3, [pc, #212]	; (80005c4 <MX_GPIO_Init+0x104>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a34      	ldr	r2, [pc, #208]	; (80005c4 <MX_GPIO_Init+0x104>)
 80004f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b32      	ldr	r3, [pc, #200]	; (80005c4 <MX_GPIO_Init+0x104>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b2f      	ldr	r3, [pc, #188]	; (80005c4 <MX_GPIO_Init+0x104>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a2e      	ldr	r2, [pc, #184]	; (80005c4 <MX_GPIO_Init+0x104>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b2c      	ldr	r3, [pc, #176]	; (80005c4 <MX_GPIO_Init+0x104>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <MX_GPIO_Init+0x104>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a28      	ldr	r2, [pc, #160]	; (80005c4 <MX_GPIO_Init+0x104>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <MX_GPIO_Init+0x104>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2120      	movs	r1, #32
 800053a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053e:	f000 ff6b 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000548:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	481b      	ldr	r0, [pc, #108]	; (80005c8 <MX_GPIO_Init+0x108>)
 800055a:	f000 fdb3 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800055e:	2320      	movs	r3, #32
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000578:	f000 fda4 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800057c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000580:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000582:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000586:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000588:	2301      	movs	r3, #1
 800058a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000596:	f000 fd95 	bl	80010c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	2017      	movs	r0, #23
 80005a0:	f000 fb6f 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80005a4:	2017      	movs	r0, #23
 80005a6:	f000 fb88 	bl	8000cba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	2100      	movs	r1, #0
 80005ae:	2028      	movs	r0, #40	; 0x28
 80005b0:	f000 fb67 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005b4:	2028      	movs	r0, #40	; 0x28
 80005b6:	f000 fb80 	bl	8000cba <HAL_NVIC_EnableIRQ>

}
 80005ba:	bf00      	nop
 80005bc:	3728      	adds	r7, #40	; 0x28
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000
 80005c8:	48000800 	.word	0x48000800

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
int main(void)
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 f9fc 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f805 	bl	80005ea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f7ff ff6e 	bl	80004c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 f938 	bl	8000858 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 80005e8:	e7fe      	b.n	80005e8 <main+0x1c>

080005ea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ea:	b580      	push	{r7, lr}
 80005ec:	b096      	sub	sp, #88	; 0x58
 80005ee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f0:	f107 0314 	add.w	r3, r7, #20
 80005f4:	2244      	movs	r2, #68	; 0x44
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f003 fb1f 	bl	8003c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fe:	463b      	mov	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000610:	f000 ff62 	bl	80014d8 <HAL_PWREx_ControlVoltageScaling>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800061a:	f000 f860 	bl	80006de <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061e:	2302      	movs	r3, #2
 8000620:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000622:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000628:	2310      	movs	r3, #16
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062c:	2302      	movs	r3, #2
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000634:	2301      	movs	r3, #1
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000638:	230a      	movs	r3, #10
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800063c:	2307      	movs	r3, #7
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fff3 	bl	8001638 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000658:	f000 f841 	bl	80006de <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000660:	2303      	movs	r3, #3
 8000662:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	2104      	movs	r1, #4
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fbc5 	bl	8001e04 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000680:	f000 f82d 	bl	80006de <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3758      	adds	r7, #88	; 0x58
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
	  void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	  {
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	80fb      	strh	r3, [r7, #6]
	  	switch(GPIO_Pin)
 8000696:	88fb      	ldrh	r3, [r7, #6]
 8000698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800069c:	d009      	beq.n	80006b2 <HAL_GPIO_EXTI_Callback+0x26>
 800069e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006a2:	dc18      	bgt.n	80006d6 <HAL_GPIO_EXTI_Callback+0x4a>
 80006a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006a8:	d009      	beq.n	80006be <HAL_GPIO_EXTI_Callback+0x32>
 80006aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006ae:	d00c      	beq.n	80006ca <HAL_GPIO_EXTI_Callback+0x3e>
	  			break;
	  		case GPIO_PIN_9:
	  			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Green LED - GPIOA, GPIO_PIN_5
	  			break;
	  		}
	  }
 80006b0:	e011      	b.n	80006d6 <HAL_GPIO_EXTI_Callback+0x4a>
	  			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Green LED - GPIOA, GPIO_PIN_5
 80006b2:	2120      	movs	r1, #32
 80006b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b8:	f000 fec6 	bl	8001448 <HAL_GPIO_TogglePin>
	  			break;
 80006bc:	e00b      	b.n	80006d6 <HAL_GPIO_EXTI_Callback+0x4a>
	  			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Green LED - GPIOA, GPIO_PIN_5
 80006be:	2120      	movs	r1, #32
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f000 fec0 	bl	8001448 <HAL_GPIO_TogglePin>
	  			break;
 80006c8:	e005      	b.n	80006d6 <HAL_GPIO_EXTI_Callback+0x4a>
	  			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Green LED - GPIOA, GPIO_PIN_5
 80006ca:	2120      	movs	r1, #32
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f000 feba 	bl	8001448 <HAL_GPIO_TogglePin>
	  			break;
 80006d4:	bf00      	nop
	  }
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}

080006de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e2:	b672      	cpsid	i
}
 80006e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e6:	e7fe      	b.n	80006e6 <Error_Handler+0x8>

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <HAL_MspInit+0x80>)
 80006f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006f2:	4a1d      	ldr	r2, [pc, #116]	; (8000768 <HAL_MspInit+0x80>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6613      	str	r3, [r2, #96]	; 0x60
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <HAL_MspInit+0x80>)
 80006fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	4b18      	ldr	r3, [pc, #96]	; (8000768 <HAL_MspInit+0x80>)
 8000708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <HAL_MspInit+0x80>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000710:	6593      	str	r3, [r2, #88]	; 0x58
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <HAL_MspInit+0x80>)
 8000714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	2001      	movs	r0, #1
 8000724:	f000 faad 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 8000728:	2001      	movs	r0, #1
 800072a:	f000 fac6 	bl	8000cba <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2100      	movs	r1, #0
 8000732:	2004      	movs	r0, #4
 8000734:	f000 faa5 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000738:	2004      	movs	r0, #4
 800073a:	f000 fabe 	bl	8000cba <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	2100      	movs	r1, #0
 8000742:	2005      	movs	r0, #5
 8000744:	f000 fa9d 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000748:	2005      	movs	r0, #5
 800074a:	f000 fab6 	bl	8000cba <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 800074e:	2200      	movs	r2, #0
 8000750:	2100      	movs	r1, #0
 8000752:	2051      	movs	r0, #81	; 0x51
 8000754:	f000 fa95 	bl	8000c82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8000758:	2051      	movs	r0, #81	; 0x51
 800075a:	f000 faae 	bl	8000cba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f968 	bl	8000a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM1/PVM2/PVM3/PVM4 interrupts through EXTI lines 16/35/36/37/38.
  */
void PVD_PVM_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 80007c4:	f000 fede 	bl	8001584 <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80007d0:	f000 fb0c 	bl	8000dec <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr

080007e6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80007ea:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007ee:	f000 fe45 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80007f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007f6:	f000 fe41 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000804:	4802      	ldr	r0, [pc, #8]	; (8000810 <USART2_IRQHandler+0x10>)
 8000806:	f002 fa0d 	bl	8002c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000048 	.word	0x20000048

08000814 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000818:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800081c:	f000 fe2e 	bl	800147c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <MX_USART2_UART_Init+0x5c>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800089c:	f002 f974 	bl	8002b88 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008a6:	f7ff ff1a 	bl	80006de <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000048 	.word	0x20000048
 80008b4:	40004400 	.word	0x40004400

080008b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b0ac      	sub	sp, #176	; 0xb0
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2288      	movs	r2, #136	; 0x88
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 f9af 	bl	8003c3c <memset>
  if(uartHandle->Instance==USART2)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a25      	ldr	r2, [pc, #148]	; (8000978 <HAL_UART_MspInit+0xc0>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d143      	bne.n	8000970 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fc8b 	bl	8002210 <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000900:	f7ff feed 	bl	80006de <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000904:	4b1d      	ldr	r3, [pc, #116]	; (800097c <HAL_UART_MspInit+0xc4>)
 8000906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000908:	4a1c      	ldr	r2, [pc, #112]	; (800097c <HAL_UART_MspInit+0xc4>)
 800090a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090e:	6593      	str	r3, [r2, #88]	; 0x58
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <HAL_UART_MspInit+0xc4>)
 8000912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_UART_MspInit+0xc4>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000920:	4a16      	ldr	r2, [pc, #88]	; (800097c <HAL_UART_MspInit+0xc4>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_UART_MspInit+0xc4>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000934:	230c      	movs	r3, #12
 8000936:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094c:	2307      	movs	r3, #7
 800094e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000956:	4619      	mov	r1, r3
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f000 fbb2 	bl	80010c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	2026      	movs	r0, #38	; 0x26
 8000966:	f000 f98c 	bl	8000c82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800096a:	2026      	movs	r0, #38	; 0x26
 800096c:	f000 f9a5 	bl	8000cba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000970:	bf00      	nop
 8000972:	37b0      	adds	r7, #176	; 0xb0
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40004400 	.word	0x40004400
 800097c:	40021000 	.word	0x40021000

08000980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000984:	f7ff ff56 	bl	8000834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	; (80009bc <LoopForever+0x6>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	; (80009c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <LoopForever+0xe>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	; (80009cc <LoopForever+0x16>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ae:	f003 f921 	bl	8003bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b2:	f7ff fe0b 	bl	80005cc <main>

080009b6 <LoopForever>:

LoopForever:
    b LoopForever
 80009b6:	e7fe      	b.n	80009b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80009c4:	08003cbc 	.word	0x08003cbc
  ldr r2, =_sbss
 80009c8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80009cc:	200000d0 	.word	0x200000d0

080009d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC1_2_IRQHandler>
	...

080009d4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009de:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <HAL_Init+0x3c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <HAL_Init+0x3c>)
 80009e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009e8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ea:	2003      	movs	r0, #3
 80009ec:	f000 f93e 	bl	8000c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 f80f 	bl	8000a14 <HAL_InitTick>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d002      	beq.n	8000a02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	e001      	b.n	8000a06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a02:	f7ff fe71 	bl	80006e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3708      	adds	r7, #8
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40022000 	.word	0x40022000

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a20:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <HAL_InitTick+0x6c>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d023      	beq.n	8000a70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <HAL_InitTick+0x70>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <HAL_InitTick+0x6c>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4619      	mov	r1, r3
 8000a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f000 f949 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d10f      	bne.n	8000a6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	2b0f      	cmp	r3, #15
 8000a4e:	d809      	bhi.n	8000a64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a50:	2200      	movs	r2, #0
 8000a52:	6879      	ldr	r1, [r7, #4]
 8000a54:	f04f 30ff 	mov.w	r0, #4294967295
 8000a58:	f000 f913 	bl	8000c82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <HAL_InitTick+0x74>)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6013      	str	r3, [r2, #0]
 8000a62:	e007      	b.n	8000a74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	e004      	b.n	8000a74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	73fb      	strb	r3, [r7, #15]
 8000a6e:	e001      	b.n	8000a74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008
 8000a84:	20000000 	.word	0x20000000
 8000a88:	20000004 	.word	0x20000004

08000a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <HAL_IncTick+0x20>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	461a      	mov	r2, r3
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_IncTick+0x24>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <HAL_IncTick+0x24>)
 8000a9e:	6013      	str	r3, [r2, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	200000cc 	.word	0x200000cc

08000ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <HAL_GetTick+0x14>)
 8000aba:	681b      	ldr	r3, [r3, #0]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	200000cc 	.word	0x200000cc

08000acc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ade:	68db      	ldr	r3, [r3, #12]
 8000ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000afe:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <__NVIC_SetPriorityGrouping+0x44>)
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	60d3      	str	r3, [r2, #12]
}
 8000b04:	bf00      	nop
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b18:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <__NVIC_GetPriorityGrouping+0x18>)
 8000b1a:	68db      	ldr	r3, [r3, #12]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	f003 0307 	and.w	r3, r3, #7
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	4603      	mov	r3, r0
 8000b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db0b      	blt.n	8000b5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	f003 021f 	and.w	r2, r3, #31
 8000b48:	4907      	ldr	r1, [pc, #28]	; (8000b68 <__NVIC_EnableIRQ+0x38>)
 8000b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4e:	095b      	lsrs	r3, r3, #5
 8000b50:	2001      	movs	r0, #1
 8000b52:	fa00 f202 	lsl.w	r2, r0, r2
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	6039      	str	r1, [r7, #0]
 8000b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	db0a      	blt.n	8000b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	490c      	ldr	r1, [pc, #48]	; (8000bb8 <__NVIC_SetPriority+0x4c>)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	0112      	lsls	r2, r2, #4
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	440b      	add	r3, r1
 8000b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b94:	e00a      	b.n	8000bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4908      	ldr	r1, [pc, #32]	; (8000bbc <__NVIC_SetPriority+0x50>)
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	3b04      	subs	r3, #4
 8000ba4:	0112      	lsls	r2, r2, #4
 8000ba6:	b2d2      	uxtb	r2, r2
 8000ba8:	440b      	add	r3, r1
 8000baa:	761a      	strb	r2, [r3, #24]
}
 8000bac:	bf00      	nop
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	e000e100 	.word	0xe000e100
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b089      	sub	sp, #36	; 0x24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	f1c3 0307 	rsb	r3, r3, #7
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	bf28      	it	cs
 8000bde:	2304      	movcs	r3, #4
 8000be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3304      	adds	r3, #4
 8000be6:	2b06      	cmp	r3, #6
 8000be8:	d902      	bls.n	8000bf0 <NVIC_EncodePriority+0x30>
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3b03      	subs	r3, #3
 8000bee:	e000      	b.n	8000bf2 <NVIC_EncodePriority+0x32>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	43da      	mvns	r2, r3
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	401a      	ands	r2, r3
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c12:	43d9      	mvns	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	4313      	orrs	r3, r2
         );
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3724      	adds	r7, #36	; 0x24
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
	...

08000c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3b01      	subs	r3, #1
 8000c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c38:	d301      	bcc.n	8000c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00f      	b.n	8000c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <SysTick_Config+0x40>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c46:	210f      	movs	r1, #15
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f7ff ff8e 	bl	8000b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <SysTick_Config+0x40>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <SysTick_Config+0x40>)
 8000c58:	2207      	movs	r2, #7
 8000c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	e000e010 	.word	0xe000e010

08000c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff29 	bl	8000acc <__NVIC_SetPriorityGrouping>
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b086      	sub	sp, #24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
 8000c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c94:	f7ff ff3e 	bl	8000b14 <__NVIC_GetPriorityGrouping>
 8000c98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	68b9      	ldr	r1, [r7, #8]
 8000c9e:	6978      	ldr	r0, [r7, #20]
 8000ca0:	f7ff ff8e 	bl	8000bc0 <NVIC_EncodePriority>
 8000ca4:	4602      	mov	r2, r0
 8000ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000caa:	4611      	mov	r1, r2
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff5d 	bl	8000b6c <__NVIC_SetPriority>
}
 8000cb2:	bf00      	nop
 8000cb4:	3718      	adds	r7, #24
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff ff31 	bl	8000b30 <__NVIC_EnableIRQ>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	6878      	ldr	r0, [r7, #4]
 8000ce0:	f7ff ffa2 	bl	8000c28 <SysTick_Config>
 8000ce4:	4603      	mov	r3, r0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	b085      	sub	sp, #20
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d008      	beq.n	8000d18 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2204      	movs	r2, #4
 8000d0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e022      	b.n	8000d5e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 020e 	bic.w	r2, r2, #14
 8000d26:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0201 	bic.w	r2, r2, #1
 8000d36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3c:	f003 021c 	and.w	r2, r3, #28
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	2101      	movs	r1, #1
 8000d46:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr

08000d6a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d005      	beq.n	8000d8e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2204      	movs	r2, #4
 8000d86:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e029      	b.n	8000de2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 020e 	bic.w	r2, r2, #14
 8000d9c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0201 	bic.w	r2, r2, #1
 8000dac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f003 021c 	and.w	r2, r3, #28
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	2101      	movs	r1, #1
 8000dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d003      	beq.n	8000de2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	4798      	blx	r3
    }
  }
  return status;
 8000de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3710      	adds	r7, #16
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 8000df2:	4b68      	ldr	r3, [pc, #416]	; (8000f94 <HAL_FLASH_IRQHandler+0x1a8>)
 8000df4:	695b      	ldr	r3, [r3, #20]
 8000df6:	4a67      	ldr	r2, [pc, #412]	; (8000f94 <HAL_FLASH_IRQHandler+0x1a8>)
 8000df8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000dfc:	f023 0307 	bic.w	r3, r3, #7
 8000e00:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 8000e02:	4b64      	ldr	r3, [pc, #400]	; (8000f94 <HAL_FLASH_IRQHandler+0x1a8>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	4a63      	ldr	r2, [pc, #396]	; (8000f94 <HAL_FLASH_IRQHandler+0x1a8>)
 8000e08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000e0c:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 8000e0e:	4b62      	ldr	r3, [pc, #392]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000e10:	7a1b      	ldrb	r3, [r3, #8]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d105      	bne.n	8000e24 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8000e18:	4b5e      	ldr	r3, [pc, #376]	; (8000f94 <HAL_FLASH_IRQHandler+0x1a8>)
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	4a5d      	ldr	r2, [pc, #372]	; (8000f94 <HAL_FLASH_IRQHandler+0x1a8>)
 8000e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e22:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8000e24:	4b5b      	ldr	r3, [pc, #364]	; (8000f94 <HAL_FLASH_IRQHandler+0x1a8>)
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d045      	beq.n	8000ec2 <HAL_FLASH_IRQHandler+0xd6>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 8000e36:	4b58      	ldr	r3, [pc, #352]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000e38:	685a      	ldr	r2, [r3, #4]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	4a56      	ldr	r2, [pc, #344]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000e40:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d007      	beq.n	8000e5c <HAL_FLASH_IRQHandler+0x70>
 8000e4c:	4b51      	ldr	r3, [pc, #324]	; (8000f94 <HAL_FLASH_IRQHandler+0x1a8>)
 8000e4e:	699a      	ldr	r2, [r3, #24]
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8000e56:	494f      	ldr	r1, [pc, #316]	; (8000f94 <HAL_FLASH_IRQHandler+0x1a8>)
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	618b      	str	r3, [r1, #24]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d004      	beq.n	8000e70 <HAL_FLASH_IRQHandler+0x84>
 8000e66:	4a4b      	ldr	r2, [pc, #300]	; (8000f94 <HAL_FLASH_IRQHandler+0x1a8>)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000e6e:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 8000e70:	f000 f8de 	bl	8001030 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 8000e74:	4b48      	ldr	r3, [pc, #288]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000e76:	7a1b      	ldrb	r3, [r3, #8]
 8000e78:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 8000e7a:	7afb      	ldrb	r3, [r7, #11]
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d105      	bne.n	8000e8c <HAL_FLASH_IRQHandler+0xa0>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 8000e80:	4b45      	ldr	r3, [pc, #276]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f000 f893 	bl	8000fb0 <HAL_FLASH_OperationErrorCallback>
 8000e8a:	e017      	b.n	8000ebc <HAL_FLASH_IRQHandler+0xd0>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 8000e8c:	7afb      	ldrb	r3, [r7, #11]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d105      	bne.n	8000e9e <HAL_FLASH_IRQHandler+0xb2>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 8000e92:	4b41      	ldr	r3, [pc, #260]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000e94:	691b      	ldr	r3, [r3, #16]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f88a 	bl	8000fb0 <HAL_FLASH_OperationErrorCallback>
 8000e9c:	e00e      	b.n	8000ebc <HAL_FLASH_IRQHandler+0xd0>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 8000e9e:	7afb      	ldrb	r3, [r7, #11]
 8000ea0:	2b03      	cmp	r3, #3
 8000ea2:	d002      	beq.n	8000eaa <HAL_FLASH_IRQHandler+0xbe>
 8000ea4:	7afb      	ldrb	r3, [r7, #11]
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	d105      	bne.n	8000eb6 <HAL_FLASH_IRQHandler+0xca>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8000eaa:	4b3b      	ldr	r3, [pc, #236]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000eac:	68db      	ldr	r3, [r3, #12]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 f87e 	bl	8000fb0 <HAL_FLASH_OperationErrorCallback>
 8000eb4:	e002      	b.n	8000ebc <HAL_FLASH_IRQHandler+0xd0>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 f87a 	bl	8000fb0 <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000ebc:	4b36      	ldr	r3, [pc, #216]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <HAL_FLASH_IRQHandler+0x1a8>)
 8000ec4:	691b      	ldr	r3, [r3, #16]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d04f      	beq.n	8000f6e <HAL_FLASH_IRQHandler+0x182>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000ece:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <HAL_FLASH_IRQHandler+0x1a8>)
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000ed6:	7a1b      	ldrb	r3, [r3, #8]
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d12b      	bne.n	8000f36 <HAL_FLASH_IRQHandler+0x14a>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8000ede:	4b2e      	ldr	r3, [pc, #184]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	4a2c      	ldr	r2, [pc, #176]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000ee6:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 8000ee8:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d013      	beq.n	8000f18 <HAL_FLASH_IRQHandler+0x12c>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8000ef0:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 f851 	bl	8000f9c <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 8000efa:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	3301      	adds	r3, #1
 8000f00:	4a25      	ldr	r2, [pc, #148]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000f02:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000f06:	695b      	ldr	r3, [r3, #20]
 8000f08:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8000f0a:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000f0c:	691b      	ldr	r3, [r3, #16]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f000 f857 	bl	8000fc4 <FLASH_PageErase>
 8000f16:	e02a      	b.n	8000f6e <HAL_FLASH_IRQHandler+0x182>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f1e:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8000f26:	f000 f883 	bl	8001030 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8000f2a:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f834 	bl	8000f9c <HAL_FLASH_EndOfOperationCallback>
 8000f34:	e01b      	b.n	8000f6e <HAL_FLASH_IRQHandler+0x182>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 8000f36:	f000 f87b 	bl	8001030 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000f3c:	7a1b      	ldrb	r3, [r3, #8]
 8000f3e:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 8000f40:	7afb      	ldrb	r3, [r7, #11]
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d105      	bne.n	8000f52 <HAL_FLASH_IRQHandler+0x166>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8000f46:	4b14      	ldr	r3, [pc, #80]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f826 	bl	8000f9c <HAL_FLASH_EndOfOperationCallback>
 8000f50:	e00a      	b.n	8000f68 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 8000f52:	7afb      	ldrb	r3, [r7, #11]
 8000f54:	2b03      	cmp	r3, #3
 8000f56:	d002      	beq.n	8000f5e <HAL_FLASH_IRQHandler+0x172>
 8000f58:	7afb      	ldrb	r3, [r7, #11]
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	d104      	bne.n	8000f68 <HAL_FLASH_IRQHandler+0x17c>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f81a 	bl	8000f9c <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8000f68:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000f70:	7a1b      	ldrb	r3, [r3, #8]
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d108      	bne.n	8000f8a <HAL_FLASH_IRQHandler+0x19e>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_FLASH_IRQHandler+0x1a8>)
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	4a05      	ldr	r2, [pc, #20]	; (8000f94 <HAL_FLASH_IRQHandler+0x1a8>)
 8000f7e:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000f82:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8000f84:	4b04      	ldr	r3, [pc, #16]	; (8000f98 <HAL_FLASH_IRQHandler+0x1ac>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40022000 	.word	0x40022000
 8000f98:	2000000c 	.word	0x2000000c

08000f9c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d006      	beq.n	8000fe6 <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <FLASH_PageErase+0x68>)
 8000fda:	695b      	ldr	r3, [r3, #20]
 8000fdc:	4a13      	ldr	r2, [pc, #76]	; (800102c <FLASH_PageErase+0x68>)
 8000fde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fe2:	6153      	str	r3, [r2, #20]
 8000fe4:	e005      	b.n	8000ff2 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <FLASH_PageErase+0x68>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <FLASH_PageErase+0x68>)
 8000fec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ff0:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8000ff2:	4b0e      	ldr	r3, [pc, #56]	; (800102c <FLASH_PageErase+0x68>)
 8000ff4:	695b      	ldr	r3, [r3, #20]
 8000ff6:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8001002:	490a      	ldr	r1, [pc, #40]	; (800102c <FLASH_PageErase+0x68>)
 8001004:	4313      	orrs	r3, r2
 8001006:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <FLASH_PageErase+0x68>)
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	4a07      	ldr	r2, [pc, #28]	; (800102c <FLASH_PageErase+0x68>)
 800100e:	f043 0302 	orr.w	r3, r3, #2
 8001012:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <FLASH_PageErase+0x68>)
 8001016:	695b      	ldr	r3, [r3, #20]
 8001018:	4a04      	ldr	r2, [pc, #16]	; (800102c <FLASH_PageErase+0x68>)
 800101a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101e:	6153      	str	r3, [r2, #20]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40022000 	.word	0x40022000

08001030 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <FLASH_FlushCaches+0x8c>)
 8001038:	7f1b      	ldrb	r3, [r3, #28]
 800103a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d002      	beq.n	8001048 <FLASH_FlushCaches+0x18>
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b03      	cmp	r3, #3
 8001046:	d117      	bne.n	8001078 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001048:	4b1d      	ldr	r3, [pc, #116]	; (80010c0 <FLASH_FlushCaches+0x90>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a1c      	ldr	r2, [pc, #112]	; (80010c0 <FLASH_FlushCaches+0x90>)
 800104e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001052:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001054:	4b1a      	ldr	r3, [pc, #104]	; (80010c0 <FLASH_FlushCaches+0x90>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a19      	ldr	r2, [pc, #100]	; (80010c0 <FLASH_FlushCaches+0x90>)
 800105a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800105e:	6013      	str	r3, [r2, #0]
 8001060:	4b17      	ldr	r3, [pc, #92]	; (80010c0 <FLASH_FlushCaches+0x90>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <FLASH_FlushCaches+0x90>)
 8001066:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800106a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <FLASH_FlushCaches+0x90>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a13      	ldr	r2, [pc, #76]	; (80010c0 <FLASH_FlushCaches+0x90>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001076:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d002      	beq.n	8001084 <FLASH_FlushCaches+0x54>
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	2b03      	cmp	r3, #3
 8001082:	d111      	bne.n	80010a8 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <FLASH_FlushCaches+0x90>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <FLASH_FlushCaches+0x90>)
 800108a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <FLASH_FlushCaches+0x90>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <FLASH_FlushCaches+0x90>)
 8001096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800109a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <FLASH_FlushCaches+0x90>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <FLASH_FlushCaches+0x90>)
 80010a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010a6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <FLASH_FlushCaches+0x8c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	771a      	strb	r2, [r3, #28]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	2000000c 	.word	0x2000000c
 80010c0:	40022000 	.word	0x40022000

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d2:	e17f      	b.n	80013d4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2101      	movs	r1, #1
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 8171 	beq.w	80013ce <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d005      	beq.n	8001104 <HAL_GPIO_Init+0x40>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d130      	bne.n	8001166 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800113a:	2201      	movs	r2, #1
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	091b      	lsrs	r3, r3, #4
 8001150:	f003 0201 	and.w	r2, r3, #1
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b03      	cmp	r3, #3
 8001170:	d118      	bne.n	80011a4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001178:	2201      	movs	r2, #1
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	08db      	lsrs	r3, r3, #3
 800118e:	f003 0201 	and.w	r2, r3, #1
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	4313      	orrs	r3, r2
 800119c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b03      	cmp	r3, #3
 80011ae:	d017      	beq.n	80011e0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68db      	ldr	r3, [r3, #12]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	fa02 f303 	lsl.w	r3, r2, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d123      	bne.n	8001234 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	08da      	lsrs	r2, r3, #3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3208      	adds	r2, #8
 80011f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	f003 0307 	and.w	r3, r3, #7
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	220f      	movs	r2, #15
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	691a      	ldr	r2, [r3, #16]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	08da      	lsrs	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3208      	adds	r2, #8
 800122e:	6939      	ldr	r1, [r7, #16]
 8001230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2203      	movs	r2, #3
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0203 	and.w	r2, r3, #3
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001270:	2b00      	cmp	r3, #0
 8001272:	f000 80ac 	beq.w	80013ce <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001276:	4b5f      	ldr	r3, [pc, #380]	; (80013f4 <HAL_GPIO_Init+0x330>)
 8001278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800127a:	4a5e      	ldr	r2, [pc, #376]	; (80013f4 <HAL_GPIO_Init+0x330>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6613      	str	r3, [r2, #96]	; 0x60
 8001282:	4b5c      	ldr	r3, [pc, #368]	; (80013f4 <HAL_GPIO_Init+0x330>)
 8001284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800128e:	4a5a      	ldr	r2, [pc, #360]	; (80013f8 <HAL_GPIO_Init+0x334>)
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	3302      	adds	r3, #2
 8001296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012b8:	d025      	beq.n	8001306 <HAL_GPIO_Init+0x242>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a4f      	ldr	r2, [pc, #316]	; (80013fc <HAL_GPIO_Init+0x338>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d01f      	beq.n	8001302 <HAL_GPIO_Init+0x23e>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a4e      	ldr	r2, [pc, #312]	; (8001400 <HAL_GPIO_Init+0x33c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d019      	beq.n	80012fe <HAL_GPIO_Init+0x23a>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <HAL_GPIO_Init+0x340>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d013      	beq.n	80012fa <HAL_GPIO_Init+0x236>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a4c      	ldr	r2, [pc, #304]	; (8001408 <HAL_GPIO_Init+0x344>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d00d      	beq.n	80012f6 <HAL_GPIO_Init+0x232>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a4b      	ldr	r2, [pc, #300]	; (800140c <HAL_GPIO_Init+0x348>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d007      	beq.n	80012f2 <HAL_GPIO_Init+0x22e>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a4a      	ldr	r2, [pc, #296]	; (8001410 <HAL_GPIO_Init+0x34c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d101      	bne.n	80012ee <HAL_GPIO_Init+0x22a>
 80012ea:	2306      	movs	r3, #6
 80012ec:	e00c      	b.n	8001308 <HAL_GPIO_Init+0x244>
 80012ee:	2307      	movs	r3, #7
 80012f0:	e00a      	b.n	8001308 <HAL_GPIO_Init+0x244>
 80012f2:	2305      	movs	r3, #5
 80012f4:	e008      	b.n	8001308 <HAL_GPIO_Init+0x244>
 80012f6:	2304      	movs	r3, #4
 80012f8:	e006      	b.n	8001308 <HAL_GPIO_Init+0x244>
 80012fa:	2303      	movs	r3, #3
 80012fc:	e004      	b.n	8001308 <HAL_GPIO_Init+0x244>
 80012fe:	2302      	movs	r3, #2
 8001300:	e002      	b.n	8001308 <HAL_GPIO_Init+0x244>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <HAL_GPIO_Init+0x244>
 8001306:	2300      	movs	r3, #0
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	f002 0203 	and.w	r2, r2, #3
 800130e:	0092      	lsls	r2, r2, #2
 8001310:	4093      	lsls	r3, r2
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001318:	4937      	ldr	r1, [pc, #220]	; (80013f8 <HAL_GPIO_Init+0x334>)
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	693a      	ldr	r2, [r7, #16]
 8001322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001326:	4b3b      	ldr	r3, [pc, #236]	; (8001414 <HAL_GPIO_Init+0x350>)
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d003      	beq.n	800134a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	4313      	orrs	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800134a:	4a32      	ldr	r2, [pc, #200]	; (8001414 <HAL_GPIO_Init+0x350>)
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001350:	4b30      	ldr	r3, [pc, #192]	; (8001414 <HAL_GPIO_Init+0x350>)
 8001352:	68db      	ldr	r3, [r3, #12]
 8001354:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001374:	4a27      	ldr	r2, [pc, #156]	; (8001414 <HAL_GPIO_Init+0x350>)
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800137a:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_GPIO_Init+0x350>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800139e:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <HAL_GPIO_Init+0x350>)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_GPIO_Init+0x350>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013c8:	4a12      	ldr	r2, [pc, #72]	; (8001414 <HAL_GPIO_Init+0x350>)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3301      	adds	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa22 f303 	lsr.w	r3, r2, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f47f ae78 	bne.w	80010d4 <HAL_GPIO_Init+0x10>
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	371c      	adds	r7, #28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40010000 	.word	0x40010000
 80013fc:	48000400 	.word	0x48000400
 8001400:	48000800 	.word	0x48000800
 8001404:	48000c00 	.word	0x48000c00
 8001408:	48001000 	.word	0x48001000
 800140c:	48001400 	.word	0x48001400
 8001410:	48001800 	.word	0x48001800
 8001414:	40010400 	.word	0x40010400

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001434:	e002      	b.n	800143c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001436:	887a      	ldrh	r2, [r7, #2]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800143c:	bf00      	nop
 800143e:	370c      	adds	r7, #12
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	460b      	mov	r3, r1
 8001452:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4013      	ands	r3, r2
 8001460:	041a      	lsls	r2, r3, #16
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43d9      	mvns	r1, r3
 8001466:	887b      	ldrh	r3, [r7, #2]
 8001468:	400b      	ands	r3, r1
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
}
 8001470:	bf00      	nop
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001488:	695a      	ldr	r2, [r3, #20]
 800148a:	88fb      	ldrh	r3, [r7, #6]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001498:	88fb      	ldrh	r3, [r7, #6]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff f8f6 	bl	800068c <HAL_GPIO_EXTI_Callback>
  }
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40010400 	.word	0x40010400

080014ac <HAL_PWR_PVDCallback>:
/**
  * @brief PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
   */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40007000 	.word	0x40007000

080014d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014e6:	d130      	bne.n	800154a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014e8:	4b23      	ldr	r3, [pc, #140]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014f4:	d038      	beq.n	8001568 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014f6:	4b20      	ldr	r3, [pc, #128]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014fe:	4a1e      	ldr	r2, [pc, #120]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001500:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001504:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2232      	movs	r2, #50	; 0x32
 800150c:	fb02 f303 	mul.w	r3, r2, r3
 8001510:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	0c9b      	lsrs	r3, r3, #18
 8001518:	3301      	adds	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800151c:	e002      	b.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	3b01      	subs	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001530:	d102      	bne.n	8001538 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f2      	bne.n	800151e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001544:	d110      	bne.n	8001568 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e00f      	b.n	800156a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001556:	d007      	beq.n	8001568 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001560:	4a05      	ldr	r2, [pc, #20]	; (8001578 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001566:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40007000 	.word	0x40007000
 800157c:	20000000 	.word	0x20000000
 8001580:	431bde83 	.word	0x431bde83

08001584 <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != 0x0U)
 8001588:	4b1c      	ldr	r3, [pc, #112]	; (80015fc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d005      	beq.n	80015a0 <HAL_PWREx_PVD_PVM_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8001594:	f7ff ff8a 	bl	80014ac <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 800159a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800159e:	615a      	str	r2, [r3, #20]
  }
  /* Next, successively check PVMx exti flags */
#if defined(PWR_CR2_PVME1)
  if(__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0x0U)
 80015a0:	4b16      	ldr	r3, [pc, #88]	; (80015fc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80015a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a4:	f003 0308 	and.w	r3, r3, #8
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d004      	beq.n	80015b6 <HAL_PWREx_PVD_PVM_IRQHandler+0x32>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 80015ac:	f000 f828 	bl	8001600 <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 80015b0:	4b12      	ldr	r3, [pc, #72]	; (80015fc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80015b2:	2208      	movs	r2, #8
 80015b4:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME1 */
#if defined(PWR_CR2_PVME2)
  if(__HAL_PWR_PVM2_EXTI_GET_FLAG() != 0x0U)
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80015b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ba:	f003 0310 	and.w	r3, r3, #16
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d004      	beq.n	80015cc <HAL_PWREx_PVD_PVM_IRQHandler+0x48>
  {
    /* PWR PVM2 interrupt user callback */
    HAL_PWREx_PVM2Callback();
 80015c2:	f000 f824 	bl	800160e <HAL_PWREx_PVM2Callback>

    /* Clear PVM2 exti pending bit */
    __HAL_PWR_PVM2_EXTI_CLEAR_FLAG();
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80015c8:	2210      	movs	r2, #16
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34
  }
#endif /* PWR_CR2_PVME2 */
  if(__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0x0U)
 80015cc:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80015ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015d0:	f003 0320 	and.w	r3, r3, #32
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d004      	beq.n	80015e2 <HAL_PWREx_PVD_PVM_IRQHandler+0x5e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 80015d8:	f000 f820 	bl	800161c <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80015de:	2220      	movs	r2, #32
 80015e0:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if(__HAL_PWR_PVM4_EXTI_GET_FLAG() != 0x0U)
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80015e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <HAL_PWREx_PVD_PVM_IRQHandler+0x74>
  {
    /* PWR PVM4 interrupt user callback */
    HAL_PWREx_PVM4Callback();
 80015ee:	f000 f81c 	bl	800162a <HAL_PWREx_PVM4Callback>

    /* Clear PVM4 exti pending bit */
    __HAL_PWR_PVM4_EXTI_CLEAR_FLAG();
 80015f2:	4b02      	ldr	r3, [pc, #8]	; (80015fc <HAL_PWREx_PVD_PVM_IRQHandler+0x78>)
 80015f4:	2240      	movs	r2, #64	; 0x40
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40010400 	.word	0x40010400

08001600 <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <HAL_PWREx_PVM2Callback>:
/**
  * @brief PWR PVM2 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM2Callback(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM2Callback() API can be implemented in the user file
   */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <HAL_PWREx_PVM4Callback>:
/**
  * @brief PWR PVM4 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM4Callback(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM4Callback() API can be implemented in the user file
   */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e3d4      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800164a:	4ba1      	ldr	r3, [pc, #644]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001654:	4b9e      	ldr	r3, [pc, #632]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 80e4 	beq.w	8001834 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d007      	beq.n	8001682 <HAL_RCC_OscConfig+0x4a>
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b0c      	cmp	r3, #12
 8001676:	f040 808b 	bne.w	8001790 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	2b01      	cmp	r3, #1
 800167e:	f040 8087 	bne.w	8001790 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001682:	4b93      	ldr	r3, [pc, #588]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d005      	beq.n	800169a <HAL_RCC_OscConfig+0x62>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e3ac      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a1a      	ldr	r2, [r3, #32]
 800169e:	4b8c      	ldr	r3, [pc, #560]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d004      	beq.n	80016b4 <HAL_RCC_OscConfig+0x7c>
 80016aa:	4b89      	ldr	r3, [pc, #548]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016b2:	e005      	b.n	80016c0 <HAL_RCC_OscConfig+0x88>
 80016b4:	4b86      	ldr	r3, [pc, #536]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d223      	bcs.n	800170c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fd41 	bl	8002150 <RCC_SetFlashLatencyFromMSIRange>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e38d      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d8:	4b7d      	ldr	r3, [pc, #500]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a7c      	ldr	r2, [pc, #496]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016de:	f043 0308 	orr.w	r3, r3, #8
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	4b7a      	ldr	r3, [pc, #488]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	4977      	ldr	r1, [pc, #476]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f6:	4b76      	ldr	r3, [pc, #472]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	021b      	lsls	r3, r3, #8
 8001704:	4972      	ldr	r1, [pc, #456]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001706:	4313      	orrs	r3, r2
 8001708:	604b      	str	r3, [r1, #4]
 800170a:	e025      	b.n	8001758 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800170c:	4b70      	ldr	r3, [pc, #448]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a6f      	ldr	r2, [pc, #444]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001712:	f043 0308 	orr.w	r3, r3, #8
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b6d      	ldr	r3, [pc, #436]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	496a      	ldr	r1, [pc, #424]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001726:	4313      	orrs	r3, r2
 8001728:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800172a:	4b69      	ldr	r3, [pc, #420]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	021b      	lsls	r3, r3, #8
 8001738:	4965      	ldr	r1, [pc, #404]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d109      	bne.n	8001758 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1b      	ldr	r3, [r3, #32]
 8001748:	4618      	mov	r0, r3
 800174a:	f000 fd01 	bl	8002150 <RCC_SetFlashLatencyFromMSIRange>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e34d      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001758:	f000 fc36 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 800175c:	4602      	mov	r2, r0
 800175e:	4b5c      	ldr	r3, [pc, #368]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	091b      	lsrs	r3, r3, #4
 8001764:	f003 030f 	and.w	r3, r3, #15
 8001768:	495a      	ldr	r1, [pc, #360]	; (80018d4 <HAL_RCC_OscConfig+0x29c>)
 800176a:	5ccb      	ldrb	r3, [r1, r3]
 800176c:	f003 031f 	and.w	r3, r3, #31
 8001770:	fa22 f303 	lsr.w	r3, r2, r3
 8001774:	4a58      	ldr	r2, [pc, #352]	; (80018d8 <HAL_RCC_OscConfig+0x2a0>)
 8001776:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001778:	4b58      	ldr	r3, [pc, #352]	; (80018dc <HAL_RCC_OscConfig+0x2a4>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff f949 	bl	8000a14 <HAL_InitTick>
 8001782:	4603      	mov	r3, r0
 8001784:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d052      	beq.n	8001832 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	e331      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d032      	beq.n	80017fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001798:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a4c      	ldr	r2, [pc, #304]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017a4:	f7ff f986 	bl	8000ab4 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017ac:	f7ff f982 	bl	8000ab4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e31a      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017be:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ca:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a40      	ldr	r2, [pc, #256]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80017d0:	f043 0308 	orr.w	r3, r3, #8
 80017d4:	6013      	str	r3, [r2, #0]
 80017d6:	4b3e      	ldr	r3, [pc, #248]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	493b      	ldr	r1, [pc, #236]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	021b      	lsls	r3, r3, #8
 80017f6:	4936      	ldr	r1, [pc, #216]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	604b      	str	r3, [r1, #4]
 80017fc:	e01a      	b.n	8001834 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017fe:	4b34      	ldr	r3, [pc, #208]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a33      	ldr	r2, [pc, #204]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800180a:	f7ff f953 	bl	8000ab4 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001812:	f7ff f94f 	bl	8000ab4 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e2e7      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001824:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f0      	bne.n	8001812 <HAL_RCC_OscConfig+0x1da>
 8001830:	e000      	b.n	8001834 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001832:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d074      	beq.n	800192a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	2b08      	cmp	r3, #8
 8001844:	d005      	beq.n	8001852 <HAL_RCC_OscConfig+0x21a>
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	2b0c      	cmp	r3, #12
 800184a:	d10e      	bne.n	800186a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	2b03      	cmp	r3, #3
 8001850:	d10b      	bne.n	800186a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d064      	beq.n	8001928 <HAL_RCC_OscConfig+0x2f0>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d160      	bne.n	8001928 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e2c4      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001872:	d106      	bne.n	8001882 <HAL_RCC_OscConfig+0x24a>
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e01d      	b.n	80018be <HAL_RCC_OscConfig+0x286>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x26e>
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0f      	ldr	r2, [pc, #60]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 8001892:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0c      	ldr	r2, [pc, #48]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 800189e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e00b      	b.n	80018be <HAL_RCC_OscConfig+0x286>
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80018ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a06      	ldr	r2, [pc, #24]	; (80018d0 <HAL_RCC_OscConfig+0x298>)
 80018b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d01c      	beq.n	8001900 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff f8f5 	bl	8000ab4 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018cc:	e011      	b.n	80018f2 <HAL_RCC_OscConfig+0x2ba>
 80018ce:	bf00      	nop
 80018d0:	40021000 	.word	0x40021000
 80018d4:	08003c64 	.word	0x08003c64
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7ff f8e8 	bl	8000ab4 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b64      	cmp	r3, #100	; 0x64
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e280      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018f2:	4baf      	ldr	r3, [pc, #700]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f0      	beq.n	80018e0 <HAL_RCC_OscConfig+0x2a8>
 80018fe:	e014      	b.n	800192a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7ff f8d8 	bl	8000ab4 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001908:	f7ff f8d4 	bl	8000ab4 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b64      	cmp	r3, #100	; 0x64
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e26c      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800191a:	4ba5      	ldr	r3, [pc, #660]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x2d0>
 8001926:	e000      	b.n	800192a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d060      	beq.n	80019f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b04      	cmp	r3, #4
 800193a:	d005      	beq.n	8001948 <HAL_RCC_OscConfig+0x310>
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d119      	bne.n	8001976 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d116      	bne.n	8001976 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001948:	4b99      	ldr	r3, [pc, #612]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_RCC_OscConfig+0x328>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e249      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001960:	4b93      	ldr	r3, [pc, #588]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	061b      	lsls	r3, r3, #24
 800196e:	4990      	ldr	r1, [pc, #576]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001974:	e040      	b.n	80019f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d023      	beq.n	80019c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800197e:	4b8c      	ldr	r3, [pc, #560]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a8b      	ldr	r2, [pc, #556]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198a:	f7ff f893 	bl	8000ab4 <HAL_GetTick>
 800198e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001990:	e008      	b.n	80019a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001992:	f7ff f88f 	bl	8000ab4 <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d901      	bls.n	80019a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019a0:	2303      	movs	r3, #3
 80019a2:	e227      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019a4:	4b82      	ldr	r3, [pc, #520]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0f0      	beq.n	8001992 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b0:	4b7f      	ldr	r3, [pc, #508]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	061b      	lsls	r3, r3, #24
 80019be:	497c      	ldr	r1, [pc, #496]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
 80019c4:	e018      	b.n	80019f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c6:	4b7a      	ldr	r3, [pc, #488]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a79      	ldr	r2, [pc, #484]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 80019cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d2:	f7ff f86f 	bl	8000ab4 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019da:	f7ff f86b 	bl	8000ab4 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e203      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019ec:	4b70      	ldr	r3, [pc, #448]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0308 	and.w	r3, r3, #8
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d03c      	beq.n	8001a7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d01c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0c:	4b68      	ldr	r3, [pc, #416]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a12:	4a67      	ldr	r2, [pc, #412]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1c:	f7ff f84a 	bl	8000ab4 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff f846 	bl	8000ab4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e1de      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a36:	4b5e      	ldr	r3, [pc, #376]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3c:	f003 0302 	and.w	r3, r3, #2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d0ef      	beq.n	8001a24 <HAL_RCC_OscConfig+0x3ec>
 8001a44:	e01b      	b.n	8001a7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a46:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a4c:	4a58      	ldr	r2, [pc, #352]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a4e:	f023 0301 	bic.w	r3, r3, #1
 8001a52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a56:	f7ff f82d 	bl	8000ab4 <HAL_GetTick>
 8001a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a5c:	e008      	b.n	8001a70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5e:	f7ff f829 	bl	8000ab4 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d901      	bls.n	8001a70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	e1c1      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a70:	4b4f      	ldr	r3, [pc, #316]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1ef      	bne.n	8001a5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80a6 	beq.w	8001bd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a90:	4b47      	ldr	r3, [pc, #284]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10d      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a9c:	4b44      	ldr	r3, [pc, #272]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa0:	4a43      	ldr	r2, [pc, #268]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa8:	4b41      	ldr	r3, [pc, #260]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab8:	4b3e      	ldr	r3, [pc, #248]	; (8001bb4 <HAL_RCC_OscConfig+0x57c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d118      	bne.n	8001af6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ac4:	4b3b      	ldr	r3, [pc, #236]	; (8001bb4 <HAL_RCC_OscConfig+0x57c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a3a      	ldr	r2, [pc, #232]	; (8001bb4 <HAL_RCC_OscConfig+0x57c>)
 8001aca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ace:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad0:	f7fe fff0 	bl	8000ab4 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad8:	f7fe ffec 	bl	8000ab4 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e184      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aea:	4b32      	ldr	r3, [pc, #200]	; (8001bb4 <HAL_RCC_OscConfig+0x57c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d108      	bne.n	8001b10 <HAL_RCC_OscConfig+0x4d8>
 8001afe:	4b2c      	ldr	r3, [pc, #176]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b04:	4a2a      	ldr	r2, [pc, #168]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0e:	e024      	b.n	8001b5a <HAL_RCC_OscConfig+0x522>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	2b05      	cmp	r3, #5
 8001b16:	d110      	bne.n	8001b3a <HAL_RCC_OscConfig+0x502>
 8001b18:	4b25      	ldr	r3, [pc, #148]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	4a24      	ldr	r2, [pc, #144]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b2e:	4a20      	ldr	r2, [pc, #128]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b38:	e00f      	b.n	8001b5a <HAL_RCC_OscConfig+0x522>
 8001b3a:	4b1d      	ldr	r3, [pc, #116]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b40:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b42:	f023 0301 	bic.w	r3, r3, #1
 8001b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b4a:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b50:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b52:	f023 0304 	bic.w	r3, r3, #4
 8001b56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d016      	beq.n	8001b90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b62:	f7fe ffa7 	bl	8000ab4 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7fe ffa3 	bl	8000ab4 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e139      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_OscConfig+0x578>)
 8001b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0ed      	beq.n	8001b6a <HAL_RCC_OscConfig+0x532>
 8001b8e:	e01a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b90:	f7fe ff90 	bl	8000ab4 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b96:	e00f      	b.n	8001bb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b98:	f7fe ff8c 	bl	8000ab4 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d906      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e122      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bb8:	4b90      	ldr	r3, [pc, #576]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1e8      	bne.n	8001b98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bc6:	7ffb      	ldrb	r3, [r7, #31]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d105      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bcc:	4b8b      	ldr	r3, [pc, #556]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd0:	4a8a      	ldr	r2, [pc, #552]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001bd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 8108 	beq.w	8001df2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	f040 80d0 	bne.w	8001d8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bec:	4b83      	ldr	r3, [pc, #524]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	f003 0203 	and.w	r2, r3, #3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d130      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d127      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d11f      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c2c:	2a07      	cmp	r2, #7
 8001c2e:	bf14      	ite	ne
 8001c30:	2201      	movne	r2, #1
 8001c32:	2200      	moveq	r2, #0
 8001c34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d113      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c44:	085b      	lsrs	r3, r3, #1
 8001c46:	3b01      	subs	r3, #1
 8001c48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d109      	bne.n	8001c62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	085b      	lsrs	r3, r3, #1
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d06e      	beq.n	8001d40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	2b0c      	cmp	r3, #12
 8001c66:	d069      	beq.n	8001d3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c68:	4b64      	ldr	r3, [pc, #400]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d105      	bne.n	8001c80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c74:	4b61      	ldr	r3, [pc, #388]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e0b7      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c84:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a5c      	ldr	r2, [pc, #368]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c90:	f7fe ff10 	bl	8000ab4 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7fe ff0c 	bl	8000ab4 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e0a4      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001caa:	4b54      	ldr	r3, [pc, #336]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb6:	4b51      	ldr	r3, [pc, #324]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001cb8:	68da      	ldr	r2, [r3, #12]
 8001cba:	4b51      	ldr	r3, [pc, #324]	; (8001e00 <HAL_RCC_OscConfig+0x7c8>)
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cc2:	687a      	ldr	r2, [r7, #4]
 8001cc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cc6:	3a01      	subs	r2, #1
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	4311      	orrs	r1, r2
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cd0:	0212      	lsls	r2, r2, #8
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cd8:	0852      	lsrs	r2, r2, #1
 8001cda:	3a01      	subs	r2, #1
 8001cdc:	0552      	lsls	r2, r2, #21
 8001cde:	4311      	orrs	r1, r2
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ce4:	0852      	lsrs	r2, r2, #1
 8001ce6:	3a01      	subs	r2, #1
 8001ce8:	0652      	lsls	r2, r2, #25
 8001cea:	4311      	orrs	r1, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cf0:	0912      	lsrs	r2, r2, #4
 8001cf2:	0452      	lsls	r2, r2, #17
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	4941      	ldr	r1, [pc, #260]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cfc:	4b3f      	ldr	r3, [pc, #252]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a3e      	ldr	r2, [pc, #248]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d08:	4b3c      	ldr	r3, [pc, #240]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4a3b      	ldr	r2, [pc, #236]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d14:	f7fe fece 	bl	8000ab4 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1c:	f7fe feca 	bl	8000ab4 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e062      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2e:	4b33      	ldr	r3, [pc, #204]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d3a:	e05a      	b.n	8001df2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e059      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d40:	4b2e      	ldr	r3, [pc, #184]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d152      	bne.n	8001df2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d4c:	4b2b      	ldr	r3, [pc, #172]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a2a      	ldr	r2, [pc, #168]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d58:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d64:	f7fe fea6 	bl	8000ab4 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7fe fea2 	bl	8000ab4 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e03a      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x734>
 8001d8a:	e032      	b.n	8001df2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	2b0c      	cmp	r3, #12
 8001d90:	d02d      	beq.n	8001dee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001d98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d105      	bne.n	8001db6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001daa:	4b14      	ldr	r3, [pc, #80]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	4a13      	ldr	r2, [pc, #76]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001db0:	f023 0303 	bic.w	r3, r3, #3
 8001db4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001db6:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001dbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001dc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7fe fe75 	bl	8000ab4 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dce:	f7fe fe71 	bl	8000ab4 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e009      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de0:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_RCC_OscConfig+0x7c4>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0x796>
 8001dec:	e001      	b.n	8001df2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	f99d808c 	.word	0xf99d808c

08001e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b084      	sub	sp, #16
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e0c8      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e18:	4b66      	ldr	r3, [pc, #408]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d910      	bls.n	8001e48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b63      	ldr	r3, [pc, #396]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4961      	ldr	r1, [pc, #388]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b5f      	ldr	r3, [pc, #380]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e0b0      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d04c      	beq.n	8001eee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d107      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e5c:	4b56      	ldr	r3, [pc, #344]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d121      	bne.n	8001eac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e09e      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e74:	4b50      	ldr	r3, [pc, #320]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d115      	bne.n	8001eac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e092      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e8c:	4b4a      	ldr	r3, [pc, #296]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d109      	bne.n	8001eac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e086      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e9c:	4b46      	ldr	r3, [pc, #280]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e07e      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001eac:	4b42      	ldr	r3, [pc, #264]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 0203 	bic.w	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	493f      	ldr	r1, [pc, #252]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ebe:	f7fe fdf9 	bl	8000ab4 <HAL_GetTick>
 8001ec2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec4:	e00a      	b.n	8001edc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec6:	f7fe fdf5 	bl	8000ab4 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e066      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001edc:	4b36      	ldr	r3, [pc, #216]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 020c 	and.w	r2, r3, #12
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d1eb      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d008      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001efa:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	492c      	ldr	r1, [pc, #176]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b29      	ldr	r3, [pc, #164]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d210      	bcs.n	8001f3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b26      	ldr	r3, [pc, #152]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 0207 	bic.w	r2, r3, #7
 8001f22:	4924      	ldr	r1, [pc, #144]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <HAL_RCC_ClockConfig+0x1b0>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e036      	b.n	8001faa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f48:	4b1b      	ldr	r3, [pc, #108]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	4918      	ldr	r1, [pc, #96]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f66:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4910      	ldr	r1, [pc, #64]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f7a:	f000 f825 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <HAL_RCC_ClockConfig+0x1b4>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	490c      	ldr	r1, [pc, #48]	; (8001fbc <HAL_RCC_ClockConfig+0x1b8>)
 8001f8c:	5ccb      	ldrb	r3, [r1, r3]
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	4a0a      	ldr	r2, [pc, #40]	; (8001fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fd38 	bl	8000a14 <HAL_InitTick>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40022000 	.word	0x40022000
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	08003c64 	.word	0x08003c64
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000004 	.word	0x20000004

08001fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b089      	sub	sp, #36	; 0x24
 8001fcc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fd6:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x34>
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	2b0c      	cmp	r3, #12
 8001ff4:	d121      	bne.n	800203a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d11e      	bne.n	800203a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ffc:	4b34      	ldr	r3, [pc, #208]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0308 	and.w	r3, r3, #8
 8002004:	2b00      	cmp	r3, #0
 8002006:	d107      	bne.n	8002018 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002008:	4b31      	ldr	r3, [pc, #196]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800200a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	e005      	b.n	8002024 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002018:	4b2d      	ldr	r3, [pc, #180]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002024:	4a2b      	ldr	r2, [pc, #172]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10d      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d102      	bne.n	8002046 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002040:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	e004      	b.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b08      	cmp	r3, #8
 800204a:	d101      	bne.n	8002050 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800204c:	4b23      	ldr	r3, [pc, #140]	; (80020dc <HAL_RCC_GetSysClockFreq+0x114>)
 800204e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b0c      	cmp	r3, #12
 8002054:	d134      	bne.n	80020c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b02      	cmp	r3, #2
 8002064:	d003      	beq.n	800206e <HAL_RCC_GetSysClockFreq+0xa6>
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	2b03      	cmp	r3, #3
 800206a:	d003      	beq.n	8002074 <HAL_RCC_GetSysClockFreq+0xac>
 800206c:	e005      	b.n	800207a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002070:	617b      	str	r3, [r7, #20]
      break;
 8002072:	e005      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_RCC_GetSysClockFreq+0x114>)
 8002076:	617b      	str	r3, [r7, #20]
      break;
 8002078:	e002      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	617b      	str	r3, [r7, #20]
      break;
 800207e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002080:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	3301      	adds	r3, #1
 800208c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800208e:	4b10      	ldr	r3, [pc, #64]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002098:	697a      	ldr	r2, [r7, #20]
 800209a:	fb02 f203 	mul.w	r2, r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	0e5b      	lsrs	r3, r3, #25
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	3301      	adds	r3, #1
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80020be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020c0:	69bb      	ldr	r3, [r7, #24]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3724      	adds	r7, #36	; 0x24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08003c7c 	.word	0x08003c7c
 80020d8:	00f42400 	.word	0x00f42400
 80020dc:	007a1200 	.word	0x007a1200

080020e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	20000000 	.word	0x20000000

080020f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020fc:	f7ff fff0 	bl	80020e0 <HAL_RCC_GetHCLKFreq>
 8002100:	4602      	mov	r2, r0
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	0a1b      	lsrs	r3, r3, #8
 8002108:	f003 0307 	and.w	r3, r3, #7
 800210c:	4904      	ldr	r1, [pc, #16]	; (8002120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800210e:	5ccb      	ldrb	r3, [r1, r3]
 8002110:	f003 031f 	and.w	r3, r3, #31
 8002114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002118:	4618      	mov	r0, r3
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000
 8002120:	08003c74 	.word	0x08003c74

08002124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002128:	f7ff ffda 	bl	80020e0 <HAL_RCC_GetHCLKFreq>
 800212c:	4602      	mov	r2, r0
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	0adb      	lsrs	r3, r3, #11
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	4904      	ldr	r1, [pc, #16]	; (800214c <HAL_RCC_GetPCLK2Freq+0x28>)
 800213a:	5ccb      	ldrb	r3, [r1, r3]
 800213c:	f003 031f 	and.w	r3, r3, #31
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000
 800214c:	08003c74 	.word	0x08003c74

08002150 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800215c:	4b2a      	ldr	r3, [pc, #168]	; (8002208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002168:	f7ff f9a8 	bl	80014bc <HAL_PWREx_GetVoltageRange>
 800216c:	6178      	str	r0, [r7, #20]
 800216e:	e014      	b.n	800219a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002170:	4b25      	ldr	r3, [pc, #148]	; (8002208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002174:	4a24      	ldr	r2, [pc, #144]	; (8002208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800217a:	6593      	str	r3, [r2, #88]	; 0x58
 800217c:	4b22      	ldr	r3, [pc, #136]	; (8002208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002188:	f7ff f998 	bl	80014bc <HAL_PWREx_GetVoltageRange>
 800218c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800218e:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	4a1d      	ldr	r2, [pc, #116]	; (8002208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002198:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021a0:	d10b      	bne.n	80021ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b80      	cmp	r3, #128	; 0x80
 80021a6:	d919      	bls.n	80021dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2ba0      	cmp	r3, #160	; 0xa0
 80021ac:	d902      	bls.n	80021b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021ae:	2302      	movs	r3, #2
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	e013      	b.n	80021dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021b4:	2301      	movs	r3, #1
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	e010      	b.n	80021dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b80      	cmp	r3, #128	; 0x80
 80021be:	d902      	bls.n	80021c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021c0:	2303      	movs	r3, #3
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	e00a      	b.n	80021dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b80      	cmp	r3, #128	; 0x80
 80021ca:	d102      	bne.n	80021d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021cc:	2302      	movs	r3, #2
 80021ce:	613b      	str	r3, [r7, #16]
 80021d0:	e004      	b.n	80021dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b70      	cmp	r3, #112	; 0x70
 80021d6:	d101      	bne.n	80021dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021d8:	2301      	movs	r3, #1
 80021da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 0207 	bic.w	r2, r3, #7
 80021e4:	4909      	ldr	r1, [pc, #36]	; (800220c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d001      	beq.n	80021fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3718      	adds	r7, #24
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	40022000 	.word	0x40022000

08002210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002218:	2300      	movs	r3, #0
 800221a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800221c:	2300      	movs	r3, #0
 800221e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002228:	2b00      	cmp	r3, #0
 800222a:	d041      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002230:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002234:	d02a      	beq.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002236:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800223a:	d824      	bhi.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800223c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002240:	d008      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002242:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002246:	d81e      	bhi.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002248:	2b00      	cmp	r3, #0
 800224a:	d00a      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800224c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002250:	d010      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002252:	e018      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002254:	4b86      	ldr	r3, [pc, #536]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a85      	ldr	r2, [pc, #532]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800225e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002260:	e015      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	2100      	movs	r1, #0
 8002268:	4618      	mov	r0, r3
 800226a:	f000 fabb 	bl	80027e4 <RCCEx_PLLSAI1_Config>
 800226e:	4603      	mov	r3, r0
 8002270:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002272:	e00c      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3320      	adds	r3, #32
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f000 fba6 	bl	80029cc <RCCEx_PLLSAI2_Config>
 8002280:	4603      	mov	r3, r0
 8002282:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002284:	e003      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	74fb      	strb	r3, [r7, #19]
      break;
 800228a:	e000      	b.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800228c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800228e:	7cfb      	ldrb	r3, [r7, #19]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10b      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002294:	4b76      	ldr	r3, [pc, #472]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022a2:	4973      	ldr	r1, [pc, #460]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022aa:	e001      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022ac:	7cfb      	ldrb	r3, [r7, #19]
 80022ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d041      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022c4:	d02a      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022ca:	d824      	bhi.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022d0:	d008      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022d6:	d81e      	bhi.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00a      	beq.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e0:	d010      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022e2:	e018      	b.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022e4:	4b62      	ldr	r3, [pc, #392]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	4a61      	ldr	r2, [pc, #388]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022f0:	e015      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3304      	adds	r3, #4
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fa73 	bl	80027e4 <RCCEx_PLLSAI1_Config>
 80022fe:	4603      	mov	r3, r0
 8002300:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002302:	e00c      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3320      	adds	r3, #32
 8002308:	2100      	movs	r1, #0
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fb5e 	bl	80029cc <RCCEx_PLLSAI2_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002314:	e003      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	74fb      	strb	r3, [r7, #19]
      break;
 800231a:	e000      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800231c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800231e:	7cfb      	ldrb	r3, [r7, #19]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10b      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002324:	4b52      	ldr	r3, [pc, #328]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002332:	494f      	ldr	r1, [pc, #316]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800233a:	e001      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80a0 	beq.w	800248e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234e:	2300      	movs	r3, #0
 8002350:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002352:	4b47      	ldr	r3, [pc, #284]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800235e:	2301      	movs	r3, #1
 8002360:	e000      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002362:	2300      	movs	r3, #0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00d      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002368:	4b41      	ldr	r3, [pc, #260]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236c:	4a40      	ldr	r2, [pc, #256]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002372:	6593      	str	r3, [r2, #88]	; 0x58
 8002374:	4b3e      	ldr	r3, [pc, #248]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002380:	2301      	movs	r3, #1
 8002382:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002384:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a3a      	ldr	r2, [pc, #232]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002390:	f7fe fb90 	bl	8000ab4 <HAL_GetTick>
 8002394:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002396:	e009      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002398:	f7fe fb8c 	bl	8000ab4 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d902      	bls.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	74fb      	strb	r3, [r7, #19]
        break;
 80023aa:	e005      	b.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0ef      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d15c      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023be:	4b2c      	ldr	r3, [pc, #176]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d01f      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d019      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023dc:	4b24      	ldr	r3, [pc, #144]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023e8:	4b21      	ldr	r3, [pc, #132]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ee:	4a20      	ldr	r2, [pc, #128]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fe:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002408:	4a19      	ldr	r2, [pc, #100]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d016      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7fe fb4b 	bl	8000ab4 <HAL_GetTick>
 800241e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002420:	e00b      	b.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7fe fb47 	bl	8000ab4 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002430:	4293      	cmp	r3, r2
 8002432:	d902      	bls.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	74fb      	strb	r3, [r7, #19]
            break;
 8002438:	e006      	b.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243a:	4b0d      	ldr	r3, [pc, #52]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ec      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10c      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800244e:	4b08      	ldr	r3, [pc, #32]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002454:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800245e:	4904      	ldr	r1, [pc, #16]	; (8002470 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002466:	e009      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	74bb      	strb	r3, [r7, #18]
 800246c:	e006      	b.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800247c:	7c7b      	ldrb	r3, [r7, #17]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d105      	bne.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002482:	4b9e      	ldr	r3, [pc, #632]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002486:	4a9d      	ldr	r2, [pc, #628]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800248c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800249a:	4b98      	ldr	r3, [pc, #608]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a0:	f023 0203 	bic.w	r2, r3, #3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a8:	4994      	ldr	r1, [pc, #592]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00a      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024bc:	4b8f      	ldr	r3, [pc, #572]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	f023 020c 	bic.w	r2, r3, #12
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ca:	498c      	ldr	r1, [pc, #560]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0304 	and.w	r3, r3, #4
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024de:	4b87      	ldr	r3, [pc, #540]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	4983      	ldr	r1, [pc, #524]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0308 	and.w	r3, r3, #8
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002500:	4b7e      	ldr	r3, [pc, #504]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002506:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	497b      	ldr	r1, [pc, #492]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	4313      	orrs	r3, r2
 8002512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002522:	4b76      	ldr	r3, [pc, #472]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002528:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002530:	4972      	ldr	r1, [pc, #456]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	4313      	orrs	r3, r2
 8002534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b00      	cmp	r3, #0
 8002542:	d00a      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002544:	4b6d      	ldr	r3, [pc, #436]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	496a      	ldr	r1, [pc, #424]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	4313      	orrs	r3, r2
 8002556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002566:	4b65      	ldr	r3, [pc, #404]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002568:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	4961      	ldr	r1, [pc, #388]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00a      	beq.n	800259e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002588:	4b5c      	ldr	r3, [pc, #368]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002596:	4959      	ldr	r1, [pc, #356]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	4313      	orrs	r3, r2
 800259a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00a      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025aa:	4b54      	ldr	r3, [pc, #336]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b8:	4950      	ldr	r1, [pc, #320]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025cc:	4b4b      	ldr	r3, [pc, #300]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025da:	4948      	ldr	r1, [pc, #288]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025ee:	4b43      	ldr	r3, [pc, #268]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	493f      	ldr	r1, [pc, #252]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d028      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002610:	4b3a      	ldr	r3, [pc, #232]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002616:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800261e:	4937      	ldr	r1, [pc, #220]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800262a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800262e:	d106      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002630:	4b32      	ldr	r3, [pc, #200]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4a31      	ldr	r2, [pc, #196]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002636:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800263a:	60d3      	str	r3, [r2, #12]
 800263c:	e011      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002642:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002646:	d10c      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3304      	adds	r3, #4
 800264c:	2101      	movs	r1, #1
 800264e:	4618      	mov	r0, r3
 8002650:	f000 f8c8 	bl	80027e4 <RCCEx_PLLSAI1_Config>
 8002654:	4603      	mov	r3, r0
 8002656:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800265e:	7cfb      	ldrb	r3, [r7, #19]
 8002660:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d028      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800266e:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002674:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267c:	491f      	ldr	r1, [pc, #124]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002688:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800268c:	d106      	bne.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	4a1a      	ldr	r2, [pc, #104]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002698:	60d3      	str	r3, [r2, #12]
 800269a:	e011      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3304      	adds	r3, #4
 80026aa:	2101      	movs	r1, #1
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 f899 	bl	80027e4 <RCCEx_PLLSAI1_Config>
 80026b2:	4603      	mov	r3, r0
 80026b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026b6:	7cfb      	ldrb	r3, [r7, #19]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80026bc:	7cfb      	ldrb	r3, [r7, #19]
 80026be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d02b      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026cc:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026da:	4908      	ldr	r1, [pc, #32]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ea:	d109      	bne.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ec:	4b03      	ldr	r3, [pc, #12]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	4a02      	ldr	r2, [pc, #8]	; (80026fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026f6:	60d3      	str	r3, [r2, #12]
 80026f8:	e014      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026fa:	bf00      	nop
 80026fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002704:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002708:	d10c      	bne.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3304      	adds	r3, #4
 800270e:	2101      	movs	r1, #1
 8002710:	4618      	mov	r0, r3
 8002712:	f000 f867 	bl	80027e4 <RCCEx_PLLSAI1_Config>
 8002716:	4603      	mov	r3, r0
 8002718:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002720:	7cfb      	ldrb	r3, [r7, #19]
 8002722:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d02f      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002730:	4b2b      	ldr	r3, [pc, #172]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800273e:	4928      	ldr	r1, [pc, #160]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800274a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800274e:	d10d      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3304      	adds	r3, #4
 8002754:	2102      	movs	r1, #2
 8002756:	4618      	mov	r0, r3
 8002758:	f000 f844 	bl	80027e4 <RCCEx_PLLSAI1_Config>
 800275c:	4603      	mov	r3, r0
 800275e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d014      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	74bb      	strb	r3, [r7, #18]
 800276a:	e011      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002770:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002774:	d10c      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3320      	adds	r3, #32
 800277a:	2102      	movs	r1, #2
 800277c:	4618      	mov	r0, r3
 800277e:	f000 f925 	bl	80029cc <RCCEx_PLLSAI2_Config>
 8002782:	4603      	mov	r3, r0
 8002784:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002786:	7cfb      	ldrb	r3, [r7, #19]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800278c:	7cfb      	ldrb	r3, [r7, #19]
 800278e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00a      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800279c:	4b10      	ldr	r3, [pc, #64]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800279e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027aa:	490d      	ldr	r1, [pc, #52]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00b      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027be:	4b08      	ldr	r3, [pc, #32]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027ce:	4904      	ldr	r1, [pc, #16]	; (80027e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40021000 	.word	0x40021000

080027e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027f2:	4b75      	ldr	r3, [pc, #468]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d018      	beq.n	8002830 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027fe:	4b72      	ldr	r3, [pc, #456]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	f003 0203 	and.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d10d      	bne.n	800282a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
       ||
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002816:	4b6c      	ldr	r3, [pc, #432]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	091b      	lsrs	r3, r3, #4
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	1c5a      	adds	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
       ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d047      	beq.n	80028ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
 800282e:	e044      	b.n	80028ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d018      	beq.n	800286a <RCCEx_PLLSAI1_Config+0x86>
 8002838:	2b03      	cmp	r3, #3
 800283a:	d825      	bhi.n	8002888 <RCCEx_PLLSAI1_Config+0xa4>
 800283c:	2b01      	cmp	r3, #1
 800283e:	d002      	beq.n	8002846 <RCCEx_PLLSAI1_Config+0x62>
 8002840:	2b02      	cmp	r3, #2
 8002842:	d009      	beq.n	8002858 <RCCEx_PLLSAI1_Config+0x74>
 8002844:	e020      	b.n	8002888 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002846:	4b60      	ldr	r3, [pc, #384]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d11d      	bne.n	800288e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002856:	e01a      	b.n	800288e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002858:	4b5b      	ldr	r3, [pc, #364]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d116      	bne.n	8002892 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002868:	e013      	b.n	8002892 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800286a:	4b57      	ldr	r3, [pc, #348]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10f      	bne.n	8002896 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002876:	4b54      	ldr	r3, [pc, #336]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d109      	bne.n	8002896 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002886:	e006      	b.n	8002896 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	e004      	b.n	8002898 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800288e:	bf00      	nop
 8002890:	e002      	b.n	8002898 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002892:	bf00      	nop
 8002894:	e000      	b.n	8002898 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002896:	bf00      	nop
    }

    if(status == HAL_OK)
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10d      	bne.n	80028ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800289e:	4b4a      	ldr	r3, [pc, #296]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	430b      	orrs	r3, r1
 80028b4:	4944      	ldr	r1, [pc, #272]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d17d      	bne.n	80029bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028c0:	4b41      	ldr	r3, [pc, #260]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a40      	ldr	r2, [pc, #256]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028cc:	f7fe f8f2 	bl	8000ab4 <HAL_GetTick>
 80028d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028d2:	e009      	b.n	80028e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028d4:	f7fe f8ee 	bl	8000ab4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d902      	bls.n	80028e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	73fb      	strb	r3, [r7, #15]
        break;
 80028e6:	e005      	b.n	80028f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028e8:	4b37      	ldr	r3, [pc, #220]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d1ef      	bne.n	80028d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d160      	bne.n	80029bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d111      	bne.n	8002924 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002900:	4b31      	ldr	r3, [pc, #196]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6892      	ldr	r2, [r2, #8]
 8002910:	0211      	lsls	r1, r2, #8
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68d2      	ldr	r2, [r2, #12]
 8002916:	0912      	lsrs	r2, r2, #4
 8002918:	0452      	lsls	r2, r2, #17
 800291a:	430a      	orrs	r2, r1
 800291c:	492a      	ldr	r1, [pc, #168]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291e:	4313      	orrs	r3, r2
 8002920:	610b      	str	r3, [r1, #16]
 8002922:	e027      	b.n	8002974 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d112      	bne.n	8002950 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800292a:	4b27      	ldr	r3, [pc, #156]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002932:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6892      	ldr	r2, [r2, #8]
 800293a:	0211      	lsls	r1, r2, #8
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6912      	ldr	r2, [r2, #16]
 8002940:	0852      	lsrs	r2, r2, #1
 8002942:	3a01      	subs	r2, #1
 8002944:	0552      	lsls	r2, r2, #21
 8002946:	430a      	orrs	r2, r1
 8002948:	491f      	ldr	r1, [pc, #124]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294a:	4313      	orrs	r3, r2
 800294c:	610b      	str	r3, [r1, #16]
 800294e:	e011      	b.n	8002974 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002950:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002958:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6892      	ldr	r2, [r2, #8]
 8002960:	0211      	lsls	r1, r2, #8
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	6952      	ldr	r2, [r2, #20]
 8002966:	0852      	lsrs	r2, r2, #1
 8002968:	3a01      	subs	r2, #1
 800296a:	0652      	lsls	r2, r2, #25
 800296c:	430a      	orrs	r2, r1
 800296e:	4916      	ldr	r1, [pc, #88]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a13      	ldr	r2, [pc, #76]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800297e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002980:	f7fe f898 	bl	8000ab4 <HAL_GetTick>
 8002984:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002986:	e009      	b.n	800299c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002988:	f7fe f894 	bl	8000ab4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d902      	bls.n	800299c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	73fb      	strb	r3, [r7, #15]
          break;
 800299a:	e005      	b.n	80029a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0ef      	beq.n	8002988 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b0:	691a      	ldr	r2, [r3, #16]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	4904      	ldr	r1, [pc, #16]	; (80029c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000

080029cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029da:	4b6a      	ldr	r3, [pc, #424]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d018      	beq.n	8002a18 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029e6:	4b67      	ldr	r3, [pc, #412]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f003 0203 	and.w	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d10d      	bne.n	8002a12 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
       ||
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029fe:	4b61      	ldr	r3, [pc, #388]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d047      	beq.n	8002aa2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	e044      	b.n	8002aa2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d018      	beq.n	8002a52 <RCCEx_PLLSAI2_Config+0x86>
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d825      	bhi.n	8002a70 <RCCEx_PLLSAI2_Config+0xa4>
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d002      	beq.n	8002a2e <RCCEx_PLLSAI2_Config+0x62>
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d009      	beq.n	8002a40 <RCCEx_PLLSAI2_Config+0x74>
 8002a2c:	e020      	b.n	8002a70 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a2e:	4b55      	ldr	r3, [pc, #340]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d11d      	bne.n	8002a76 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a3e:	e01a      	b.n	8002a76 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a40:	4b50      	ldr	r3, [pc, #320]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d116      	bne.n	8002a7a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a50:	e013      	b.n	8002a7a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a52:	4b4c      	ldr	r3, [pc, #304]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d10f      	bne.n	8002a7e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a5e:	4b49      	ldr	r3, [pc, #292]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d109      	bne.n	8002a7e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a6e:	e006      	b.n	8002a7e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      break;
 8002a74:	e004      	b.n	8002a80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a76:	bf00      	nop
 8002a78:	e002      	b.n	8002a80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e000      	b.n	8002a80 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d10d      	bne.n	8002aa2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a86:	4b3f      	ldr	r3, [pc, #252]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6819      	ldr	r1, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	4939      	ldr	r1, [pc, #228]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d167      	bne.n	8002b78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002aa8:	4b36      	ldr	r3, [pc, #216]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a35      	ldr	r2, [pc, #212]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab4:	f7fd fffe 	bl	8000ab4 <HAL_GetTick>
 8002ab8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aba:	e009      	b.n	8002ad0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002abc:	f7fd fffa 	bl	8000ab4 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d902      	bls.n	8002ad0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	73fb      	strb	r3, [r7, #15]
        break;
 8002ace:	e005      	b.n	8002adc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ad0:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ef      	bne.n	8002abc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d14a      	bne.n	8002b78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d111      	bne.n	8002b0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ae8:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002af0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6892      	ldr	r2, [r2, #8]
 8002af8:	0211      	lsls	r1, r2, #8
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	68d2      	ldr	r2, [r2, #12]
 8002afe:	0912      	lsrs	r2, r2, #4
 8002b00:	0452      	lsls	r2, r2, #17
 8002b02:	430a      	orrs	r2, r1
 8002b04:	491f      	ldr	r1, [pc, #124]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	614b      	str	r3, [r1, #20]
 8002b0a:	e011      	b.n	8002b30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b0c:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6892      	ldr	r2, [r2, #8]
 8002b1c:	0211      	lsls	r1, r2, #8
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6912      	ldr	r2, [r2, #16]
 8002b22:	0852      	lsrs	r2, r2, #1
 8002b24:	3a01      	subs	r2, #1
 8002b26:	0652      	lsls	r2, r2, #25
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	4916      	ldr	r1, [pc, #88]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b30:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3c:	f7fd ffba 	bl	8000ab4 <HAL_GetTick>
 8002b40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b42:	e009      	b.n	8002b58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b44:	f7fd ffb6 	bl	8000ab4 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d902      	bls.n	8002b58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	73fb      	strb	r3, [r7, #15]
          break;
 8002b56:	e005      	b.n	8002b64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0ef      	beq.n	8002b44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b64:	7bfb      	ldrb	r3, [r7, #15]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	4904      	ldr	r1, [pc, #16]	; (8002b84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000

08002b88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e040      	b.n	8002c1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d106      	bne.n	8002bb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f7fd fe84 	bl	80008b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2224      	movs	r2, #36	; 0x24
 8002bb4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0201 	bic.w	r2, r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fb2e 	bl	8003228 <UART_SetConfig>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e022      	b.n	8002c1c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d002      	beq.n	8002be4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 fdac 	bl	800373c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f042 0201 	orr.w	r2, r2, #1
 8002c12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fe33 	bl	8003880 <UART_CheckIdleState>
 8002c1a:	4603      	mov	r3, r0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b0ba      	sub	sp, #232	; 0xe8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c52:	4013      	ands	r3, r2
 8002c54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d115      	bne.n	8002c8c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00f      	beq.n	8002c8c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c70:	f003 0320 	and.w	r3, r3, #32
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d009      	beq.n	8002c8c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 82a6 	beq.w	80031ce <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
      }
      return;
 8002c8a:	e2a0      	b.n	80031ce <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f000 8117 	beq.w	8002ec4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ca2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002ca6:	4b85      	ldr	r3, [pc, #532]	; (8002ebc <HAL_UART_IRQHandler+0x298>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	f000 810a 	beq.w	8002ec4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002cb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d011      	beq.n	8002ce0 <HAL_UART_IRQHandler+0xbc>
 8002cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00b      	beq.n	8002ce0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d011      	beq.n	8002d10 <HAL_UART_IRQHandler+0xec>
 8002cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00b      	beq.n	8002d10 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d06:	f043 0204 	orr.w	r2, r3, #4
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d011      	beq.n	8002d40 <HAL_UART_IRQHandler+0x11c>
 8002d1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00b      	beq.n	8002d40 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d36:	f043 0202 	orr.w	r2, r3, #2
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d017      	beq.n	8002d7c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d105      	bne.n	8002d64 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00b      	beq.n	8002d7c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2208      	movs	r2, #8
 8002d6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d72:	f043 0208 	orr.w	r2, r3, #8
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d012      	beq.n	8002dae <HAL_UART_IRQHandler+0x18a>
 8002d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00c      	beq.n	8002dae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002da4:	f043 0220 	orr.w	r2, r3, #32
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 820c 	beq.w	80031d2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00d      	beq.n	8002de2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d007      	beq.n	8002de2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002de8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df6:	2b40      	cmp	r3, #64	; 0x40
 8002df8:	d005      	beq.n	8002e06 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dfe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d04f      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fe47 	bl	8003a9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e16:	2b40      	cmp	r3, #64	; 0x40
 8002e18:	d141      	bne.n	8002e9e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	3308      	adds	r3, #8
 8002e20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e28:	e853 3f00 	ldrex	r3, [r3]
 8002e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	3308      	adds	r3, #8
 8002e42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e56:	e841 2300 	strex	r3, r2, [r1]
 8002e5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1d9      	bne.n	8002e1a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d013      	beq.n	8002e96 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e72:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <HAL_UART_IRQHandler+0x29c>)
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fd ff75 	bl	8000d6a <HAL_DMA_Abort_IT>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d017      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002e90:	4610      	mov	r0, r2
 8002e92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e94:	e00f      	b.n	8002eb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f000 f9b0 	bl	80031fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e9c:	e00b      	b.n	8002eb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 f9ac 	bl	80031fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	e007      	b.n	8002eb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f9a8 	bl	80031fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002eb4:	e18d      	b.n	80031d2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb6:	bf00      	nop
    return;
 8002eb8:	e18b      	b.n	80031d2 <HAL_UART_IRQHandler+0x5ae>
 8002eba:	bf00      	nop
 8002ebc:	04000120 	.word	0x04000120
 8002ec0:	08003b61 	.word	0x08003b61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	f040 8146 	bne.w	800315a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	f000 813f 	beq.w	800315a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8138 	beq.w	800315a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2210      	movs	r2, #16
 8002ef0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efc:	2b40      	cmp	r3, #64	; 0x40
 8002efe:	f040 80b4 	bne.w	800306a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002f0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 815f 	beq.w	80031d6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002f1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f22:	429a      	cmp	r2, r3
 8002f24:	f080 8157 	bcs.w	80031d6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002f2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0320 	and.w	r3, r3, #32
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	f040 8085 	bne.w	800304e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f50:	e853 3f00 	ldrex	r3, [r3]
 8002f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f7e:	e841 2300 	strex	r3, r2, [r1]
 8002f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1da      	bne.n	8002f44 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3308      	adds	r3, #8
 8002f94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f98:	e853 3f00 	ldrex	r3, [r3]
 8002f9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fa0:	f023 0301 	bic.w	r3, r3, #1
 8002fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3308      	adds	r3, #8
 8002fae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002fb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002fba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e1      	bne.n	8002f8e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3308      	adds	r3, #8
 8002fd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	3308      	adds	r3, #8
 8002fea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ff0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ff4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002ff6:	e841 2300 	strex	r3, r2, [r1]
 8002ffa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002ffc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1e3      	bne.n	8002fca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2220      	movs	r2, #32
 8003006:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800301c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800301e:	f023 0310 	bic.w	r3, r3, #16
 8003022:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003030:	65bb      	str	r3, [r7, #88]	; 0x58
 8003032:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003034:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003036:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003038:	e841 2300 	strex	r3, r2, [r1]
 800303c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800303e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003040:	2b00      	cmp	r3, #0
 8003042:	d1e4      	bne.n	800300e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd fe50 	bl	8000cee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800305a:	b29b      	uxth	r3, r3
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	b29b      	uxth	r3, r3
 8003060:	4619      	mov	r1, r3
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8d4 	bl	8003210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003068:	e0b5      	b.n	80031d6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003076:	b29b      	uxth	r3, r3
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 80a7 	beq.w	80031da <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800308c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80a2 	beq.w	80031da <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800309e:	e853 3f00 	ldrex	r3, [r3]
 80030a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030b8:	647b      	str	r3, [r7, #68]	; 0x44
 80030ba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030c0:	e841 2300 	strex	r3, r2, [r1]
 80030c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d1e4      	bne.n	8003096 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3308      	adds	r3, #8
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	e853 3f00 	ldrex	r3, [r3]
 80030da:	623b      	str	r3, [r7, #32]
   return(result);
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	f023 0301 	bic.w	r3, r3, #1
 80030e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3308      	adds	r3, #8
 80030ec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030f0:	633a      	str	r2, [r7, #48]	; 0x30
 80030f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030f8:	e841 2300 	strex	r3, r2, [r1]
 80030fc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1e3      	bne.n	80030cc <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2220      	movs	r2, #32
 8003108:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	e853 3f00 	ldrex	r3, [r3]
 8003122:	60fb      	str	r3, [r7, #12]
   return(result);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f023 0310 	bic.w	r3, r3, #16
 800312a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003138:	61fb      	str	r3, [r7, #28]
 800313a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800313c:	69b9      	ldr	r1, [r7, #24]
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	e841 2300 	strex	r3, r2, [r1]
 8003144:	617b      	str	r3, [r7, #20]
   return(result);
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d1e4      	bne.n	8003116 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800314c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003150:	4619      	mov	r1, r3
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f85c 	bl	8003210 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003158:	e03f      	b.n	80031da <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800315a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00e      	beq.n	8003184 <HAL_UART_IRQHandler+0x560>
 8003166:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800316a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800317a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 fd2f 	bl	8003be0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003182:	e02d      	b.n	80031e0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00e      	beq.n	80031ae <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003198:	2b00      	cmp	r3, #0
 800319a:	d008      	beq.n	80031ae <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01c      	beq.n	80031de <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
    }
    return;
 80031ac:	e017      	b.n	80031de <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d012      	beq.n	80031e0 <HAL_UART_IRQHandler+0x5bc>
 80031ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fce0 	bl	8003b8c <UART_EndTransmit_IT>
    return;
 80031cc:	e008      	b.n	80031e0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80031ce:	bf00      	nop
 80031d0:	e006      	b.n	80031e0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80031d2:	bf00      	nop
 80031d4:	e004      	b.n	80031e0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80031d6:	bf00      	nop
 80031d8:	e002      	b.n	80031e0 <HAL_UART_IRQHandler+0x5bc>
      return;
 80031da:	bf00      	nop
 80031dc:	e000      	b.n	80031e0 <HAL_UART_IRQHandler+0x5bc>
    return;
 80031de:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80031e0:	37e8      	adds	r7, #232	; 0xe8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop

080031e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003228:	b5b0      	push	{r4, r5, r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	4313      	orrs	r3, r2
 800324a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4bad      	ldr	r3, [pc, #692]	; (8003508 <UART_SetConfig+0x2e0>)
 8003254:	4013      	ands	r3, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6812      	ldr	r2, [r2, #0]
 800325a:	69f9      	ldr	r1, [r7, #28]
 800325c:	430b      	orrs	r3, r1
 800325e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4aa2      	ldr	r2, [pc, #648]	; (800350c <UART_SetConfig+0x2e4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d004      	beq.n	8003290 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	4313      	orrs	r3, r2
 800328e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a99      	ldr	r2, [pc, #612]	; (8003510 <UART_SetConfig+0x2e8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d121      	bne.n	80032f2 <UART_SetConfig+0xca>
 80032ae:	4b99      	ldr	r3, [pc, #612]	; (8003514 <UART_SetConfig+0x2ec>)
 80032b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b4:	f003 0303 	and.w	r3, r3, #3
 80032b8:	2b03      	cmp	r3, #3
 80032ba:	d817      	bhi.n	80032ec <UART_SetConfig+0xc4>
 80032bc:	a201      	add	r2, pc, #4	; (adr r2, 80032c4 <UART_SetConfig+0x9c>)
 80032be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c2:	bf00      	nop
 80032c4:	080032d5 	.word	0x080032d5
 80032c8:	080032e1 	.word	0x080032e1
 80032cc:	080032db 	.word	0x080032db
 80032d0:	080032e7 	.word	0x080032e7
 80032d4:	2301      	movs	r3, #1
 80032d6:	76fb      	strb	r3, [r7, #27]
 80032d8:	e0e7      	b.n	80034aa <UART_SetConfig+0x282>
 80032da:	2302      	movs	r3, #2
 80032dc:	76fb      	strb	r3, [r7, #27]
 80032de:	e0e4      	b.n	80034aa <UART_SetConfig+0x282>
 80032e0:	2304      	movs	r3, #4
 80032e2:	76fb      	strb	r3, [r7, #27]
 80032e4:	e0e1      	b.n	80034aa <UART_SetConfig+0x282>
 80032e6:	2308      	movs	r3, #8
 80032e8:	76fb      	strb	r3, [r7, #27]
 80032ea:	e0de      	b.n	80034aa <UART_SetConfig+0x282>
 80032ec:	2310      	movs	r3, #16
 80032ee:	76fb      	strb	r3, [r7, #27]
 80032f0:	e0db      	b.n	80034aa <UART_SetConfig+0x282>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a88      	ldr	r2, [pc, #544]	; (8003518 <UART_SetConfig+0x2f0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d132      	bne.n	8003362 <UART_SetConfig+0x13a>
 80032fc:	4b85      	ldr	r3, [pc, #532]	; (8003514 <UART_SetConfig+0x2ec>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	2b0c      	cmp	r3, #12
 8003308:	d828      	bhi.n	800335c <UART_SetConfig+0x134>
 800330a:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <UART_SetConfig+0xe8>)
 800330c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003310:	08003345 	.word	0x08003345
 8003314:	0800335d 	.word	0x0800335d
 8003318:	0800335d 	.word	0x0800335d
 800331c:	0800335d 	.word	0x0800335d
 8003320:	08003351 	.word	0x08003351
 8003324:	0800335d 	.word	0x0800335d
 8003328:	0800335d 	.word	0x0800335d
 800332c:	0800335d 	.word	0x0800335d
 8003330:	0800334b 	.word	0x0800334b
 8003334:	0800335d 	.word	0x0800335d
 8003338:	0800335d 	.word	0x0800335d
 800333c:	0800335d 	.word	0x0800335d
 8003340:	08003357 	.word	0x08003357
 8003344:	2300      	movs	r3, #0
 8003346:	76fb      	strb	r3, [r7, #27]
 8003348:	e0af      	b.n	80034aa <UART_SetConfig+0x282>
 800334a:	2302      	movs	r3, #2
 800334c:	76fb      	strb	r3, [r7, #27]
 800334e:	e0ac      	b.n	80034aa <UART_SetConfig+0x282>
 8003350:	2304      	movs	r3, #4
 8003352:	76fb      	strb	r3, [r7, #27]
 8003354:	e0a9      	b.n	80034aa <UART_SetConfig+0x282>
 8003356:	2308      	movs	r3, #8
 8003358:	76fb      	strb	r3, [r7, #27]
 800335a:	e0a6      	b.n	80034aa <UART_SetConfig+0x282>
 800335c:	2310      	movs	r3, #16
 800335e:	76fb      	strb	r3, [r7, #27]
 8003360:	e0a3      	b.n	80034aa <UART_SetConfig+0x282>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6d      	ldr	r2, [pc, #436]	; (800351c <UART_SetConfig+0x2f4>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d120      	bne.n	80033ae <UART_SetConfig+0x186>
 800336c:	4b69      	ldr	r3, [pc, #420]	; (8003514 <UART_SetConfig+0x2ec>)
 800336e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003372:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003376:	2b30      	cmp	r3, #48	; 0x30
 8003378:	d013      	beq.n	80033a2 <UART_SetConfig+0x17a>
 800337a:	2b30      	cmp	r3, #48	; 0x30
 800337c:	d814      	bhi.n	80033a8 <UART_SetConfig+0x180>
 800337e:	2b20      	cmp	r3, #32
 8003380:	d009      	beq.n	8003396 <UART_SetConfig+0x16e>
 8003382:	2b20      	cmp	r3, #32
 8003384:	d810      	bhi.n	80033a8 <UART_SetConfig+0x180>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <UART_SetConfig+0x168>
 800338a:	2b10      	cmp	r3, #16
 800338c:	d006      	beq.n	800339c <UART_SetConfig+0x174>
 800338e:	e00b      	b.n	80033a8 <UART_SetConfig+0x180>
 8003390:	2300      	movs	r3, #0
 8003392:	76fb      	strb	r3, [r7, #27]
 8003394:	e089      	b.n	80034aa <UART_SetConfig+0x282>
 8003396:	2302      	movs	r3, #2
 8003398:	76fb      	strb	r3, [r7, #27]
 800339a:	e086      	b.n	80034aa <UART_SetConfig+0x282>
 800339c:	2304      	movs	r3, #4
 800339e:	76fb      	strb	r3, [r7, #27]
 80033a0:	e083      	b.n	80034aa <UART_SetConfig+0x282>
 80033a2:	2308      	movs	r3, #8
 80033a4:	76fb      	strb	r3, [r7, #27]
 80033a6:	e080      	b.n	80034aa <UART_SetConfig+0x282>
 80033a8:	2310      	movs	r3, #16
 80033aa:	76fb      	strb	r3, [r7, #27]
 80033ac:	e07d      	b.n	80034aa <UART_SetConfig+0x282>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a5b      	ldr	r2, [pc, #364]	; (8003520 <UART_SetConfig+0x2f8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d120      	bne.n	80033fa <UART_SetConfig+0x1d2>
 80033b8:	4b56      	ldr	r3, [pc, #344]	; (8003514 <UART_SetConfig+0x2ec>)
 80033ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80033c2:	2bc0      	cmp	r3, #192	; 0xc0
 80033c4:	d013      	beq.n	80033ee <UART_SetConfig+0x1c6>
 80033c6:	2bc0      	cmp	r3, #192	; 0xc0
 80033c8:	d814      	bhi.n	80033f4 <UART_SetConfig+0x1cc>
 80033ca:	2b80      	cmp	r3, #128	; 0x80
 80033cc:	d009      	beq.n	80033e2 <UART_SetConfig+0x1ba>
 80033ce:	2b80      	cmp	r3, #128	; 0x80
 80033d0:	d810      	bhi.n	80033f4 <UART_SetConfig+0x1cc>
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d002      	beq.n	80033dc <UART_SetConfig+0x1b4>
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	d006      	beq.n	80033e8 <UART_SetConfig+0x1c0>
 80033da:	e00b      	b.n	80033f4 <UART_SetConfig+0x1cc>
 80033dc:	2300      	movs	r3, #0
 80033de:	76fb      	strb	r3, [r7, #27]
 80033e0:	e063      	b.n	80034aa <UART_SetConfig+0x282>
 80033e2:	2302      	movs	r3, #2
 80033e4:	76fb      	strb	r3, [r7, #27]
 80033e6:	e060      	b.n	80034aa <UART_SetConfig+0x282>
 80033e8:	2304      	movs	r3, #4
 80033ea:	76fb      	strb	r3, [r7, #27]
 80033ec:	e05d      	b.n	80034aa <UART_SetConfig+0x282>
 80033ee:	2308      	movs	r3, #8
 80033f0:	76fb      	strb	r3, [r7, #27]
 80033f2:	e05a      	b.n	80034aa <UART_SetConfig+0x282>
 80033f4:	2310      	movs	r3, #16
 80033f6:	76fb      	strb	r3, [r7, #27]
 80033f8:	e057      	b.n	80034aa <UART_SetConfig+0x282>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a49      	ldr	r2, [pc, #292]	; (8003524 <UART_SetConfig+0x2fc>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d125      	bne.n	8003450 <UART_SetConfig+0x228>
 8003404:	4b43      	ldr	r3, [pc, #268]	; (8003514 <UART_SetConfig+0x2ec>)
 8003406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800340e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003412:	d017      	beq.n	8003444 <UART_SetConfig+0x21c>
 8003414:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003418:	d817      	bhi.n	800344a <UART_SetConfig+0x222>
 800341a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800341e:	d00b      	beq.n	8003438 <UART_SetConfig+0x210>
 8003420:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003424:	d811      	bhi.n	800344a <UART_SetConfig+0x222>
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <UART_SetConfig+0x20a>
 800342a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800342e:	d006      	beq.n	800343e <UART_SetConfig+0x216>
 8003430:	e00b      	b.n	800344a <UART_SetConfig+0x222>
 8003432:	2300      	movs	r3, #0
 8003434:	76fb      	strb	r3, [r7, #27]
 8003436:	e038      	b.n	80034aa <UART_SetConfig+0x282>
 8003438:	2302      	movs	r3, #2
 800343a:	76fb      	strb	r3, [r7, #27]
 800343c:	e035      	b.n	80034aa <UART_SetConfig+0x282>
 800343e:	2304      	movs	r3, #4
 8003440:	76fb      	strb	r3, [r7, #27]
 8003442:	e032      	b.n	80034aa <UART_SetConfig+0x282>
 8003444:	2308      	movs	r3, #8
 8003446:	76fb      	strb	r3, [r7, #27]
 8003448:	e02f      	b.n	80034aa <UART_SetConfig+0x282>
 800344a:	2310      	movs	r3, #16
 800344c:	76fb      	strb	r3, [r7, #27]
 800344e:	e02c      	b.n	80034aa <UART_SetConfig+0x282>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a2d      	ldr	r2, [pc, #180]	; (800350c <UART_SetConfig+0x2e4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d125      	bne.n	80034a6 <UART_SetConfig+0x27e>
 800345a:	4b2e      	ldr	r3, [pc, #184]	; (8003514 <UART_SetConfig+0x2ec>)
 800345c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003460:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003464:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003468:	d017      	beq.n	800349a <UART_SetConfig+0x272>
 800346a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800346e:	d817      	bhi.n	80034a0 <UART_SetConfig+0x278>
 8003470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003474:	d00b      	beq.n	800348e <UART_SetConfig+0x266>
 8003476:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800347a:	d811      	bhi.n	80034a0 <UART_SetConfig+0x278>
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <UART_SetConfig+0x260>
 8003480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003484:	d006      	beq.n	8003494 <UART_SetConfig+0x26c>
 8003486:	e00b      	b.n	80034a0 <UART_SetConfig+0x278>
 8003488:	2300      	movs	r3, #0
 800348a:	76fb      	strb	r3, [r7, #27]
 800348c:	e00d      	b.n	80034aa <UART_SetConfig+0x282>
 800348e:	2302      	movs	r3, #2
 8003490:	76fb      	strb	r3, [r7, #27]
 8003492:	e00a      	b.n	80034aa <UART_SetConfig+0x282>
 8003494:	2304      	movs	r3, #4
 8003496:	76fb      	strb	r3, [r7, #27]
 8003498:	e007      	b.n	80034aa <UART_SetConfig+0x282>
 800349a:	2308      	movs	r3, #8
 800349c:	76fb      	strb	r3, [r7, #27]
 800349e:	e004      	b.n	80034aa <UART_SetConfig+0x282>
 80034a0:	2310      	movs	r3, #16
 80034a2:	76fb      	strb	r3, [r7, #27]
 80034a4:	e001      	b.n	80034aa <UART_SetConfig+0x282>
 80034a6:	2310      	movs	r3, #16
 80034a8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a17      	ldr	r2, [pc, #92]	; (800350c <UART_SetConfig+0x2e4>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	f040 8087 	bne.w	80035c4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80034b6:	7efb      	ldrb	r3, [r7, #27]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d837      	bhi.n	800352c <UART_SetConfig+0x304>
 80034bc:	a201      	add	r2, pc, #4	; (adr r2, 80034c4 <UART_SetConfig+0x29c>)
 80034be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c2:	bf00      	nop
 80034c4:	080034e9 	.word	0x080034e9
 80034c8:	0800352d 	.word	0x0800352d
 80034cc:	080034f1 	.word	0x080034f1
 80034d0:	0800352d 	.word	0x0800352d
 80034d4:	080034f7 	.word	0x080034f7
 80034d8:	0800352d 	.word	0x0800352d
 80034dc:	0800352d 	.word	0x0800352d
 80034e0:	0800352d 	.word	0x0800352d
 80034e4:	080034ff 	.word	0x080034ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034e8:	f7fe fe06 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 80034ec:	6178      	str	r0, [r7, #20]
        break;
 80034ee:	e022      	b.n	8003536 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f0:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <UART_SetConfig+0x300>)
 80034f2:	617b      	str	r3, [r7, #20]
        break;
 80034f4:	e01f      	b.n	8003536 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034f6:	f7fe fd67 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 80034fa:	6178      	str	r0, [r7, #20]
        break;
 80034fc:	e01b      	b.n	8003536 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003502:	617b      	str	r3, [r7, #20]
        break;
 8003504:	e017      	b.n	8003536 <UART_SetConfig+0x30e>
 8003506:	bf00      	nop
 8003508:	efff69f3 	.word	0xefff69f3
 800350c:	40008000 	.word	0x40008000
 8003510:	40013800 	.word	0x40013800
 8003514:	40021000 	.word	0x40021000
 8003518:	40004400 	.word	0x40004400
 800351c:	40004800 	.word	0x40004800
 8003520:	40004c00 	.word	0x40004c00
 8003524:	40005000 	.word	0x40005000
 8003528:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	76bb      	strb	r3, [r7, #26]
        break;
 8003534:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 80f1 	beq.w	8003720 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	4413      	add	r3, r2
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	429a      	cmp	r2, r3
 800354c:	d305      	bcc.n	800355a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	429a      	cmp	r2, r3
 8003558:	d902      	bls.n	8003560 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	76bb      	strb	r3, [r7, #26]
 800355e:	e0df      	b.n	8003720 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	4618      	mov	r0, r3
 8003564:	f04f 0100 	mov.w	r1, #0
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	020b      	lsls	r3, r1, #8
 8003572:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003576:	0202      	lsls	r2, r0, #8
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	6849      	ldr	r1, [r1, #4]
 800357c:	0849      	lsrs	r1, r1, #1
 800357e:	4608      	mov	r0, r1
 8003580:	f04f 0100 	mov.w	r1, #0
 8003584:	1814      	adds	r4, r2, r0
 8003586:	eb43 0501 	adc.w	r5, r3, r1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	461a      	mov	r2, r3
 8003590:	f04f 0300 	mov.w	r3, #0
 8003594:	4620      	mov	r0, r4
 8003596:	4629      	mov	r1, r5
 8003598:	f7fc fe16 	bl	80001c8 <__aeabi_uldivmod>
 800359c:	4602      	mov	r2, r0
 800359e:	460b      	mov	r3, r1
 80035a0:	4613      	mov	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035aa:	d308      	bcc.n	80035be <UART_SetConfig+0x396>
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035b2:	d204      	bcs.n	80035be <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	693a      	ldr	r2, [r7, #16]
 80035ba:	60da      	str	r2, [r3, #12]
 80035bc:	e0b0      	b.n	8003720 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	76bb      	strb	r3, [r7, #26]
 80035c2:	e0ad      	b.n	8003720 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035cc:	d15b      	bne.n	8003686 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80035ce:	7efb      	ldrb	r3, [r7, #27]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d828      	bhi.n	8003626 <UART_SetConfig+0x3fe>
 80035d4:	a201      	add	r2, pc, #4	; (adr r2, 80035dc <UART_SetConfig+0x3b4>)
 80035d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035da:	bf00      	nop
 80035dc:	08003601 	.word	0x08003601
 80035e0:	08003609 	.word	0x08003609
 80035e4:	08003611 	.word	0x08003611
 80035e8:	08003627 	.word	0x08003627
 80035ec:	08003617 	.word	0x08003617
 80035f0:	08003627 	.word	0x08003627
 80035f4:	08003627 	.word	0x08003627
 80035f8:	08003627 	.word	0x08003627
 80035fc:	0800361f 	.word	0x0800361f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003600:	f7fe fd7a 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 8003604:	6178      	str	r0, [r7, #20]
        break;
 8003606:	e013      	b.n	8003630 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003608:	f7fe fd8c 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 800360c:	6178      	str	r0, [r7, #20]
        break;
 800360e:	e00f      	b.n	8003630 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003610:	4b49      	ldr	r3, [pc, #292]	; (8003738 <UART_SetConfig+0x510>)
 8003612:	617b      	str	r3, [r7, #20]
        break;
 8003614:	e00c      	b.n	8003630 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003616:	f7fe fcd7 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 800361a:	6178      	str	r0, [r7, #20]
        break;
 800361c:	e008      	b.n	8003630 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800361e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003622:	617b      	str	r3, [r7, #20]
        break;
 8003624:	e004      	b.n	8003630 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	76bb      	strb	r3, [r7, #26]
        break;
 800362e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d074      	beq.n	8003720 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	005a      	lsls	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	085b      	lsrs	r3, r3, #1
 8003640:	441a      	add	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	2b0f      	cmp	r3, #15
 8003650:	d916      	bls.n	8003680 <UART_SetConfig+0x458>
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003658:	d212      	bcs.n	8003680 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	b29b      	uxth	r3, r3
 800365e:	f023 030f 	bic.w	r3, r3, #15
 8003662:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	085b      	lsrs	r3, r3, #1
 8003668:	b29b      	uxth	r3, r3
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	b29a      	uxth	r2, r3
 8003670:	89fb      	ldrh	r3, [r7, #14]
 8003672:	4313      	orrs	r3, r2
 8003674:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	89fa      	ldrh	r2, [r7, #14]
 800367c:	60da      	str	r2, [r3, #12]
 800367e:	e04f      	b.n	8003720 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	76bb      	strb	r3, [r7, #26]
 8003684:	e04c      	b.n	8003720 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003686:	7efb      	ldrb	r3, [r7, #27]
 8003688:	2b08      	cmp	r3, #8
 800368a:	d828      	bhi.n	80036de <UART_SetConfig+0x4b6>
 800368c:	a201      	add	r2, pc, #4	; (adr r2, 8003694 <UART_SetConfig+0x46c>)
 800368e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003692:	bf00      	nop
 8003694:	080036b9 	.word	0x080036b9
 8003698:	080036c1 	.word	0x080036c1
 800369c:	080036c9 	.word	0x080036c9
 80036a0:	080036df 	.word	0x080036df
 80036a4:	080036cf 	.word	0x080036cf
 80036a8:	080036df 	.word	0x080036df
 80036ac:	080036df 	.word	0x080036df
 80036b0:	080036df 	.word	0x080036df
 80036b4:	080036d7 	.word	0x080036d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036b8:	f7fe fd1e 	bl	80020f8 <HAL_RCC_GetPCLK1Freq>
 80036bc:	6178      	str	r0, [r7, #20]
        break;
 80036be:	e013      	b.n	80036e8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036c0:	f7fe fd30 	bl	8002124 <HAL_RCC_GetPCLK2Freq>
 80036c4:	6178      	str	r0, [r7, #20]
        break;
 80036c6:	e00f      	b.n	80036e8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <UART_SetConfig+0x510>)
 80036ca:	617b      	str	r3, [r7, #20]
        break;
 80036cc:	e00c      	b.n	80036e8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036ce:	f7fe fc7b 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 80036d2:	6178      	str	r0, [r7, #20]
        break;
 80036d4:	e008      	b.n	80036e8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036da:	617b      	str	r3, [r7, #20]
        break;
 80036dc:	e004      	b.n	80036e8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	76bb      	strb	r3, [r7, #26]
        break;
 80036e6:	bf00      	nop
    }

    if (pclk != 0U)
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d018      	beq.n	8003720 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	085a      	lsrs	r2, r3, #1
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	441a      	add	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	2b0f      	cmp	r3, #15
 8003706:	d909      	bls.n	800371c <UART_SetConfig+0x4f4>
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370e:	d205      	bcs.n	800371c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	b29a      	uxth	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	60da      	str	r2, [r3, #12]
 800371a:	e001      	b.n	8003720 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800372c:	7ebb      	ldrb	r3, [r7, #26]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3720      	adds	r7, #32
 8003732:	46bd      	mov	sp, r7
 8003734:	bdb0      	pop	{r4, r5, r7, pc}
 8003736:	bf00      	nop
 8003738:	00f42400 	.word	0x00f42400

0800373c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	f003 0301 	and.w	r3, r3, #1
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f2:	f003 0320 	and.w	r3, r3, #32
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003818:	2b00      	cmp	r3, #0
 800381a:	d01a      	beq.n	8003852 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800383a:	d10a      	bne.n	8003852 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	605a      	str	r2, [r3, #4]
  }
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af02      	add	r7, sp, #8
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003890:	f7fd f910 	bl	8000ab4 <HAL_GetTick>
 8003894:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0308 	and.w	r3, r3, #8
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d10e      	bne.n	80038c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f82d 	bl	8003912 <UART_WaitOnFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e023      	b.n	800390a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b04      	cmp	r3, #4
 80038ce:	d10e      	bne.n	80038ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f817 	bl	8003912 <UART_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e00d      	b.n	800390a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b09c      	sub	sp, #112	; 0x70
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	603b      	str	r3, [r7, #0]
 800391e:	4613      	mov	r3, r2
 8003920:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003922:	e0a5      	b.n	8003a70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003924:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392a:	f000 80a1 	beq.w	8003a70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800392e:	f7fd f8c1 	bl	8000ab4 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800393a:	429a      	cmp	r2, r3
 800393c:	d302      	bcc.n	8003944 <UART_WaitOnFlagUntilTimeout+0x32>
 800393e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003940:	2b00      	cmp	r3, #0
 8003942:	d13e      	bne.n	80039c2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800394c:	e853 3f00 	ldrex	r3, [r3]
 8003950:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003954:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003958:	667b      	str	r3, [r7, #100]	; 0x64
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003962:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003964:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003966:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003968:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800396a:	e841 2300 	strex	r3, r2, [r1]
 800396e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1e6      	bne.n	8003944 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3308      	adds	r3, #8
 800397c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003980:	e853 3f00 	ldrex	r3, [r3]
 8003984:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	663b      	str	r3, [r7, #96]	; 0x60
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3308      	adds	r3, #8
 8003994:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003996:	64ba      	str	r2, [r7, #72]	; 0x48
 8003998:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800399a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800399c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800399e:	e841 2300 	strex	r3, r2, [r1]
 80039a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1e5      	bne.n	8003976 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2220      	movs	r2, #32
 80039ae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e067      	b.n	8003a92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d04f      	beq.n	8003a70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039de:	d147      	bne.n	8003a70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80039e8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a08:	637b      	str	r3, [r7, #52]	; 0x34
 8003a0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e6      	bne.n	80039ea <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3308      	adds	r3, #8
 8003a22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	e853 3f00 	ldrex	r3, [r3]
 8003a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	f023 0301 	bic.w	r3, r3, #1
 8003a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	3308      	adds	r3, #8
 8003a3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a3c:	623a      	str	r2, [r7, #32]
 8003a3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	69f9      	ldr	r1, [r7, #28]
 8003a42:	6a3a      	ldr	r2, [r7, #32]
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e5      	bne.n	8003a1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e010      	b.n	8003a92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	69da      	ldr	r2, [r3, #28]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	bf0c      	ite	eq
 8003a80:	2301      	moveq	r3, #1
 8003a82:	2300      	movne	r3, #0
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	f43f af4a 	beq.w	8003924 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3770      	adds	r7, #112	; 0x70
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b095      	sub	sp, #84	; 0x54
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ac0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ac2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e6      	bne.n	8003aa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3308      	adds	r3, #8
 8003ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	e853 3f00 	ldrex	r3, [r3]
 8003ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f023 0301 	bic.w	r3, r3, #1
 8003aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3308      	adds	r3, #8
 8003af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003af4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e5      	bne.n	8003ad4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d118      	bne.n	8003b42 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	e853 3f00 	ldrex	r3, [r3]
 8003b1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f023 0310 	bic.w	r3, r3, #16
 8003b24:	647b      	str	r3, [r7, #68]	; 0x44
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b2e:	61bb      	str	r3, [r7, #24]
 8003b30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	6979      	ldr	r1, [r7, #20]
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	e841 2300 	strex	r3, r2, [r1]
 8003b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1e6      	bne.n	8003b10 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2220      	movs	r2, #32
 8003b46:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003b54:	bf00      	nop
 8003b56:	3754      	adds	r7, #84	; 0x54
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b084      	sub	sp, #16
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f7ff fb3c 	bl	80031fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	e853 3f00 	ldrex	r3, [r3]
 8003ba0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb6:	6979      	ldr	r1, [r7, #20]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	e841 2300 	strex	r3, r2, [r1]
 8003bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1e6      	bne.n	8003b94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f7ff fb08 	bl	80031e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bd8:	bf00      	nop
 8003bda:	3720      	adds	r7, #32
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003be8:	bf00      	nop
 8003bea:	370c      	adds	r7, #12
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <__libc_init_array>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4d0d      	ldr	r5, [pc, #52]	; (8003c2c <__libc_init_array+0x38>)
 8003bf8:	4c0d      	ldr	r4, [pc, #52]	; (8003c30 <__libc_init_array+0x3c>)
 8003bfa:	1b64      	subs	r4, r4, r5
 8003bfc:	10a4      	asrs	r4, r4, #2
 8003bfe:	2600      	movs	r6, #0
 8003c00:	42a6      	cmp	r6, r4
 8003c02:	d109      	bne.n	8003c18 <__libc_init_array+0x24>
 8003c04:	4d0b      	ldr	r5, [pc, #44]	; (8003c34 <__libc_init_array+0x40>)
 8003c06:	4c0c      	ldr	r4, [pc, #48]	; (8003c38 <__libc_init_array+0x44>)
 8003c08:	f000 f820 	bl	8003c4c <_init>
 8003c0c:	1b64      	subs	r4, r4, r5
 8003c0e:	10a4      	asrs	r4, r4, #2
 8003c10:	2600      	movs	r6, #0
 8003c12:	42a6      	cmp	r6, r4
 8003c14:	d105      	bne.n	8003c22 <__libc_init_array+0x2e>
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1c:	4798      	blx	r3
 8003c1e:	3601      	adds	r6, #1
 8003c20:	e7ee      	b.n	8003c00 <__libc_init_array+0xc>
 8003c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c26:	4798      	blx	r3
 8003c28:	3601      	adds	r6, #1
 8003c2a:	e7f2      	b.n	8003c12 <__libc_init_array+0x1e>
 8003c2c:	08003cb4 	.word	0x08003cb4
 8003c30:	08003cb4 	.word	0x08003cb4
 8003c34:	08003cb4 	.word	0x08003cb4
 8003c38:	08003cb8 	.word	0x08003cb8

08003c3c <memset>:
 8003c3c:	4402      	add	r2, r0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d100      	bne.n	8003c46 <memset+0xa>
 8003c44:	4770      	bx	lr
 8003c46:	f803 1b01 	strb.w	r1, [r3], #1
 8003c4a:	e7f9      	b.n	8003c40 <memset+0x4>

08003c4c <_init>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	bf00      	nop
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr

08003c58 <_fini>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr
