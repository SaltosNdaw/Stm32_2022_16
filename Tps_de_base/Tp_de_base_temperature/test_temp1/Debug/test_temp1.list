
test_temp1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000510c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800529c  0800529c  0001529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800533c  0800533c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800533c  0800533c  0001533c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005344  08005344  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005344  08005344  00015344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005348  08005348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800534c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  080053bc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  080053bc  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cb0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000231e  00000000  00000000  00031d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00034070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  00034cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000261e5  00000000  00000000  000357f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104ef  00000000  00000000  0005b9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9032  00000000  00000000  0006becc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154efe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035f0  00000000  00000000  00154f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005284 	.word	0x08005284

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005284 	.word	0x08005284

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <__aeabi_uldivmod>:
 80008ec:	b953      	cbnz	r3, 8000904 <__aeabi_uldivmod+0x18>
 80008ee:	b94a      	cbnz	r2, 8000904 <__aeabi_uldivmod+0x18>
 80008f0:	2900      	cmp	r1, #0
 80008f2:	bf08      	it	eq
 80008f4:	2800      	cmpeq	r0, #0
 80008f6:	bf1c      	itt	ne
 80008f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80008fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000900:	f000 b96e 	b.w	8000be0 <__aeabi_idiv0>
 8000904:	f1ad 0c08 	sub.w	ip, sp, #8
 8000908:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800090c:	f000 f806 	bl	800091c <__udivmoddi4>
 8000910:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000914:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000918:	b004      	add	sp, #16
 800091a:	4770      	bx	lr

0800091c <__udivmoddi4>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	9d08      	ldr	r5, [sp, #32]
 8000922:	4604      	mov	r4, r0
 8000924:	468c      	mov	ip, r1
 8000926:	2b00      	cmp	r3, #0
 8000928:	f040 8083 	bne.w	8000a32 <__udivmoddi4+0x116>
 800092c:	428a      	cmp	r2, r1
 800092e:	4617      	mov	r7, r2
 8000930:	d947      	bls.n	80009c2 <__udivmoddi4+0xa6>
 8000932:	fab2 f282 	clz	r2, r2
 8000936:	b142      	cbz	r2, 800094a <__udivmoddi4+0x2e>
 8000938:	f1c2 0020 	rsb	r0, r2, #32
 800093c:	fa24 f000 	lsr.w	r0, r4, r0
 8000940:	4091      	lsls	r1, r2
 8000942:	4097      	lsls	r7, r2
 8000944:	ea40 0c01 	orr.w	ip, r0, r1
 8000948:	4094      	lsls	r4, r2
 800094a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800094e:	0c23      	lsrs	r3, r4, #16
 8000950:	fbbc f6f8 	udiv	r6, ip, r8
 8000954:	fa1f fe87 	uxth.w	lr, r7
 8000958:	fb08 c116 	mls	r1, r8, r6, ip
 800095c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000960:	fb06 f10e 	mul.w	r1, r6, lr
 8000964:	4299      	cmp	r1, r3
 8000966:	d909      	bls.n	800097c <__udivmoddi4+0x60>
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800096e:	f080 8119 	bcs.w	8000ba4 <__udivmoddi4+0x288>
 8000972:	4299      	cmp	r1, r3
 8000974:	f240 8116 	bls.w	8000ba4 <__udivmoddi4+0x288>
 8000978:	3e02      	subs	r6, #2
 800097a:	443b      	add	r3, r7
 800097c:	1a5b      	subs	r3, r3, r1
 800097e:	b2a4      	uxth	r4, r4
 8000980:	fbb3 f0f8 	udiv	r0, r3, r8
 8000984:	fb08 3310 	mls	r3, r8, r0, r3
 8000988:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800098c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000990:	45a6      	cmp	lr, r4
 8000992:	d909      	bls.n	80009a8 <__udivmoddi4+0x8c>
 8000994:	193c      	adds	r4, r7, r4
 8000996:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800099a:	f080 8105 	bcs.w	8000ba8 <__udivmoddi4+0x28c>
 800099e:	45a6      	cmp	lr, r4
 80009a0:	f240 8102 	bls.w	8000ba8 <__udivmoddi4+0x28c>
 80009a4:	3802      	subs	r0, #2
 80009a6:	443c      	add	r4, r7
 80009a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009ac:	eba4 040e 	sub.w	r4, r4, lr
 80009b0:	2600      	movs	r6, #0
 80009b2:	b11d      	cbz	r5, 80009bc <__udivmoddi4+0xa0>
 80009b4:	40d4      	lsrs	r4, r2
 80009b6:	2300      	movs	r3, #0
 80009b8:	e9c5 4300 	strd	r4, r3, [r5]
 80009bc:	4631      	mov	r1, r6
 80009be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009c2:	b902      	cbnz	r2, 80009c6 <__udivmoddi4+0xaa>
 80009c4:	deff      	udf	#255	; 0xff
 80009c6:	fab2 f282 	clz	r2, r2
 80009ca:	2a00      	cmp	r2, #0
 80009cc:	d150      	bne.n	8000a70 <__udivmoddi4+0x154>
 80009ce:	1bcb      	subs	r3, r1, r7
 80009d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009d4:	fa1f f887 	uxth.w	r8, r7
 80009d8:	2601      	movs	r6, #1
 80009da:	fbb3 fcfe 	udiv	ip, r3, lr
 80009de:	0c21      	lsrs	r1, r4, #16
 80009e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80009e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009e8:	fb08 f30c 	mul.w	r3, r8, ip
 80009ec:	428b      	cmp	r3, r1
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0xe4>
 80009f0:	1879      	adds	r1, r7, r1
 80009f2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0xe2>
 80009f8:	428b      	cmp	r3, r1
 80009fa:	f200 80e9 	bhi.w	8000bd0 <__udivmoddi4+0x2b4>
 80009fe:	4684      	mov	ip, r0
 8000a00:	1ac9      	subs	r1, r1, r3
 8000a02:	b2a3      	uxth	r3, r4
 8000a04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a08:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a0c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a10:	fb08 f800 	mul.w	r8, r8, r0
 8000a14:	45a0      	cmp	r8, r4
 8000a16:	d907      	bls.n	8000a28 <__udivmoddi4+0x10c>
 8000a18:	193c      	adds	r4, r7, r4
 8000a1a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x10a>
 8000a20:	45a0      	cmp	r8, r4
 8000a22:	f200 80d9 	bhi.w	8000bd8 <__udivmoddi4+0x2bc>
 8000a26:	4618      	mov	r0, r3
 8000a28:	eba4 0408 	sub.w	r4, r4, r8
 8000a2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a30:	e7bf      	b.n	80009b2 <__udivmoddi4+0x96>
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d909      	bls.n	8000a4a <__udivmoddi4+0x12e>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	f000 80b1 	beq.w	8000b9e <__udivmoddi4+0x282>
 8000a3c:	2600      	movs	r6, #0
 8000a3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a42:	4630      	mov	r0, r6
 8000a44:	4631      	mov	r1, r6
 8000a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4a:	fab3 f683 	clz	r6, r3
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d14a      	bne.n	8000ae8 <__udivmoddi4+0x1cc>
 8000a52:	428b      	cmp	r3, r1
 8000a54:	d302      	bcc.n	8000a5c <__udivmoddi4+0x140>
 8000a56:	4282      	cmp	r2, r0
 8000a58:	f200 80b8 	bhi.w	8000bcc <__udivmoddi4+0x2b0>
 8000a5c:	1a84      	subs	r4, r0, r2
 8000a5e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a62:	2001      	movs	r0, #1
 8000a64:	468c      	mov	ip, r1
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	d0a8      	beq.n	80009bc <__udivmoddi4+0xa0>
 8000a6a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a6e:	e7a5      	b.n	80009bc <__udivmoddi4+0xa0>
 8000a70:	f1c2 0320 	rsb	r3, r2, #32
 8000a74:	fa20 f603 	lsr.w	r6, r0, r3
 8000a78:	4097      	lsls	r7, r2
 8000a7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a7e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a82:	40d9      	lsrs	r1, r3
 8000a84:	4330      	orrs	r0, r6
 8000a86:	0c03      	lsrs	r3, r0, #16
 8000a88:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a98:	fb06 f108 	mul.w	r1, r6, r8
 8000a9c:	4299      	cmp	r1, r3
 8000a9e:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa2:	d909      	bls.n	8000ab8 <__udivmoddi4+0x19c>
 8000aa4:	18fb      	adds	r3, r7, r3
 8000aa6:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000aaa:	f080 808d 	bcs.w	8000bc8 <__udivmoddi4+0x2ac>
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	f240 808a 	bls.w	8000bc8 <__udivmoddi4+0x2ac>
 8000ab4:	3e02      	subs	r6, #2
 8000ab6:	443b      	add	r3, r7
 8000ab8:	1a5b      	subs	r3, r3, r1
 8000aba:	b281      	uxth	r1, r0
 8000abc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac8:	fb00 f308 	mul.w	r3, r0, r8
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x1c4>
 8000ad0:	1879      	adds	r1, r7, r1
 8000ad2:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ad6:	d273      	bcs.n	8000bc0 <__udivmoddi4+0x2a4>
 8000ad8:	428b      	cmp	r3, r1
 8000ada:	d971      	bls.n	8000bc0 <__udivmoddi4+0x2a4>
 8000adc:	3802      	subs	r0, #2
 8000ade:	4439      	add	r1, r7
 8000ae0:	1acb      	subs	r3, r1, r3
 8000ae2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ae6:	e778      	b.n	80009da <__udivmoddi4+0xbe>
 8000ae8:	f1c6 0c20 	rsb	ip, r6, #32
 8000aec:	fa03 f406 	lsl.w	r4, r3, r6
 8000af0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000af4:	431c      	orrs	r4, r3
 8000af6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000afa:	fa01 f306 	lsl.w	r3, r1, r6
 8000afe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b02:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b06:	431f      	orrs	r7, r3
 8000b08:	0c3b      	lsrs	r3, r7, #16
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fa1f f884 	uxth.w	r8, r4
 8000b12:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b1a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b1e:	458a      	cmp	sl, r1
 8000b20:	fa02 f206 	lsl.w	r2, r2, r6
 8000b24:	fa00 f306 	lsl.w	r3, r0, r6
 8000b28:	d908      	bls.n	8000b3c <__udivmoddi4+0x220>
 8000b2a:	1861      	adds	r1, r4, r1
 8000b2c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000b30:	d248      	bcs.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b32:	458a      	cmp	sl, r1
 8000b34:	d946      	bls.n	8000bc4 <__udivmoddi4+0x2a8>
 8000b36:	f1a9 0902 	sub.w	r9, r9, #2
 8000b3a:	4421      	add	r1, r4
 8000b3c:	eba1 010a 	sub.w	r1, r1, sl
 8000b40:	b2bf      	uxth	r7, r7
 8000b42:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b46:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b4a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b4e:	fb00 f808 	mul.w	r8, r0, r8
 8000b52:	45b8      	cmp	r8, r7
 8000b54:	d907      	bls.n	8000b66 <__udivmoddi4+0x24a>
 8000b56:	19e7      	adds	r7, r4, r7
 8000b58:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000b5c:	d22e      	bcs.n	8000bbc <__udivmoddi4+0x2a0>
 8000b5e:	45b8      	cmp	r8, r7
 8000b60:	d92c      	bls.n	8000bbc <__udivmoddi4+0x2a0>
 8000b62:	3802      	subs	r0, #2
 8000b64:	4427      	add	r7, r4
 8000b66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b6a:	eba7 0708 	sub.w	r7, r7, r8
 8000b6e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b72:	454f      	cmp	r7, r9
 8000b74:	46c6      	mov	lr, r8
 8000b76:	4649      	mov	r1, r9
 8000b78:	d31a      	bcc.n	8000bb0 <__udivmoddi4+0x294>
 8000b7a:	d017      	beq.n	8000bac <__udivmoddi4+0x290>
 8000b7c:	b15d      	cbz	r5, 8000b96 <__udivmoddi4+0x27a>
 8000b7e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b82:	eb67 0701 	sbc.w	r7, r7, r1
 8000b86:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b8a:	40f2      	lsrs	r2, r6
 8000b8c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b90:	40f7      	lsrs	r7, r6
 8000b92:	e9c5 2700 	strd	r2, r7, [r5]
 8000b96:	2600      	movs	r6, #0
 8000b98:	4631      	mov	r1, r6
 8000b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9e:	462e      	mov	r6, r5
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	e70b      	b.n	80009bc <__udivmoddi4+0xa0>
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	e6e9      	b.n	800097c <__udivmoddi4+0x60>
 8000ba8:	4618      	mov	r0, r3
 8000baa:	e6fd      	b.n	80009a8 <__udivmoddi4+0x8c>
 8000bac:	4543      	cmp	r3, r8
 8000bae:	d2e5      	bcs.n	8000b7c <__udivmoddi4+0x260>
 8000bb0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000bb4:	eb69 0104 	sbc.w	r1, r9, r4
 8000bb8:	3801      	subs	r0, #1
 8000bba:	e7df      	b.n	8000b7c <__udivmoddi4+0x260>
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e7d2      	b.n	8000b66 <__udivmoddi4+0x24a>
 8000bc0:	4660      	mov	r0, ip
 8000bc2:	e78d      	b.n	8000ae0 <__udivmoddi4+0x1c4>
 8000bc4:	4681      	mov	r9, r0
 8000bc6:	e7b9      	b.n	8000b3c <__udivmoddi4+0x220>
 8000bc8:	4666      	mov	r6, ip
 8000bca:	e775      	b.n	8000ab8 <__udivmoddi4+0x19c>
 8000bcc:	4630      	mov	r0, r6
 8000bce:	e74a      	b.n	8000a66 <__udivmoddi4+0x14a>
 8000bd0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bd4:	4439      	add	r1, r7
 8000bd6:	e713      	b.n	8000a00 <__udivmoddi4+0xe4>
 8000bd8:	3802      	subs	r0, #2
 8000bda:	443c      	add	r4, r7
 8000bdc:	e724      	b.n	8000a28 <__udivmoddi4+0x10c>
 8000bde:	bf00      	nop

08000be0 <__aeabi_idiv0>:
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop

08000be4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfa:	4b2b      	ldr	r3, [pc, #172]	; (8000ca8 <MX_GPIO_Init+0xc4>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	4a2a      	ldr	r2, [pc, #168]	; (8000ca8 <MX_GPIO_Init+0xc4>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c06:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <MX_GPIO_Init+0xc4>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	4b25      	ldr	r3, [pc, #148]	; (8000ca8 <MX_GPIO_Init+0xc4>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a24      	ldr	r2, [pc, #144]	; (8000ca8 <MX_GPIO_Init+0xc4>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <MX_GPIO_Init+0xc4>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <MX_GPIO_Init+0xc4>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	4a1e      	ldr	r2, [pc, #120]	; (8000ca8 <MX_GPIO_Init+0xc4>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c36:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <MX_GPIO_Init+0xc4>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	4b19      	ldr	r3, [pc, #100]	; (8000ca8 <MX_GPIO_Init+0xc4>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	4a18      	ldr	r2, [pc, #96]	; (8000ca8 <MX_GPIO_Init+0xc4>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c4e:	4b16      	ldr	r3, [pc, #88]	; (8000ca8 <MX_GPIO_Init+0xc4>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	f003 0302 	and.w	r3, r3, #2
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2120      	movs	r1, #32
 8000c5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c62:	f000 ffdd 	bl	8001c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480b      	ldr	r0, [pc, #44]	; (8000cac <MX_GPIO_Init+0xc8>)
 8000c7e:	f000 fe25 	bl	80018cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c82:	2320      	movs	r3, #32
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	4619      	mov	r1, r3
 8000c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9c:	f000 fe16 	bl	80018cc <HAL_GPIO_Init>

}
 8000ca0:	bf00      	nop
 8000ca2:	3728      	adds	r7, #40	; 0x28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	48000800 	.word	0x48000800

08000cb0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cb6:	4a1c      	ldr	r2, [pc, #112]	; (8000d28 <MX_I2C1_Init+0x78>)
 8000cb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cbc:	4a1b      	ldr	r2, [pc, #108]	; (8000d2c <MX_I2C1_Init+0x7c>)
 8000cbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc0:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc6:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cea:	480e      	ldr	r0, [pc, #56]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cec:	f000 ffb0 	bl	8001c50 <HAL_I2C_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cf6:	f000 fb12 	bl	800131e <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000cfe:	f001 fda1 	bl	8002844 <HAL_I2CEx_ConfigAnalogFilter>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d08:	f000 fb09 	bl	800131e <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_I2C1_Init+0x74>)
 8000d10:	f001 fde3 	bl	80028da <HAL_I2CEx_ConfigDigitalFilter>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d1a:	f000 fb00 	bl	800131e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000098 	.word	0x20000098
 8000d28:	40005400 	.word	0x40005400
 8000d2c:	10909cec 	.word	0x10909cec

08000d30 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0ac      	sub	sp, #176	; 0xb0
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2288      	movs	r2, #136	; 0x88
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f003 fe61 	bl	8004a18 <memset>
  if(i2cHandle->Instance==I2C1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <HAL_I2C_MspInit+0xb0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d13b      	bne.n	8000dd8 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d60:	2340      	movs	r3, #64	; 0x40
 8000d62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 fc51 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d78:	f000 fad1 	bl	800131e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_I2C_MspInit+0xb4>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d80:	4a18      	ldr	r2, [pc, #96]	; (8000de4 <HAL_I2C_MspInit+0xb4>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_I2C_MspInit+0xb4>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d94:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dae:	2304      	movs	r3, #4
 8000db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000db8:	4619      	mov	r1, r3
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <HAL_I2C_MspInit+0xb8>)
 8000dbc:	f000 fd86 	bl	80018cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_I2C_MspInit+0xb4>)
 8000dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <HAL_I2C_MspInit+0xb4>)
 8000dc6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dca:	6593      	str	r3, [r2, #88]	; 0x58
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_I2C_MspInit+0xb4>)
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000dd8:	bf00      	nop
 8000dda:	37b0      	adds	r7, #176	; 0xb0
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40005400 	.word	0x40005400
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000400 	.word	0x48000400

08000dec <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af02      	add	r7, sp, #8
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	f043 030c 	orr.w	r3, r3, #12
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	f043 0320 	orr.w	r3, r3, #32
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 8000e18:	f107 0118 	add.w	r1, r7, #24
 8000e1c:	230a      	movs	r3, #10
 8000e1e:	2202      	movs	r2, #2
 8000e20:	486c      	ldr	r0, [pc, #432]	; (8000fd4 <lcd_init+0x1e8>)
 8000e22:	f003 f901 	bl	8004028 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8000e26:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000e2a:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8000e2c:	f107 0114 	add.w	r1, r7, #20
 8000e30:	230a      	movs	r3, #10
 8000e32:	2202      	movs	r2, #2
 8000e34:	4867      	ldr	r0, [pc, #412]	; (8000fd4 <lcd_init+0x1e8>)
 8000e36:	f003 f8f7 	bl	8004028 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8000e3a:	2364      	movs	r3, #100	; 0x64
 8000e3c:	2205      	movs	r2, #5
 8000e3e:	217c      	movs	r1, #124	; 0x7c
 8000e40:	69f8      	ldr	r0, [r7, #28]
 8000e42:	f001 f97f 	bl	8002144 <HAL_I2C_IsDeviceReady>
 8000e46:	4603      	mov	r3, r0
 8000e48:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8000e4a:	f107 0113 	add.w	r1, r7, #19
 8000e4e:	230a      	movs	r3, #10
 8000e50:	2201      	movs	r2, #1
 8000e52:	4860      	ldr	r0, [pc, #384]	; (8000fd4 <lcd_init+0x1e8>)
 8000e54:	f003 f8e8 	bl	8004028 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000e58:	2032      	movs	r0, #50	; 0x32
 8000e5a:	f000 fc2d 	bl	80016b8 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 8000e5e:	f107 0218 	add.w	r2, r7, #24
 8000e62:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2302      	movs	r3, #2
 8000e6a:	217c      	movs	r1, #124	; 0x7c
 8000e6c:	69f8      	ldr	r0, [r7, #28]
 8000e6e:	f000 ff7f 	bl	8001d70 <HAL_I2C_Master_Transmit>
 8000e72:	4603      	mov	r3, r0
 8000e74:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8000e76:	f107 0112 	add.w	r1, r7, #18
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4855      	ldr	r0, [pc, #340]	; (8000fd4 <lcd_init+0x1e8>)
 8000e80:	f003 f8d2 	bl	8004028 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000e84:	2032      	movs	r0, #50	; 0x32
 8000e86:	f000 fc17 	bl	80016b8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000e8a:	f107 0218 	add.w	r2, r7, #24
 8000e8e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e92:	9300      	str	r3, [sp, #0]
 8000e94:	2302      	movs	r3, #2
 8000e96:	217c      	movs	r1, #124	; 0x7c
 8000e98:	69f8      	ldr	r0, [r7, #28]
 8000e9a:	f000 ff69 	bl	8001d70 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 8000e9e:	2005      	movs	r0, #5
 8000ea0:	f000 fc0a 	bl	80016b8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000ea4:	f107 0218 	add.w	r2, r7, #24
 8000ea8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2302      	movs	r3, #2
 8000eb0:	217c      	movs	r1, #124	; 0x7c
 8000eb2:	69f8      	ldr	r0, [r7, #28]
 8000eb4:	f000 ff5c 	bl	8001d70 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	2204      	movs	r2, #4
 8000ebc:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	785b      	ldrb	r3, [r3, #1]
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 8000eca:	f107 0218 	add.w	r2, r7, #24
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	217c      	movs	r1, #124	; 0x7c
 8000ed8:	69f8      	ldr	r0, [r7, #28]
 8000eda:	f000 ff49 	bl	8001d70 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000ee2:	f107 0218 	add.w	r2, r7, #24
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	9300      	str	r3, [sp, #0]
 8000eec:	2302      	movs	r3, #2
 8000eee:	217c      	movs	r1, #124	; 0x7c
 8000ef0:	69f8      	ldr	r0, [r7, #28]
 8000ef2:	f000 ff3d 	bl	8001d70 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 8000ef6:	2002      	movs	r0, #2
 8000ef8:	f000 fbde 	bl	80016b8 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	2202      	movs	r2, #2
 8000f00:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	789b      	ldrb	r3, [r3, #2]
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 8000f0e:	f107 0218 	add.w	r2, r7, #24
 8000f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2302      	movs	r3, #2
 8000f1a:	217c      	movs	r1, #124	; 0x7c
 8000f1c:	69f8      	ldr	r0, [r7, #28]
 8000f1e:	f000 ff27 	bl	8001d70 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000f2a:	f107 0210 	add.w	r2, r7, #16
 8000f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f32:	9300      	str	r3, [sp, #0]
 8000f34:	2302      	movs	r3, #2
 8000f36:	21c4      	movs	r1, #196	; 0xc4
 8000f38:	69f8      	ldr	r0, [r7, #28]
 8000f3a:	f000 ff19 	bl	8001d70 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 8000f3e:	2308      	movs	r3, #8
 8000f40:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8000f42:	23ff      	movs	r3, #255	; 0xff
 8000f44:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000f46:	f107 0210 	add.w	r2, r7, #16
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2302      	movs	r3, #2
 8000f52:	21c4      	movs	r1, #196	; 0xc4
 8000f54:	69f8      	ldr	r0, [r7, #28]
 8000f56:	f000 ff0b 	bl	8001d70 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 8000f5e:	2320      	movs	r3, #32
 8000f60:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000f62:	f107 0210 	add.w	r2, r7, #16
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	21c4      	movs	r1, #196	; 0xc4
 8000f70:	69f8      	ldr	r0, [r7, #28]
 8000f72:	f000 fefd 	bl	8001d70 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8000f76:	2304      	movs	r3, #4
 8000f78:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000f7a:	23ff      	movs	r3, #255	; 0xff
 8000f7c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000f7e:	f107 020c 	add.w	r2, r7, #12
 8000f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2302      	movs	r3, #2
 8000f8a:	21c4      	movs	r1, #196	; 0xc4
 8000f8c:	69f8      	ldr	r0, [r7, #28]
 8000f8e:	f000 feef 	bl	8001d70 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8000f92:	2303      	movs	r3, #3
 8000f94:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000f96:	23ff      	movs	r3, #255	; 0xff
 8000f98:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000f9a:	f107 020c 	add.w	r2, r7, #12
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	21c4      	movs	r1, #196	; 0xc4
 8000fa8:	69f8      	ldr	r0, [r7, #28]
 8000faa:	f000 fee1 	bl	8001d70 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000fb2:	23ff      	movs	r3, #255	; 0xff
 8000fb4:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000fb6:	f107 020c 	add.w	r2, r7, #12
 8000fba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	21c4      	movs	r1, #196	; 0xc4
 8000fc4:	69f8      	ldr	r0, [r7, #28]
 8000fc6:	f000 fed3 	bl	8001d70 <HAL_I2C_Master_Transmit>


}
 8000fca:	bf00      	nop
 8000fcc:	3720      	adds	r7, #32
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	200000e4 	.word	0x200000e4

08000fd8 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af02      	add	r7, sp, #8
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 8000fe6:	2340      	movs	r3, #64	; 0x40
 8000fe8:	733b      	strb	r3, [r7, #12]
    int i=0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8000fee:	e011      	b.n	8001014 <lcd_print+0x3c>
    {
            data[1] = str[i];
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	9300      	str	r3, [sp, #0]
 8001004:	2302      	movs	r3, #2
 8001006:	217c      	movs	r1, #124	; 0x7c
 8001008:	6938      	ldr	r0, [r7, #16]
 800100a:	f000 feb1 	bl	8001d70 <HAL_I2C_Master_Transmit>
            i++;
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	3301      	adds	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	4413      	add	r3, r2
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1e7      	bne.n	8000ff0 <lcd_print+0x18>
   }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b086      	sub	sp, #24
 800102e:	af02      	add	r7, sp, #8
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	460b      	mov	r3, r1
 8001034:	70fb      	strb	r3, [r7, #3]
 8001036:	4613      	mov	r3, r2
 8001038:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 800103e:	78bb      	ldrb	r3, [r7, #2]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d104      	bne.n	800104e <lcd_position+0x24>
    {
        col = col | 0x80;
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800104a:	70fb      	strb	r3, [r7, #3]
 800104c:	e003      	b.n	8001056 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001054:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800105e:	f107 0208 	add.w	r2, r7, #8
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2302      	movs	r3, #2
 800106a:	217c      	movs	r1, #124	; 0x7c
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f000 fe7f 	bl	8001d70 <HAL_I2C_Master_Transmit>
}
 8001072:	bf00      	nop
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	460b      	mov	r3, r1
 8001088:	71bb      	strb	r3, [r7, #6]
 800108a:	4613      	mov	r3, r2
 800108c:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <reglagecouleur+0x74>)
 8001090:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 8001092:	2304      	movs	r3, #4
 8001094:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 800109a:	f107 0210 	add.w	r2, r7, #16
 800109e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2302      	movs	r3, #2
 80010a6:	21c4      	movs	r1, #196	; 0xc4
 80010a8:	6978      	ldr	r0, [r7, #20]
 80010aa:	f000 fe61 	bl	8001d70 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 80010ae:	2303      	movs	r3, #3
 80010b0:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 80010b2:	79bb      	ldrb	r3, [r7, #6]
 80010b4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 80010b6:	f107 020c 	add.w	r2, r7, #12
 80010ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2302      	movs	r3, #2
 80010c2:	21c4      	movs	r1, #196	; 0xc4
 80010c4:	6978      	ldr	r0, [r7, #20]
 80010c6:	f000 fe53 	bl	8001d70 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 80010ca:	2302      	movs	r3, #2
 80010cc:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 80010ce:	797b      	ldrb	r3, [r7, #5]
 80010d0:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 80010d2:	f107 0208 	add.w	r2, r7, #8
 80010d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2302      	movs	r3, #2
 80010de:	21c4      	movs	r1, #196	; 0xc4
 80010e0:	6978      	ldr	r0, [r7, #20]
 80010e2:	f000 fe45 	bl	8001d70 <HAL_I2C_Master_Transmit>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000098 	.word	0x20000098

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fa:	f000 fa61 	bl	80015c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010fe:	f000 f8bd 	bl	800127c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001102:	f7ff fd6f 	bl	8000be4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001106:	f000 f9a5 	bl	8001454 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800110a:	f7ff fdd1 	bl	8000cb0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1, &data) ;
 800110e:	463b      	mov	r3, r7
 8001110:	4619      	mov	r1, r3
 8001112:	4852      	ldr	r0, [pc, #328]	; (800125c <main+0x168>)
 8001114:	f7ff fe6a 	bl	8000dec <lcd_init>
	lcd_print(&hi2c1, Pdata) ;
	HAL_Delay(1000) ;
*/

	    // Tell TMP102 that we want to read from the temperature register
	    buf[0] = REG_TEMP;
 8001118:	2300      	movs	r3, #0
 800111a:	713b      	strb	r3, [r7, #4]
	    ret = HAL_I2C_Master_Transmit(&hi2c1, TMP102_ADDR, buf, 1, HAL_MAX_DELAY);
 800111c:	2388      	movs	r3, #136	; 0x88
 800111e:	b299      	uxth	r1, r3
 8001120:	1d3a      	adds	r2, r7, #4
 8001122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	484c      	ldr	r0, [pc, #304]	; (800125c <main+0x168>)
 800112c:	f000 fe20 	bl	8001d70 <HAL_I2C_Master_Transmit>
 8001130:	4603      	mov	r3, r0
 8001132:	757b      	strb	r3, [r7, #21]

	    if ( ret != HAL_OK ) { strcpy((char*)buf, "Error Tx\r\n");}
 8001134:	7d7b      	ldrb	r3, [r7, #21]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d008      	beq.n	800114c <main+0x58>
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4a48      	ldr	r2, [pc, #288]	; (8001260 <main+0x16c>)
 800113e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001140:	c303      	stmia	r3!, {r0, r1}
 8001142:	801a      	strh	r2, [r3, #0]
 8001144:	3302      	adds	r3, #2
 8001146:	0c12      	lsrs	r2, r2, #16
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e061      	b.n	8001210 <main+0x11c>
	    else
	    {
	        // Read 2 bytes from the temperature register
	        ret = HAL_I2C_Master_Receive(&hi2c1, TMP102_ADDR, buf, 2, HAL_MAX_DELAY);
 800114c:	2388      	movs	r3, #136	; 0x88
 800114e:	b299      	uxth	r1, r3
 8001150:	1d3a      	adds	r2, r7, #4
 8001152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2302      	movs	r3, #2
 800115a:	4840      	ldr	r0, [pc, #256]	; (800125c <main+0x168>)
 800115c:	f000 fefc 	bl	8001f58 <HAL_I2C_Master_Receive>
 8001160:	4603      	mov	r3, r0
 8001162:	757b      	strb	r3, [r7, #21]

	        if ( ret != HAL_OK ) { strcpy((char*)buf, "Error Rx\r\n");}
 8001164:	7d7b      	ldrb	r3, [r7, #21]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d008      	beq.n	800117c <main+0x88>
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4a3d      	ldr	r2, [pc, #244]	; (8001264 <main+0x170>)
 800116e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001170:	c303      	stmia	r3!, {r0, r1}
 8001172:	801a      	strh	r2, [r3, #0]
 8001174:	3302      	adds	r3, #2
 8001176:	0c12      	lsrs	r2, r2, #16
 8001178:	701a      	strb	r2, [r3, #0]
 800117a:	e049      	b.n	8001210 <main+0x11c>
	        else
	        {
	        //Combine the bytes
	        val = ((int16_t)buf[0] << 4) | (buf[1] >> 4);
 800117c:	793b      	ldrb	r3, [r7, #4]
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	b21a      	sxth	r2, r3
 8001182:	797b      	ldrb	r3, [r7, #5]
 8001184:	091b      	lsrs	r3, r3, #4
 8001186:	b2db      	uxtb	r3, r3
 8001188:	b21b      	sxth	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	82fb      	strh	r3, [r7, #22]

	        // Convert to 2's complement, since temperature can be negative
	        if ( val > 0x7FF ) { val |= 0xF000;}
 800118e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001192:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001196:	db05      	blt.n	80011a4 <main+0xb0>
 8001198:	8afb      	ldrh	r3, [r7, #22]
 800119a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800119e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80011a2:	82fb      	strh	r3, [r7, #22]

	        // Convert to float temperature value (Celsius)
	        temp_c = val * 0.0625;
 80011a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fae5 	bl	8000778 <__aeabi_i2d>
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <main+0x174>)
 80011b4:	f7ff f864 	bl	8000280 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4610      	mov	r0, r2
 80011be:	4619      	mov	r1, r3
 80011c0:	f7ff fb44 	bl	800084c <__aeabi_d2f>
 80011c4:	4603      	mov	r3, r0
 80011c6:	613b      	str	r3, [r7, #16]

	        // Convert temperature to decimal format
	        temp_c *= 100;
 80011c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011cc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800126c <main+0x178>
 80011d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011d4:	edc7 7a04 	vstr	s15, [r7, #16]
	        sprintf((char*)buf, "%u.%u C\r\n", ((unsigned int)temp_c / 100), ((unsigned int)temp_c % 100));
 80011d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80011dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011e0:	ee17 2a90 	vmov	r2, s15
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <main+0x17c>)
 80011e6:	fba3 2302 	umull	r2, r3, r3, r2
 80011ea:	095a      	lsrs	r2, r3, #5
 80011ec:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011f4:	ee17 1a90 	vmov	r1, s15
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <main+0x17c>)
 80011fa:	fba3 0301 	umull	r0, r3, r3, r1
 80011fe:	095b      	lsrs	r3, r3, #5
 8001200:	2064      	movs	r0, #100	; 0x64
 8001202:	fb00 f303 	mul.w	r3, r0, r3
 8001206:	1acb      	subs	r3, r1, r3
 8001208:	1d38      	adds	r0, r7, #4
 800120a:	491a      	ldr	r1, [pc, #104]	; (8001274 <main+0x180>)
 800120c:	f003 fc0c 	bl	8004a28 <siprintf>
	        }
	    }

	    // Send out buffer (temperature or error message)
	    HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4618      	mov	r0, r3
 8001214:	f7fe ffdc 	bl	80001d0 <strlen>
 8001218:	4603      	mov	r3, r0
 800121a:	b29a      	uxth	r2, r3
 800121c:	1d39      	adds	r1, r7, #4
 800121e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001222:	4815      	ldr	r0, [pc, #84]	; (8001278 <main+0x184>)
 8001224:	f002 ff00 	bl	8004028 <HAL_UART_Transmit>

	    // Wait
	    HAL_Delay(500);
 8001228:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800122c:	f000 fa44 	bl	80016b8 <HAL_Delay>

		  lcd_position(&hi2c1,0,0) ;
 8001230:	2200      	movs	r2, #0
 8001232:	2100      	movs	r1, #0
 8001234:	4809      	ldr	r0, [pc, #36]	; (800125c <main+0x168>)
 8001236:	f7ff fef8 	bl	800102a <lcd_position>
		  lcd_print(&hi2c1, val) ;
 800123a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800123e:	4619      	mov	r1, r3
 8001240:	4806      	ldr	r0, [pc, #24]	; (800125c <main+0x168>)
 8001242:	f7ff fec9 	bl	8000fd8 <lcd_print>
		  reglagecouleur(255,0,0) ;
 8001246:	2200      	movs	r2, #0
 8001248:	2100      	movs	r1, #0
 800124a:	20ff      	movs	r0, #255	; 0xff
 800124c:	f7ff ff16 	bl	800107c <reglagecouleur>
		  HAL_Delay(500) ;
 8001250:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001254:	f000 fa30 	bl	80016b8 <HAL_Delay>
  {
 8001258:	e75e      	b.n	8001118 <main+0x24>
 800125a:	bf00      	nop
 800125c:	20000098 	.word	0x20000098
 8001260:	0800529c 	.word	0x0800529c
 8001264:	080052a8 	.word	0x080052a8
 8001268:	3fb00000 	.word	0x3fb00000
 800126c:	42c80000 	.word	0x42c80000
 8001270:	51eb851f 	.word	0x51eb851f
 8001274:	080052b4 	.word	0x080052b4
 8001278:	200000e4 	.word	0x200000e4

0800127c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b096      	sub	sp, #88	; 0x58
 8001280:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	2244      	movs	r2, #68	; 0x44
 8001288:	2100      	movs	r1, #0
 800128a:	4618      	mov	r0, r3
 800128c:	f003 fbc4 	bl	8004a18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001290:	463b      	mov	r3, r7
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800129e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012a2:	f001 fb75 	bl	8002990 <HAL_PWREx_ControlVoltageScaling>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80012ac:	f000 f837 	bl	800131e <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b0:	2302      	movs	r3, #2
 80012b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ba:	2310      	movs	r3, #16
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012be:	2302      	movs	r3, #2
 80012c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c2:	2302      	movs	r3, #2
 80012c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80012ca:	230a      	movs	r3, #10
 80012cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012ce:	2307      	movs	r3, #7
 80012d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012d2:	2302      	movs	r3, #2
 80012d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012d6:	2302      	movs	r3, #2
 80012d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4618      	mov	r0, r3
 80012e0:	f001 fbac 	bl	8002a3c <HAL_RCC_OscConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80012ea:	f000 f818 	bl	800131e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ee:	230f      	movs	r3, #15
 80012f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f2:	2303      	movs	r3, #3
 80012f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	2104      	movs	r1, #4
 8001306:	4618      	mov	r0, r3
 8001308:	f001 ff7e 	bl	8003208 <HAL_RCC_ClockConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001312:	f000 f804 	bl	800131e <Error_Handler>
  }
}
 8001316:	bf00      	nop
 8001318:	3758      	adds	r7, #88	; 0x58
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001322:	b672      	cpsid	i
}
 8001324:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001326:	e7fe      	b.n	8001326 <Error_Handler+0x8>

08001328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132e:	4b0f      	ldr	r3, [pc, #60]	; (800136c <HAL_MspInit+0x44>)
 8001330:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001332:	4a0e      	ldr	r2, [pc, #56]	; (800136c <HAL_MspInit+0x44>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6613      	str	r3, [r2, #96]	; 0x60
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <HAL_MspInit+0x44>)
 800133c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <HAL_MspInit+0x44>)
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	4a08      	ldr	r2, [pc, #32]	; (800136c <HAL_MspInit+0x44>)
 800134c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001350:	6593      	str	r3, [r2, #88]	; 0x58
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <HAL_MspInit+0x44>)
 8001354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000

08001370 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001374:	e7fe      	b.n	8001374 <NMI_Handler+0x4>

08001376 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800137a:	e7fe      	b.n	800137a <HardFault_Handler+0x4>

0800137c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001380:	e7fe      	b.n	8001380 <MemManage_Handler+0x4>

08001382 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001386:	e7fe      	b.n	8001386 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	e7fe      	b.n	800138c <UsageFault_Handler+0x4>

0800138e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013bc:	f000 f95c 	bl	8001678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f003 fae6 	bl	80049c4 <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20018000 	.word	0x20018000
 8001424:	00000400 	.word	0x00000400
 8001428:	2000008c 	.word	0x2000008c
 800142c:	20000180 	.word	0x20000180

08001430 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001434:	4b06      	ldr	r3, [pc, #24]	; (8001450 <SystemInit+0x20>)
 8001436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <SystemInit+0x20>)
 800143c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_USART2_UART_Init+0x58>)
 800145a:	4a15      	ldr	r2, [pc, #84]	; (80014b0 <MX_USART2_UART_Init+0x5c>)
 800145c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_USART2_UART_Init+0x58>)
 8001460:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001464:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_USART2_UART_Init+0x58>)
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_USART2_UART_Init+0x58>)
 800146e:	2200      	movs	r2, #0
 8001470:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_USART2_UART_Init+0x58>)
 8001474:	2200      	movs	r2, #0
 8001476:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_USART2_UART_Init+0x58>)
 800147a:	220c      	movs	r2, #12
 800147c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_USART2_UART_Init+0x58>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_USART2_UART_Init+0x58>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_USART2_UART_Init+0x58>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_USART2_UART_Init+0x58>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_USART2_UART_Init+0x58>)
 8001498:	f002 fd78 	bl	8003f8c <HAL_UART_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014a2:	f7ff ff3c 	bl	800131e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200000e4 	.word	0x200000e4
 80014b0:	40004400 	.word	0x40004400

080014b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0ac      	sub	sp, #176	; 0xb0
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2288      	movs	r2, #136	; 0x88
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fa9f 	bl	8004a18 <memset>
  if(uartHandle->Instance==USART2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a21      	ldr	r2, [pc, #132]	; (8001564 <HAL_UART_MspInit+0xb0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d13b      	bne.n	800155c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 f88f 	bl	8003614 <HAL_RCCEx_PeriphCLKConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014fc:	f7ff ff0f 	bl	800131e <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_UART_MspInit+0xb4>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	4a18      	ldr	r2, [pc, #96]	; (8001568 <HAL_UART_MspInit+0xb4>)
 8001506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150a:	6593      	str	r3, [r2, #88]	; 0x58
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_UART_MspInit+0xb4>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b13      	ldr	r3, [pc, #76]	; (8001568 <HAL_UART_MspInit+0xb4>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	4a12      	ldr	r2, [pc, #72]	; (8001568 <HAL_UART_MspInit+0xb4>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001524:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_UART_MspInit+0xb4>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001530:	230c      	movs	r3, #12
 8001532:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153c:	2300      	movs	r3, #0
 800153e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001548:	2307      	movs	r3, #7
 800154a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001558:	f000 f9b8 	bl	80018cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800155c:	bf00      	nop
 800155e:	37b0      	adds	r7, #176	; 0xb0
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40004400 	.word	0x40004400
 8001568:	40021000 	.word	0x40021000

0800156c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800156c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001570:	f7ff ff5e 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001574:	480c      	ldr	r0, [pc, #48]	; (80015a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001576:	490d      	ldr	r1, [pc, #52]	; (80015ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <LoopForever+0xe>)
  movs r3, #0
 800157a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800157c:	e002      	b.n	8001584 <LoopCopyDataInit>

0800157e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001580:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001582:	3304      	adds	r3, #4

08001584 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001584:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001586:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001588:	d3f9      	bcc.n	800157e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158a:	4a0a      	ldr	r2, [pc, #40]	; (80015b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800158c:	4c0a      	ldr	r4, [pc, #40]	; (80015b8 <LoopForever+0x16>)
  movs r3, #0
 800158e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001590:	e001      	b.n	8001596 <LoopFillZerobss>

08001592 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001592:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001594:	3204      	adds	r2, #4

08001596 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001596:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001598:	d3fb      	bcc.n	8001592 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800159a:	f003 fa19 	bl	80049d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800159e:	f7ff fda9 	bl	80010f4 <main>

080015a2 <LoopForever>:

LoopForever:
    b LoopForever
 80015a2:	e7fe      	b.n	80015a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015b0:	0800534c 	.word	0x0800534c
  ldr r2, =_sbss
 80015b4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80015b8:	2000017c 	.word	0x2000017c

080015bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015bc:	e7fe      	b.n	80015bc <ADC1_2_IRQHandler>
	...

080015c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ca:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <HAL_Init+0x3c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a0b      	ldr	r2, [pc, #44]	; (80015fc <HAL_Init+0x3c>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d6:	2003      	movs	r0, #3
 80015d8:	f000 f944 	bl	8001864 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015dc:	2000      	movs	r0, #0
 80015de:	f000 f80f 	bl	8001600 <HAL_InitTick>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	71fb      	strb	r3, [r7, #7]
 80015ec:	e001      	b.n	80015f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015ee:	f7ff fe9b 	bl	8001328 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80015f2:	79fb      	ldrb	r3, [r7, #7]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	3708      	adds	r7, #8
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40022000 	.word	0x40022000

08001600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_InitTick+0x6c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d023      	beq.n	800165c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <HAL_InitTick+0x70>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_InitTick+0x6c>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	fbb3 f3f1 	udiv	r3, r3, r1
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f941 	bl	80018b2 <HAL_SYSTICK_Config>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d10f      	bne.n	8001656 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d809      	bhi.n	8001650 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001644:	f000 f919 	bl	800187a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001648:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <HAL_InitTick+0x74>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e007      	b.n	8001660 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	73fb      	strb	r3, [r7, #15]
 8001654:	e004      	b.n	8001660 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	73fb      	strb	r3, [r7, #15]
 800165a:	e001      	b.n	8001660 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000008 	.word	0x20000008
 8001670:	20000000 	.word	0x20000000
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_IncTick+0x20>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	461a      	mov	r2, r3
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <HAL_IncTick+0x24>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4413      	add	r3, r2
 8001688:	4a04      	ldr	r2, [pc, #16]	; (800169c <HAL_IncTick+0x24>)
 800168a:	6013      	str	r3, [r2, #0]
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000008 	.word	0x20000008
 800169c:	20000168 	.word	0x20000168

080016a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_GetTick+0x14>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000168 	.word	0x20000168

080016b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c0:	f7ff ffee 	bl	80016a0 <HAL_GetTick>
 80016c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80016d0:	d005      	beq.n	80016de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80016d2:	4b0a      	ldr	r3, [pc, #40]	; (80016fc <HAL_Delay+0x44>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4413      	add	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016de:	bf00      	nop
 80016e0:	f7ff ffde 	bl	80016a0 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d8f7      	bhi.n	80016e0 <HAL_Delay+0x28>
  {
  }
}
 80016f0:	bf00      	nop
 80016f2:	bf00      	nop
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000008 	.word	0x20000008

08001700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800172c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <__NVIC_GetPriorityGrouping+0x18>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	f003 0307 	and.w	r3, r3, #7
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	6039      	str	r1, [r7, #0]
 800176e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	db0a      	blt.n	800178e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	490c      	ldr	r1, [pc, #48]	; (80017b0 <__NVIC_SetPriority+0x4c>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	0112      	lsls	r2, r2, #4
 8001784:	b2d2      	uxtb	r2, r2
 8001786:	440b      	add	r3, r1
 8001788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800178c:	e00a      	b.n	80017a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	b2da      	uxtb	r2, r3
 8001792:	4908      	ldr	r1, [pc, #32]	; (80017b4 <__NVIC_SetPriority+0x50>)
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	f003 030f 	and.w	r3, r3, #15
 800179a:	3b04      	subs	r3, #4
 800179c:	0112      	lsls	r2, r2, #4
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	440b      	add	r3, r1
 80017a2:	761a      	strb	r2, [r3, #24]
}
 80017a4:	bf00      	nop
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000e100 	.word	0xe000e100
 80017b4:	e000ed00 	.word	0xe000ed00

080017b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b089      	sub	sp, #36	; 0x24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f003 0307 	and.w	r3, r3, #7
 80017ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f1c3 0307 	rsb	r3, r3, #7
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	bf28      	it	cs
 80017d6:	2304      	movcs	r3, #4
 80017d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	3304      	adds	r3, #4
 80017de:	2b06      	cmp	r3, #6
 80017e0:	d902      	bls.n	80017e8 <NVIC_EncodePriority+0x30>
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3b03      	subs	r3, #3
 80017e6:	e000      	b.n	80017ea <NVIC_EncodePriority+0x32>
 80017e8:	2300      	movs	r3, #0
 80017ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	401a      	ands	r2, r3
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001800:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	fa01 f303 	lsl.w	r3, r1, r3
 800180a:	43d9      	mvns	r1, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001810:	4313      	orrs	r3, r2
         );
}
 8001812:	4618      	mov	r0, r3
 8001814:	3724      	adds	r7, #36	; 0x24
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
	...

08001820 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	3b01      	subs	r3, #1
 800182c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001830:	d301      	bcc.n	8001836 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001832:	2301      	movs	r3, #1
 8001834:	e00f      	b.n	8001856 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001836:	4a0a      	ldr	r2, [pc, #40]	; (8001860 <SysTick_Config+0x40>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3b01      	subs	r3, #1
 800183c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800183e:	210f      	movs	r1, #15
 8001840:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001844:	f7ff ff8e 	bl	8001764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <SysTick_Config+0x40>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800184e:	4b04      	ldr	r3, [pc, #16]	; (8001860 <SysTick_Config+0x40>)
 8001850:	2207      	movs	r2, #7
 8001852:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	e000e010 	.word	0xe000e010

08001864 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ff47 	bl	8001700 <__NVIC_SetPriorityGrouping>
}
 8001872:	bf00      	nop
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b086      	sub	sp, #24
 800187e:	af00      	add	r7, sp, #0
 8001880:	4603      	mov	r3, r0
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800188c:	f7ff ff5c 	bl	8001748 <__NVIC_GetPriorityGrouping>
 8001890:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	6978      	ldr	r0, [r7, #20]
 8001898:	f7ff ff8e 	bl	80017b8 <NVIC_EncodePriority>
 800189c:	4602      	mov	r2, r0
 800189e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a2:	4611      	mov	r1, r2
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff5d 	bl	8001764 <__NVIC_SetPriority>
}
 80018aa:	bf00      	nop
 80018ac:	3718      	adds	r7, #24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffb0 	bl	8001820 <SysTick_Config>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b087      	sub	sp, #28
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018d6:	2300      	movs	r3, #0
 80018d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018da:	e17f      	b.n	8001bdc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	2101      	movs	r1, #1
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	fa01 f303 	lsl.w	r3, r1, r3
 80018e8:	4013      	ands	r3, r2
 80018ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f000 8171 	beq.w	8001bd6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d005      	beq.n	800190c <HAL_GPIO_Init+0x40>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d130      	bne.n	800196e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001942:	2201      	movs	r2, #1
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	f003 0201 	and.w	r2, r3, #1
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b03      	cmp	r3, #3
 8001978:	d118      	bne.n	80019ac <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001980:	2201      	movs	r2, #1
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	08db      	lsrs	r3, r3, #3
 8001996:	f003 0201 	and.w	r2, r3, #1
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d017      	beq.n	80019e8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d123      	bne.n	8001a3c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	08da      	lsrs	r2, r3, #3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3208      	adds	r2, #8
 80019fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a00:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	220f      	movs	r2, #15
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	08da      	lsrs	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3208      	adds	r2, #8
 8001a36:	6939      	ldr	r1, [r7, #16]
 8001a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	2203      	movs	r2, #3
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 0203 	and.w	r2, r3, #3
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	f000 80ac 	beq.w	8001bd6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	4b5f      	ldr	r3, [pc, #380]	; (8001bfc <HAL_GPIO_Init+0x330>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	4a5e      	ldr	r2, [pc, #376]	; (8001bfc <HAL_GPIO_Init+0x330>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6613      	str	r3, [r2, #96]	; 0x60
 8001a8a:	4b5c      	ldr	r3, [pc, #368]	; (8001bfc <HAL_GPIO_Init+0x330>)
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a96:	4a5a      	ldr	r2, [pc, #360]	; (8001c00 <HAL_GPIO_Init+0x334>)
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	089b      	lsrs	r3, r3, #2
 8001a9c:	3302      	adds	r3, #2
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f003 0303 	and.w	r3, r3, #3
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	220f      	movs	r2, #15
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	693a      	ldr	r2, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ac0:	d025      	beq.n	8001b0e <HAL_GPIO_Init+0x242>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4f      	ldr	r2, [pc, #316]	; (8001c04 <HAL_GPIO_Init+0x338>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01f      	beq.n	8001b0a <HAL_GPIO_Init+0x23e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4e      	ldr	r2, [pc, #312]	; (8001c08 <HAL_GPIO_Init+0x33c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d019      	beq.n	8001b06 <HAL_GPIO_Init+0x23a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4d      	ldr	r2, [pc, #308]	; (8001c0c <HAL_GPIO_Init+0x340>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0x236>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4c      	ldr	r2, [pc, #304]	; (8001c10 <HAL_GPIO_Init+0x344>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00d      	beq.n	8001afe <HAL_GPIO_Init+0x232>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4b      	ldr	r2, [pc, #300]	; (8001c14 <HAL_GPIO_Init+0x348>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d007      	beq.n	8001afa <HAL_GPIO_Init+0x22e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4a      	ldr	r2, [pc, #296]	; (8001c18 <HAL_GPIO_Init+0x34c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_GPIO_Init+0x22a>
 8001af2:	2306      	movs	r3, #6
 8001af4:	e00c      	b.n	8001b10 <HAL_GPIO_Init+0x244>
 8001af6:	2307      	movs	r3, #7
 8001af8:	e00a      	b.n	8001b10 <HAL_GPIO_Init+0x244>
 8001afa:	2305      	movs	r3, #5
 8001afc:	e008      	b.n	8001b10 <HAL_GPIO_Init+0x244>
 8001afe:	2304      	movs	r3, #4
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x244>
 8001b02:	2303      	movs	r3, #3
 8001b04:	e004      	b.n	8001b10 <HAL_GPIO_Init+0x244>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_Init+0x244>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x244>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	697a      	ldr	r2, [r7, #20]
 8001b12:	f002 0203 	and.w	r2, r2, #3
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b20:	4937      	ldr	r1, [pc, #220]	; (8001c00 <HAL_GPIO_Init+0x334>)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b2e:	4b3b      	ldr	r3, [pc, #236]	; (8001c1c <HAL_GPIO_Init+0x350>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b52:	4a32      	ldr	r2, [pc, #200]	; (8001c1c <HAL_GPIO_Init+0x350>)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b58:	4b30      	ldr	r3, [pc, #192]	; (8001c1c <HAL_GPIO_Init+0x350>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b7c:	4a27      	ldr	r2, [pc, #156]	; (8001c1c <HAL_GPIO_Init+0x350>)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b82:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <HAL_GPIO_Init+0x350>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ba6:	4a1d      	ldr	r2, [pc, #116]	; (8001c1c <HAL_GPIO_Init+0x350>)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bac:	4b1b      	ldr	r3, [pc, #108]	; (8001c1c <HAL_GPIO_Init+0x350>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bd0:	4a12      	ldr	r2, [pc, #72]	; (8001c1c <HAL_GPIO_Init+0x350>)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	fa22 f303 	lsr.w	r3, r2, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f47f ae78 	bne.w	80018dc <HAL_GPIO_Init+0x10>
  }
}
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop
 8001bf0:	371c      	adds	r7, #28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	40010000 	.word	0x40010000
 8001c04:	48000400 	.word	0x48000400
 8001c08:	48000800 	.word	0x48000800
 8001c0c:	48000c00 	.word	0x48000c00
 8001c10:	48001000 	.word	0x48001000
 8001c14:	48001400 	.word	0x48001400
 8001c18:	48001800 	.word	0x48001800
 8001c1c:	40010400 	.word	0x40010400

08001c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c30:	787b      	ldrb	r3, [r7, #1]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e081      	b.n	8001d66 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7ff f85a 	bl	8000d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2224      	movs	r2, #36	; 0x24
 8001c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0201 	bic.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ca0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d107      	bne.n	8001cca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	e006      	b.n	8001cd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d104      	bne.n	8001cea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ce8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cfc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d0c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	430a      	orrs	r2, r1
 8001d26:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69d9      	ldr	r1, [r3, #28]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1a      	ldr	r2, [r3, #32]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2220      	movs	r2, #32
 8001d52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d64:	2300      	movs	r3, #0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b088      	sub	sp, #32
 8001d74:	af02      	add	r7, sp, #8
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	607a      	str	r2, [r7, #4]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	817b      	strh	r3, [r7, #10]
 8001d80:	4613      	mov	r3, r2
 8001d82:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	f040 80da 	bne.w	8001f46 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_I2C_Master_Transmit+0x30>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e0d3      	b.n	8001f48 <HAL_I2C_Master_Transmit+0x1d8>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001da8:	f7ff fc7a 	bl	80016a0 <HAL_GetTick>
 8001dac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2319      	movs	r3, #25
 8001db4:	2201      	movs	r2, #1
 8001db6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	f000 faed 	bl	800239a <I2C_WaitOnFlagUntilTimeout>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e0be      	b.n	8001f48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2221      	movs	r2, #33	; 0x21
 8001dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2210      	movs	r2, #16
 8001dd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	893a      	ldrh	r2, [r7, #8]
 8001dea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2200      	movs	r2, #0
 8001df0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2bff      	cmp	r3, #255	; 0xff
 8001dfa:	d90e      	bls.n	8001e1a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	22ff      	movs	r2, #255	; 0xff
 8001e00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	8979      	ldrh	r1, [r7, #10]
 8001e0a:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 fce4 	bl	80027e0 <I2C_TransferConfig>
 8001e18:	e06c      	b.n	8001ef4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	8979      	ldrh	r1, [r7, #10]
 8001e2c:	4b48      	ldr	r3, [pc, #288]	; (8001f50 <HAL_I2C_Master_Transmit+0x1e0>)
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 fcd3 	bl	80027e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001e3a:	e05b      	b.n	8001ef4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	6a39      	ldr	r1, [r7, #32]
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f000 faea 	bl	800241a <I2C_WaitOnTXISFlagUntilTimeout>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e07b      	b.n	8001f48 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	781a      	ldrb	r2, [r3, #0]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d034      	beq.n	8001ef4 <HAL_I2C_Master_Transmit+0x184>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d130      	bne.n	8001ef4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	2180      	movs	r1, #128	; 0x80
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 fa7c 	bl	800239a <I2C_WaitOnFlagUntilTimeout>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e04d      	b.n	8001f48 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	2bff      	cmp	r3, #255	; 0xff
 8001eb4:	d90e      	bls.n	8001ed4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	22ff      	movs	r2, #255	; 0xff
 8001eba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	8979      	ldrh	r1, [r7, #10]
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 fc87 	bl	80027e0 <I2C_TransferConfig>
 8001ed2:	e00f      	b.n	8001ef4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	8979      	ldrh	r1, [r7, #10]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eee:	68f8      	ldr	r0, [r7, #12]
 8001ef0:	f000 fc76 	bl	80027e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d19e      	bne.n	8001e3c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001efe:	697a      	ldr	r2, [r7, #20]
 8001f00:	6a39      	ldr	r1, [r7, #32]
 8001f02:	68f8      	ldr	r0, [r7, #12]
 8001f04:	f000 fac9 	bl	800249a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e01a      	b.n	8001f48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2220      	movs	r2, #32
 8001f18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_I2C_Master_Transmit+0x1e4>)
 8001f26:	400b      	ands	r3, r1
 8001f28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2220      	movs	r2, #32
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001f46:	2302      	movs	r3, #2
  }
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	80002000 	.word	0x80002000
 8001f54:	fe00e800 	.word	0xfe00e800

08001f58 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af02      	add	r7, sp, #8
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	461a      	mov	r2, r3
 8001f64:	460b      	mov	r3, r1
 8001f66:	817b      	strh	r3, [r7, #10]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	f040 80db 	bne.w	8002130 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_I2C_Master_Receive+0x30>
 8001f84:	2302      	movs	r3, #2
 8001f86:	e0d4      	b.n	8002132 <HAL_I2C_Master_Receive+0x1da>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f90:	f7ff fb86 	bl	80016a0 <HAL_GetTick>
 8001f94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2319      	movs	r3, #25
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 f9f9 	bl	800239a <I2C_WaitOnFlagUntilTimeout>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e0bf      	b.n	8002132 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2222      	movs	r2, #34	; 0x22
 8001fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	893a      	ldrh	r2, [r7, #8]
 8001fd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	2bff      	cmp	r3, #255	; 0xff
 8001fe2:	d90e      	bls.n	8002002 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	22ff      	movs	r2, #255	; 0xff
 8001fe8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	8979      	ldrh	r1, [r7, #10]
 8001ff2:	4b52      	ldr	r3, [pc, #328]	; (800213c <HAL_I2C_Master_Receive+0x1e4>)
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 fbf0 	bl	80027e0 <I2C_TransferConfig>
 8002000:	e06d      	b.n	80020de <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002006:	b29a      	uxth	r2, r3
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002010:	b2da      	uxtb	r2, r3
 8002012:	8979      	ldrh	r1, [r7, #10]
 8002014:	4b49      	ldr	r3, [pc, #292]	; (800213c <HAL_I2C_Master_Receive+0x1e4>)
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 fbdf 	bl	80027e0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002022:	e05c      	b.n	80020de <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	6a39      	ldr	r1, [r7, #32]
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fa73 	bl	8002514 <I2C_WaitOnRXNEFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e07c      	b.n	8002132 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002054:	3b01      	subs	r3, #1
 8002056:	b29a      	uxth	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002060:	b29b      	uxth	r3, r3
 8002062:	3b01      	subs	r3, #1
 8002064:	b29a      	uxth	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800206e:	b29b      	uxth	r3, r3
 8002070:	2b00      	cmp	r3, #0
 8002072:	d034      	beq.n	80020de <HAL_I2C_Master_Receive+0x186>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	d130      	bne.n	80020de <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	2200      	movs	r2, #0
 8002084:	2180      	movs	r1, #128	; 0x80
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f987 	bl	800239a <I2C_WaitOnFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e04d      	b.n	8002132 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209a:	b29b      	uxth	r3, r3
 800209c:	2bff      	cmp	r3, #255	; 0xff
 800209e:	d90e      	bls.n	80020be <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	22ff      	movs	r2, #255	; 0xff
 80020a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	8979      	ldrh	r1, [r7, #10]
 80020ae:	2300      	movs	r3, #0
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f000 fb92 	bl	80027e0 <I2C_TransferConfig>
 80020bc:	e00f      	b.n	80020de <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	8979      	ldrh	r1, [r7, #10]
 80020d0:	2300      	movs	r3, #0
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 fb81 	bl	80027e0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d19d      	bne.n	8002024 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	6a39      	ldr	r1, [r7, #32]
 80020ec:	68f8      	ldr	r0, [r7, #12]
 80020ee:	f000 f9d4 	bl	800249a <I2C_WaitOnSTOPFlagUntilTimeout>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e01a      	b.n	8002132 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2220      	movs	r2, #32
 8002102:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6859      	ldr	r1, [r3, #4]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <HAL_I2C_Master_Receive+0x1e8>)
 8002110:	400b      	ands	r3, r1
 8002112:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e000      	b.n	8002132 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002130:	2302      	movs	r3, #2
  }
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	80002400 	.word	0x80002400
 8002140:	fe00e800 	.word	0xfe00e800

08002144 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	; 0x28
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	603b      	str	r3, [r7, #0]
 8002150:	460b      	mov	r3, r1
 8002152:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b20      	cmp	r3, #32
 8002162:	f040 80f1 	bne.w	8002348 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002174:	d101      	bne.n	800217a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8002176:	2302      	movs	r3, #2
 8002178:	e0e7      	b.n	800234a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002180:	2b01      	cmp	r3, #1
 8002182:	d101      	bne.n	8002188 <HAL_I2C_IsDeviceReady+0x44>
 8002184:	2302      	movs	r3, #2
 8002186:	e0e0      	b.n	800234a <HAL_I2C_IsDeviceReady+0x206>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2224      	movs	r2, #36	; 0x24
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d107      	bne.n	80021b6 <HAL_I2C_IsDeviceReady+0x72>
 80021a6:	897b      	ldrh	r3, [r7, #10]
 80021a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021b4:	e004      	b.n	80021c0 <HAL_I2C_IsDeviceReady+0x7c>
 80021b6:	897b      	ldrh	r3, [r7, #10]
 80021b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021bc:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80021c6:	f7ff fa6b 	bl	80016a0 <HAL_GetTick>
 80021ca:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	f003 0320 	and.w	r3, r3, #32
 80021d6:	2b20      	cmp	r3, #32
 80021d8:	bf0c      	ite	eq
 80021da:	2301      	moveq	r3, #1
 80021dc:	2300      	movne	r3, #0
 80021de:	b2db      	uxtb	r3, r3
 80021e0:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	699b      	ldr	r3, [r3, #24]
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b10      	cmp	r3, #16
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80021f8:	e034      	b.n	8002264 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002200:	d01a      	beq.n	8002238 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002202:	f7ff fa4d 	bl	80016a0 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d302      	bcc.n	8002218 <HAL_I2C_IsDeviceReady+0xd4>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10f      	bne.n	8002238 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	f043 0220 	orr.w	r2, r3, #32
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e088      	b.n	800234a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f003 0320 	and.w	r3, r3, #32
 8002242:	2b20      	cmp	r3, #32
 8002244:	bf0c      	ite	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	2300      	movne	r3, #0
 800224a:	b2db      	uxtb	r3, r3
 800224c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f003 0310 	and.w	r3, r3, #16
 8002258:	2b10      	cmp	r3, #16
 800225a:	bf0c      	ite	eq
 800225c:	2301      	moveq	r3, #1
 800225e:	2300      	movne	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002264:	7ffb      	ldrb	r3, [r7, #31]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d102      	bne.n	8002270 <HAL_I2C_IsDeviceReady+0x12c>
 800226a:	7fbb      	ldrb	r3, [r7, #30]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d0c4      	beq.n	80021fa <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	f003 0310 	and.w	r3, r3, #16
 800227a:	2b10      	cmp	r3, #16
 800227c:	d01a      	beq.n	80022b4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2200      	movs	r2, #0
 8002286:	2120      	movs	r1, #32
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 f886 	bl	800239a <I2C_WaitOnFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e058      	b.n	800234a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2220      	movs	r2, #32
 800229e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e04a      	b.n	800234a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2200      	movs	r2, #0
 80022bc:	2120      	movs	r1, #32
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f86b 	bl	800239a <I2C_WaitOnFlagUntilTimeout>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e03d      	b.n	800234a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2210      	movs	r2, #16
 80022d4:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2220      	movs	r2, #32
 80022dc:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d118      	bne.n	8002318 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	685a      	ldr	r2, [r3, #4]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022f4:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	9300      	str	r3, [sp, #0]
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	2200      	movs	r2, #0
 80022fe:	2120      	movs	r1, #32
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 f84a 	bl	800239a <I2C_WaitOnFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e01c      	b.n	800234a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2220      	movs	r2, #32
 8002316:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	3301      	adds	r3, #1
 800231c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	429a      	cmp	r2, r3
 8002324:	f63f af3b 	bhi.w	800219e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002334:	f043 0220 	orr.w	r2, r3, #32
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002348:	2302      	movs	r3, #2
  }
}
 800234a:	4618      	mov	r0, r3
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b02      	cmp	r3, #2
 8002366:	d103      	bne.n	8002370 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2200      	movs	r2, #0
 800236e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b01      	cmp	r3, #1
 800237c:	d007      	beq.n	800238e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699a      	ldr	r2, [r3, #24]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0201 	orr.w	r2, r2, #1
 800238c:	619a      	str	r2, [r3, #24]
  }
}
 800238e:	bf00      	nop
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	b084      	sub	sp, #16
 800239e:	af00      	add	r7, sp, #0
 80023a0:	60f8      	str	r0, [r7, #12]
 80023a2:	60b9      	str	r1, [r7, #8]
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	4613      	mov	r3, r2
 80023a8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023aa:	e022      	b.n	80023f2 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023b2:	d01e      	beq.n	80023f2 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b4:	f7ff f974 	bl	80016a0 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d302      	bcc.n	80023ca <I2C_WaitOnFlagUntilTimeout+0x30>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d113      	bne.n	80023f2 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f043 0220 	orr.w	r2, r3, #32
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2220      	movs	r2, #32
 80023da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e00f      	b.n	8002412 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	699a      	ldr	r2, [r3, #24]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	4013      	ands	r3, r2
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	429a      	cmp	r2, r3
 8002400:	bf0c      	ite	eq
 8002402:	2301      	moveq	r3, #1
 8002404:	2300      	movne	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	79fb      	ldrb	r3, [r7, #7]
 800240c:	429a      	cmp	r2, r3
 800240e:	d0cd      	beq.n	80023ac <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3710      	adds	r7, #16
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b084      	sub	sp, #16
 800241e:	af00      	add	r7, sp, #0
 8002420:	60f8      	str	r0, [r7, #12]
 8002422:	60b9      	str	r1, [r7, #8]
 8002424:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002426:	e02c      	b.n	8002482 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	68b9      	ldr	r1, [r7, #8]
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f8eb 	bl	8002608 <I2C_IsErrorOccurred>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e02a      	b.n	8002492 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002442:	d01e      	beq.n	8002482 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002444:	f7ff f92c 	bl	80016a0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	429a      	cmp	r2, r3
 8002452:	d302      	bcc.n	800245a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d113      	bne.n	8002482 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f043 0220 	orr.w	r2, r3, #32
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2220      	movs	r2, #32
 800246a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e007      	b.n	8002492 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b02      	cmp	r3, #2
 800248e:	d1cb      	bne.n	8002428 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	60f8      	str	r0, [r7, #12]
 80024a2:	60b9      	str	r1, [r7, #8]
 80024a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024a6:	e028      	b.n	80024fa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	68b9      	ldr	r1, [r7, #8]
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 f8ab 	bl	8002608 <I2C_IsErrorOccurred>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e026      	b.n	800250a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024bc:	f7ff f8f0 	bl	80016a0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d302      	bcc.n	80024d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d113      	bne.n	80024fa <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d6:	f043 0220 	orr.w	r2, r3, #32
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e007      	b.n	800250a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f003 0320 	and.w	r3, r3, #32
 8002504:	2b20      	cmp	r3, #32
 8002506:	d1cf      	bne.n	80024a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
	...

08002514 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002520:	e064      	b.n	80025ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f86e 	bl	8002608 <I2C_IsErrorOccurred>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e062      	b.n	80025fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0320 	and.w	r3, r3, #32
 8002540:	2b20      	cmp	r3, #32
 8002542:	d138      	bne.n	80025b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b04      	cmp	r3, #4
 8002550:	d105      	bne.n	800255e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	e04e      	b.n	80025fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	f003 0310 	and.w	r3, r3, #16
 8002568:	2b10      	cmp	r3, #16
 800256a:	d107      	bne.n	800257c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2210      	movs	r2, #16
 8002572:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2204      	movs	r2, #4
 8002578:	645a      	str	r2, [r3, #68]	; 0x44
 800257a:	e002      	b.n	8002582 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2220      	movs	r2, #32
 8002588:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4b1b      	ldr	r3, [pc, #108]	; (8002604 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002596:	400b      	ands	r3, r1
 8002598:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2220      	movs	r2, #32
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e022      	b.n	80025fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025b6:	f7ff f873 	bl	80016a0 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d302      	bcc.n	80025cc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10f      	bne.n	80025ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d0:	f043 0220 	orr.w	r2, r3, #32
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2220      	movs	r2, #32
 80025dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e007      	b.n	80025fc <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f003 0304 	and.w	r3, r3, #4
 80025f6:	2b04      	cmp	r3, #4
 80025f8:	d193      	bne.n	8002522 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	fe00e800 	.word	0xfe00e800

08002608 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002622:	2300      	movs	r3, #0
 8002624:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f003 0310 	and.w	r3, r3, #16
 8002630:	2b00      	cmp	r3, #0
 8002632:	d075      	beq.n	8002720 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2210      	movs	r2, #16
 800263a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800263c:	e056      	b.n	80026ec <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002644:	d052      	beq.n	80026ec <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002646:	f7ff f82b 	bl	80016a0 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <I2C_IsErrorOccurred+0x54>
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d147      	bne.n	80026ec <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002666:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800266e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800267a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800267e:	d12e      	bne.n	80026de <I2C_IsErrorOccurred+0xd6>
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002686:	d02a      	beq.n	80026de <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	2b20      	cmp	r3, #32
 800268c:	d027      	beq.n	80026de <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800269c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800269e:	f7fe ffff 	bl	80016a0 <HAL_GetTick>
 80026a2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026a4:	e01b      	b.n	80026de <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026a6:	f7fe fffb 	bl	80016a0 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b19      	cmp	r3, #25
 80026b2:	d914      	bls.n	80026de <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	f043 0220 	orr.w	r2, r3, #32
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d1dc      	bne.n	80026a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b20      	cmp	r3, #32
 80026f8:	d003      	beq.n	8002702 <I2C_IsErrorOccurred+0xfa>
 80026fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d09d      	beq.n	800263e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002702:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002706:	2b00      	cmp	r3, #0
 8002708:	d103      	bne.n	8002712 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2220      	movs	r2, #32
 8002710:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	f043 0304 	orr.w	r3, r3, #4
 8002718:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699b      	ldr	r3, [r3, #24]
 8002726:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00b      	beq.n	800274a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002742:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00b      	beq.n	800276c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002754:	6a3b      	ldr	r3, [r7, #32]
 8002756:	f043 0308 	orr.w	r3, r3, #8
 800275a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002764:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800276c:	69bb      	ldr	r3, [r7, #24]
 800276e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00b      	beq.n	800278e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002786:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800278e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01c      	beq.n	80027d0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f7ff fddb 	bl	8002352 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <I2C_IsErrorOccurred+0x1d4>)
 80027a8:	400b      	ands	r3, r1
 80027aa:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	431a      	orrs	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80027d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3728      	adds	r7, #40	; 0x28
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	fe00e800 	.word	0xfe00e800

080027e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	607b      	str	r3, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	817b      	strh	r3, [r7, #10]
 80027ee:	4613      	mov	r3, r2
 80027f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027f2:	897b      	ldrh	r3, [r7, #10]
 80027f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027f8:	7a7b      	ldrb	r3, [r7, #9]
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002800:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	4313      	orrs	r3, r2
 800280a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800280e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	0d5b      	lsrs	r3, r3, #21
 800281a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <I2C_TransferConfig+0x60>)
 8002820:	430b      	orrs	r3, r1
 8002822:	43db      	mvns	r3, r3
 8002824:	ea02 0103 	and.w	r1, r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	430a      	orrs	r2, r1
 8002830:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002832:	bf00      	nop
 8002834:	371c      	adds	r7, #28
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	03ff63ff 	.word	0x03ff63ff

08002844 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b20      	cmp	r3, #32
 8002858:	d138      	bne.n	80028cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002864:	2302      	movs	r3, #2
 8002866:	e032      	b.n	80028ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2224      	movs	r2, #36	; 0x24
 8002874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002896:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	e000      	b.n	80028ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028da:	b480      	push	{r7}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b20      	cmp	r3, #32
 80028ee:	d139      	bne.n	8002964 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d101      	bne.n	80028fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028fa:	2302      	movs	r3, #2
 80028fc:	e033      	b.n	8002966 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2224      	movs	r2, #36	; 0x24
 800290a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0201 	bic.w	r2, r2, #1
 800291c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800292c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	4313      	orrs	r3, r2
 8002936:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	e000      	b.n	8002966 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002964:	2302      	movs	r3, #2
  }
}
 8002966:	4618      	mov	r0, r3
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <HAL_PWREx_GetVoltageRange+0x18>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40007000 	.word	0x40007000

08002990 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800299e:	d130      	bne.n	8002a02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80029a0:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80029a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029ac:	d038      	beq.n	8002a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80029ae:	4b20      	ldr	r3, [pc, #128]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80029b6:	4a1e      	ldr	r2, [pc, #120]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80029be:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2232      	movs	r2, #50	; 0x32
 80029c4:	fb02 f303 	mul.w	r3, r2, r3
 80029c8:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	0c9b      	lsrs	r3, r3, #18
 80029d0:	3301      	adds	r3, #1
 80029d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029d4:	e002      	b.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3b01      	subs	r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029dc:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e8:	d102      	bne.n	80029f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f2      	bne.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fc:	d110      	bne.n	8002a20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e00f      	b.n	8002a22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a02:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a0e:	d007      	beq.n	8002a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a18:	4a05      	ldr	r2, [pc, #20]	; (8002a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40007000 	.word	0x40007000
 8002a34:	20000000 	.word	0x20000000
 8002a38:	431bde83 	.word	0x431bde83

08002a3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e3d4      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a4e:	4ba1      	ldr	r3, [pc, #644]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a58:	4b9e      	ldr	r3, [pc, #632]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	f000 80e4 	beq.w	8002c38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d007      	beq.n	8002a86 <HAL_RCC_OscConfig+0x4a>
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	2b0c      	cmp	r3, #12
 8002a7a:	f040 808b 	bne.w	8002b94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	f040 8087 	bne.w	8002b94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a86:	4b93      	ldr	r3, [pc, #588]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d005      	beq.n	8002a9e <HAL_RCC_OscConfig+0x62>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d101      	bne.n	8002a9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e3ac      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1a      	ldr	r2, [r3, #32]
 8002aa2:	4b8c      	ldr	r3, [pc, #560]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x7c>
 8002aae:	4b89      	ldr	r3, [pc, #548]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab6:	e005      	b.n	8002ac4 <HAL_RCC_OscConfig+0x88>
 8002ab8:	4b86      	ldr	r3, [pc, #536]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d223      	bcs.n	8002b10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fd41 	bl	8003554 <RCC_SetFlashLatencyFromMSIRange>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e38d      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002adc:	4b7d      	ldr	r3, [pc, #500]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a7c      	ldr	r2, [pc, #496]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002ae2:	f043 0308 	orr.w	r3, r3, #8
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	4b7a      	ldr	r3, [pc, #488]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a1b      	ldr	r3, [r3, #32]
 8002af4:	4977      	ldr	r1, [pc, #476]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002afa:	4b76      	ldr	r3, [pc, #472]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	021b      	lsls	r3, r3, #8
 8002b08:	4972      	ldr	r1, [pc, #456]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
 8002b0e:	e025      	b.n	8002b5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b10:	4b70      	ldr	r3, [pc, #448]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a6f      	ldr	r2, [pc, #444]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b16:	f043 0308 	orr.w	r3, r3, #8
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b6d      	ldr	r3, [pc, #436]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	496a      	ldr	r1, [pc, #424]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b2e:	4b69      	ldr	r3, [pc, #420]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	4965      	ldr	r1, [pc, #404]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d109      	bne.n	8002b5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a1b      	ldr	r3, [r3, #32]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f000 fd01 	bl	8003554 <RCC_SetFlashLatencyFromMSIRange>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e34d      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b5c:	f000 fc36 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b5c      	ldr	r3, [pc, #368]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	495a      	ldr	r1, [pc, #360]	; (8002cd8 <HAL_RCC_OscConfig+0x29c>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
 8002b78:	4a58      	ldr	r2, [pc, #352]	; (8002cdc <HAL_RCC_OscConfig+0x2a0>)
 8002b7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b7c:	4b58      	ldr	r3, [pc, #352]	; (8002ce0 <HAL_RCC_OscConfig+0x2a4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fe fd3d 	bl	8001600 <HAL_InitTick>
 8002b86:	4603      	mov	r3, r0
 8002b88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d052      	beq.n	8002c36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002b90:	7bfb      	ldrb	r3, [r7, #15]
 8002b92:	e331      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d032      	beq.n	8002c02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b9c:	4b4d      	ldr	r3, [pc, #308]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a4c      	ldr	r2, [pc, #304]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ba8:	f7fe fd7a 	bl	80016a0 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bb0:	f7fe fd76 	bl	80016a0 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e31a      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bc2:	4b44      	ldr	r3, [pc, #272]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002bce:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a40      	ldr	r2, [pc, #256]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002bd4:	f043 0308 	orr.w	r3, r3, #8
 8002bd8:	6013      	str	r3, [r2, #0]
 8002bda:	4b3e      	ldr	r3, [pc, #248]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	493b      	ldr	r1, [pc, #236]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bec:	4b39      	ldr	r3, [pc, #228]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	021b      	lsls	r3, r3, #8
 8002bfa:	4936      	ldr	r1, [pc, #216]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	604b      	str	r3, [r1, #4]
 8002c00:	e01a      	b.n	8002c38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c02:	4b34      	ldr	r3, [pc, #208]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a33      	ldr	r2, [pc, #204]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c0e:	f7fe fd47 	bl	80016a0 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c16:	f7fe fd43 	bl	80016a0 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e2e7      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002c28:	4b2a      	ldr	r3, [pc, #168]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0302 	and.w	r3, r3, #2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1f0      	bne.n	8002c16 <HAL_RCC_OscConfig+0x1da>
 8002c34:	e000      	b.n	8002c38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d074      	beq.n	8002d2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d005      	beq.n	8002c56 <HAL_RCC_OscConfig+0x21a>
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	2b0c      	cmp	r3, #12
 8002c4e:	d10e      	bne.n	8002c6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d10b      	bne.n	8002c6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c56:	4b1f      	ldr	r3, [pc, #124]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d064      	beq.n	8002d2c <HAL_RCC_OscConfig+0x2f0>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d160      	bne.n	8002d2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e2c4      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c76:	d106      	bne.n	8002c86 <HAL_RCC_OscConfig+0x24a>
 8002c78:	4b16      	ldr	r3, [pc, #88]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a15      	ldr	r2, [pc, #84]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c82:	6013      	str	r3, [r2, #0]
 8002c84:	e01d      	b.n	8002cc2 <HAL_RCC_OscConfig+0x286>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c8e:	d10c      	bne.n	8002caa <HAL_RCC_OscConfig+0x26e>
 8002c90:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0f      	ldr	r2, [pc, #60]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0c      	ldr	r2, [pc, #48]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e00b      	b.n	8002cc2 <HAL_RCC_OscConfig+0x286>
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a06      	ldr	r2, [pc, #24]	; (8002cd4 <HAL_RCC_OscConfig+0x298>)
 8002cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d01c      	beq.n	8002d04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cca:	f7fe fce9 	bl	80016a0 <HAL_GetTick>
 8002cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cd0:	e011      	b.n	8002cf6 <HAL_RCC_OscConfig+0x2ba>
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	080052c0 	.word	0x080052c0
 8002cdc:	20000000 	.word	0x20000000
 8002ce0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7fe fcdc 	bl	80016a0 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	; 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e280      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cf6:	4baf      	ldr	r3, [pc, #700]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x2a8>
 8002d02:	e014      	b.n	8002d2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d04:	f7fe fccc 	bl	80016a0 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7fe fcc8 	bl	80016a0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	; 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e26c      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002d1e:	4ba5      	ldr	r3, [pc, #660]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2d0>
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d060      	beq.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_OscConfig+0x310>
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d119      	bne.n	8002d7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d116      	bne.n	8002d7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d4c:	4b99      	ldr	r3, [pc, #612]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_OscConfig+0x328>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e249      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b93      	ldr	r3, [pc, #588]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	061b      	lsls	r3, r3, #24
 8002d72:	4990      	ldr	r1, [pc, #576]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d78:	e040      	b.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d023      	beq.n	8002dca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d82:	4b8c      	ldr	r3, [pc, #560]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a8b      	ldr	r2, [pc, #556]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8e:	f7fe fc87 	bl	80016a0 <HAL_GetTick>
 8002d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d94:	e008      	b.n	8002da8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d96:	f7fe fc83 	bl	80016a0 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e227      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002da8:	4b82      	ldr	r3, [pc, #520]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d0f0      	beq.n	8002d96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db4:	4b7f      	ldr	r3, [pc, #508]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	061b      	lsls	r3, r3, #24
 8002dc2:	497c      	ldr	r1, [pc, #496]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	604b      	str	r3, [r1, #4]
 8002dc8:	e018      	b.n	8002dfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dca:	4b7a      	ldr	r3, [pc, #488]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a79      	ldr	r2, [pc, #484]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd6:	f7fe fc63 	bl	80016a0 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dde:	f7fe fc5f 	bl	80016a0 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e203      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002df0:	4b70      	ldr	r3, [pc, #448]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0308 	and.w	r3, r3, #8
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d03c      	beq.n	8002e82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01c      	beq.n	8002e4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e10:	4b68      	ldr	r3, [pc, #416]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e16:	4a67      	ldr	r2, [pc, #412]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e20:	f7fe fc3e 	bl	80016a0 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e28:	f7fe fc3a 	bl	80016a0 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e1de      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e3a:	4b5e      	ldr	r3, [pc, #376]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ef      	beq.n	8002e28 <HAL_RCC_OscConfig+0x3ec>
 8002e48:	e01b      	b.n	8002e82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4a:	4b5a      	ldr	r3, [pc, #360]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5a:	f7fe fc21 	bl	80016a0 <HAL_GetTick>
 8002e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e60:	e008      	b.n	8002e74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e62:	f7fe fc1d 	bl	80016a0 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e1c1      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e74:	4b4f      	ldr	r3, [pc, #316]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1ef      	bne.n	8002e62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0304 	and.w	r3, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80a6 	beq.w	8002fdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e90:	2300      	movs	r3, #0
 8002e92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e94:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10d      	bne.n	8002ebc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea0:	4b44      	ldr	r3, [pc, #272]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	4a43      	ldr	r2, [pc, #268]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8002eac:	4b41      	ldr	r3, [pc, #260]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	60bb      	str	r3, [r7, #8]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ebc:	4b3e      	ldr	r3, [pc, #248]	; (8002fb8 <HAL_RCC_OscConfig+0x57c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d118      	bne.n	8002efa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ec8:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_RCC_OscConfig+0x57c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a3a      	ldr	r2, [pc, #232]	; (8002fb8 <HAL_RCC_OscConfig+0x57c>)
 8002ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed4:	f7fe fbe4 	bl	80016a0 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eda:	e008      	b.n	8002eee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002edc:	f7fe fbe0 	bl	80016a0 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e184      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eee:	4b32      	ldr	r3, [pc, #200]	; (8002fb8 <HAL_RCC_OscConfig+0x57c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0f0      	beq.n	8002edc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d108      	bne.n	8002f14 <HAL_RCC_OscConfig+0x4d8>
 8002f02:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f08:	4a2a      	ldr	r2, [pc, #168]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f12:	e024      	b.n	8002f5e <HAL_RCC_OscConfig+0x522>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b05      	cmp	r3, #5
 8002f1a:	d110      	bne.n	8002f3e <HAL_RCC_OscConfig+0x502>
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f22:	4a24      	ldr	r2, [pc, #144]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f2c:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f32:	4a20      	ldr	r2, [pc, #128]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f34:	f043 0301 	orr.w	r3, r3, #1
 8002f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f3c:	e00f      	b.n	8002f5e <HAL_RCC_OscConfig+0x522>
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f44:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	4a17      	ldr	r2, [pc, #92]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f56:	f023 0304 	bic.w	r3, r3, #4
 8002f5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d016      	beq.n	8002f94 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f66:	f7fe fb9b 	bl	80016a0 <HAL_GetTick>
 8002f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f6c:	e00a      	b.n	8002f84 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f6e:	f7fe fb97 	bl	80016a0 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d901      	bls.n	8002f84 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e139      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_OscConfig+0x578>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0ed      	beq.n	8002f6e <HAL_RCC_OscConfig+0x532>
 8002f92:	e01a      	b.n	8002fca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f94:	f7fe fb84 	bl	80016a0 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f9a:	e00f      	b.n	8002fbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9c:	f7fe fb80 	bl	80016a0 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d906      	bls.n	8002fbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e122      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000
 8002fb8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002fbc:	4b90      	ldr	r3, [pc, #576]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e8      	bne.n	8002f9c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fca:	7ffb      	ldrb	r3, [r7, #31]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd0:	4b8b      	ldr	r3, [pc, #556]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	4a8a      	ldr	r2, [pc, #552]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8002fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 8108 	beq.w	80031f6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	f040 80d0 	bne.w	8003190 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ff0:	4b83      	ldr	r3, [pc, #524]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	f003 0203 	and.w	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	429a      	cmp	r2, r3
 8003002:	d130      	bne.n	8003066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300e:	3b01      	subs	r3, #1
 8003010:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d127      	bne.n	8003066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003020:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d11f      	bne.n	8003066 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003030:	2a07      	cmp	r2, #7
 8003032:	bf14      	ite	ne
 8003034:	2201      	movne	r2, #1
 8003036:	2200      	moveq	r2, #0
 8003038:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800303a:	4293      	cmp	r3, r2
 800303c:	d113      	bne.n	8003066 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003048:	085b      	lsrs	r3, r3, #1
 800304a:	3b01      	subs	r3, #1
 800304c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800304e:	429a      	cmp	r2, r3
 8003050:	d109      	bne.n	8003066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	3b01      	subs	r3, #1
 8003060:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003062:	429a      	cmp	r2, r3
 8003064:	d06e      	beq.n	8003144 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b0c      	cmp	r3, #12
 800306a:	d069      	beq.n	8003140 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800306c:	4b64      	ldr	r3, [pc, #400]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d105      	bne.n	8003084 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003078:	4b61      	ldr	r3, [pc, #388]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e0b7      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003088:	4b5d      	ldr	r3, [pc, #372]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a5c      	ldr	r2, [pc, #368]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 800308e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003092:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003094:	f7fe fb04 	bl	80016a0 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800309c:	f7fe fb00 	bl	80016a0 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e0a4      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ae:	4b54      	ldr	r3, [pc, #336]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d1f0      	bne.n	800309c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ba:	4b51      	ldr	r3, [pc, #324]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	4b51      	ldr	r3, [pc, #324]	; (8003204 <HAL_RCC_OscConfig+0x7c8>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80030ca:	3a01      	subs	r2, #1
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	4311      	orrs	r1, r2
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030d4:	0212      	lsls	r2, r2, #8
 80030d6:	4311      	orrs	r1, r2
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80030dc:	0852      	lsrs	r2, r2, #1
 80030de:	3a01      	subs	r2, #1
 80030e0:	0552      	lsls	r2, r2, #21
 80030e2:	4311      	orrs	r1, r2
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030e8:	0852      	lsrs	r2, r2, #1
 80030ea:	3a01      	subs	r2, #1
 80030ec:	0652      	lsls	r2, r2, #25
 80030ee:	4311      	orrs	r1, r2
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030f4:	0912      	lsrs	r2, r2, #4
 80030f6:	0452      	lsls	r2, r2, #17
 80030f8:	430a      	orrs	r2, r1
 80030fa:	4941      	ldr	r1, [pc, #260]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003100:	4b3f      	ldr	r3, [pc, #252]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a3e      	ldr	r2, [pc, #248]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800310c:	4b3c      	ldr	r3, [pc, #240]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	4a3b      	ldr	r2, [pc, #236]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003116:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003118:	f7fe fac2 	bl	80016a0 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003120:	f7fe fabe 	bl	80016a0 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e062      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003132:	4b33      	ldr	r3, [pc, #204]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800313e:	e05a      	b.n	80031f6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e059      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003144:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d152      	bne.n	80031f6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003150:	4b2b      	ldr	r3, [pc, #172]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2a      	ldr	r2, [pc, #168]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800315a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800315c:	4b28      	ldr	r3, [pc, #160]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4a27      	ldr	r2, [pc, #156]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003166:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003168:	f7fe fa9a 	bl	80016a0 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe fa96 	bl	80016a0 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e03a      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003182:	4b1f      	ldr	r3, [pc, #124]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x734>
 800318e:	e032      	b.n	80031f6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	2b0c      	cmp	r3, #12
 8003194:	d02d      	beq.n	80031f2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a19      	ldr	r2, [pc, #100]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 800319c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031a0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80031a2:	4b17      	ldr	r3, [pc, #92]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d105      	bne.n	80031ba <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80031ae:	4b14      	ldr	r3, [pc, #80]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	4a13      	ldr	r2, [pc, #76]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80031b4:	f023 0303 	bic.w	r3, r3, #3
 80031b8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	4a10      	ldr	r2, [pc, #64]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80031c0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80031c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031c8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ca:	f7fe fa69 	bl	80016a0 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d2:	f7fe fa65 	bl	80016a0 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e009      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031e4:	4b06      	ldr	r3, [pc, #24]	; (8003200 <HAL_RCC_OscConfig+0x7c4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x796>
 80031f0:	e001      	b.n	80031f6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40021000 	.word	0x40021000
 8003204:	f99d808c 	.word	0xf99d808c

08003208 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0c8      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800321c:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d910      	bls.n	800324c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322a:	4b63      	ldr	r3, [pc, #396]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f023 0207 	bic.w	r2, r3, #7
 8003232:	4961      	ldr	r1, [pc, #388]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	4313      	orrs	r3, r2
 8003238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800323a:	4b5f      	ldr	r3, [pc, #380]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	429a      	cmp	r2, r3
 8003246:	d001      	beq.n	800324c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0b0      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d04c      	beq.n	80032f2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d107      	bne.n	8003270 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003260:	4b56      	ldr	r3, [pc, #344]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d121      	bne.n	80032b0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e09e      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d107      	bne.n	8003288 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003278:	4b50      	ldr	r3, [pc, #320]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d115      	bne.n	80032b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e092      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003290:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e086      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032a0:	4b46      	ldr	r3, [pc, #280]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e07e      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032b0:	4b42      	ldr	r3, [pc, #264]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f023 0203 	bic.w	r2, r3, #3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	493f      	ldr	r1, [pc, #252]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032c2:	f7fe f9ed 	bl	80016a0 <HAL_GetTick>
 80032c6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ca:	f7fe f9e9 	bl	80016a0 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e066      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e0:	4b36      	ldr	r3, [pc, #216]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 020c 	and.w	r2, r3, #12
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d1eb      	bne.n	80032ca <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d008      	beq.n	8003310 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032fe:	4b2f      	ldr	r3, [pc, #188]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	492c      	ldr	r1, [pc, #176]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 800330c:	4313      	orrs	r3, r2
 800330e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003310:	4b29      	ldr	r3, [pc, #164]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d210      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f023 0207 	bic.w	r2, r3, #7
 8003326:	4924      	ldr	r1, [pc, #144]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <HAL_RCC_ClockConfig+0x1b0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0307 	and.w	r3, r3, #7
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e036      	b.n	80033ae <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d008      	beq.n	800335e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800334c:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	4918      	ldr	r1, [pc, #96]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 800335a:	4313      	orrs	r3, r2
 800335c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d009      	beq.n	800337e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800336a:	4b14      	ldr	r3, [pc, #80]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	00db      	lsls	r3, r3, #3
 8003378:	4910      	ldr	r1, [pc, #64]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800337e:	f000 f825 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8003382:	4602      	mov	r2, r0
 8003384:	4b0d      	ldr	r3, [pc, #52]	; (80033bc <HAL_RCC_ClockConfig+0x1b4>)
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	091b      	lsrs	r3, r3, #4
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	490c      	ldr	r1, [pc, #48]	; (80033c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	5ccb      	ldrb	r3, [r1, r3]
 8003392:	f003 031f 	and.w	r3, r3, #31
 8003396:	fa22 f303 	lsr.w	r3, r2, r3
 800339a:	4a0a      	ldr	r2, [pc, #40]	; (80033c4 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800339e:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <HAL_RCC_ClockConfig+0x1c0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe f92c 	bl	8001600 <HAL_InitTick>
 80033a8:	4603      	mov	r3, r0
 80033aa:	72fb      	strb	r3, [r7, #11]

  return status;
 80033ac:	7afb      	ldrb	r3, [r7, #11]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40022000 	.word	0x40022000
 80033bc:	40021000 	.word	0x40021000
 80033c0:	080052c0 	.word	0x080052c0
 80033c4:	20000000 	.word	0x20000000
 80033c8:	20000004 	.word	0x20000004

080033cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b089      	sub	sp, #36	; 0x24
 80033d0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61fb      	str	r3, [r7, #28]
 80033d6:	2300      	movs	r3, #0
 80033d8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033da:	4b3e      	ldr	r3, [pc, #248]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e4:	4b3b      	ldr	r3, [pc, #236]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x34>
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	2b0c      	cmp	r3, #12
 80033f8:	d121      	bne.n	800343e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d11e      	bne.n	800343e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003400:	4b34      	ldr	r3, [pc, #208]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 0308 	and.w	r3, r3, #8
 8003408:	2b00      	cmp	r3, #0
 800340a:	d107      	bne.n	800341c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800340c:	4b31      	ldr	r3, [pc, #196]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800340e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003412:	0a1b      	lsrs	r3, r3, #8
 8003414:	f003 030f 	and.w	r3, r3, #15
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	e005      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800341c:	4b2d      	ldr	r3, [pc, #180]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	091b      	lsrs	r3, r3, #4
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003428:	4a2b      	ldr	r2, [pc, #172]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003430:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10d      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800343c:	e00a      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b04      	cmp	r3, #4
 8003442:	d102      	bne.n	800344a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003444:	4b25      	ldr	r3, [pc, #148]	; (80034dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	e004      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d101      	bne.n	8003454 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003450:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003452:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b0c      	cmp	r3, #12
 8003458:	d134      	bne.n	80034c4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800345a:	4b1e      	ldr	r3, [pc, #120]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f003 0303 	and.w	r3, r3, #3
 8003462:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d003      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0xa6>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d003      	beq.n	8003478 <HAL_RCC_GetSysClockFreq+0xac>
 8003470:	e005      	b.n	800347e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003472:	4b1a      	ldr	r3, [pc, #104]	; (80034dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003474:	617b      	str	r3, [r7, #20]
      break;
 8003476:	e005      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003478:	4b19      	ldr	r3, [pc, #100]	; (80034e0 <HAL_RCC_GetSysClockFreq+0x114>)
 800347a:	617b      	str	r3, [r7, #20]
      break;
 800347c:	e002      	b.n	8003484 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	617b      	str	r3, [r7, #20]
      break;
 8003482:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003484:	4b13      	ldr	r3, [pc, #76]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	3301      	adds	r3, #1
 8003490:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	fb02 f203 	mul.w	r2, r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80034aa:	4b0a      	ldr	r3, [pc, #40]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x108>)
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	0e5b      	lsrs	r3, r3, #25
 80034b0:	f003 0303 	and.w	r3, r3, #3
 80034b4:	3301      	adds	r3, #1
 80034b6:	005b      	lsls	r3, r3, #1
 80034b8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80034c4:	69bb      	ldr	r3, [r7, #24]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3724      	adds	r7, #36	; 0x24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
 80034d8:	080052d8 	.word	0x080052d8
 80034dc:	00f42400 	.word	0x00f42400
 80034e0:	007a1200 	.word	0x007a1200

080034e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20000000 	.word	0x20000000

080034fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003500:	f7ff fff0 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003504:	4602      	mov	r2, r0
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0a1b      	lsrs	r3, r3, #8
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	4904      	ldr	r1, [pc, #16]	; (8003524 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003512:	5ccb      	ldrb	r3, [r1, r3]
 8003514:	f003 031f 	and.w	r3, r3, #31
 8003518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800351c:	4618      	mov	r0, r3
 800351e:	bd80      	pop	{r7, pc}
 8003520:	40021000 	.word	0x40021000
 8003524:	080052d0 	.word	0x080052d0

08003528 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800352c:	f7ff ffda 	bl	80034e4 <HAL_RCC_GetHCLKFreq>
 8003530:	4602      	mov	r2, r0
 8003532:	4b06      	ldr	r3, [pc, #24]	; (800354c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	0adb      	lsrs	r3, r3, #11
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	4904      	ldr	r1, [pc, #16]	; (8003550 <HAL_RCC_GetPCLK2Freq+0x28>)
 800353e:	5ccb      	ldrb	r3, [r1, r3]
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	080052d0 	.word	0x080052d0

08003554 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003560:	4b2a      	ldr	r3, [pc, #168]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800356c:	f7ff fa02 	bl	8002974 <HAL_PWREx_GetVoltageRange>
 8003570:	6178      	str	r0, [r7, #20]
 8003572:	e014      	b.n	800359e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003574:	4b25      	ldr	r3, [pc, #148]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	4a24      	ldr	r2, [pc, #144]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800357a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800357e:	6593      	str	r3, [r2, #88]	; 0x58
 8003580:	4b22      	ldr	r3, [pc, #136]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800358c:	f7ff f9f2 	bl	8002974 <HAL_PWREx_GetVoltageRange>
 8003590:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4b1e      	ldr	r3, [pc, #120]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003596:	4a1d      	ldr	r2, [pc, #116]	; (800360c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035a4:	d10b      	bne.n	80035be <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b80      	cmp	r3, #128	; 0x80
 80035aa:	d919      	bls.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2ba0      	cmp	r3, #160	; 0xa0
 80035b0:	d902      	bls.n	80035b8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035b2:	2302      	movs	r3, #2
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	e013      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035b8:	2301      	movs	r3, #1
 80035ba:	613b      	str	r3, [r7, #16]
 80035bc:	e010      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b80      	cmp	r3, #128	; 0x80
 80035c2:	d902      	bls.n	80035ca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80035c4:	2303      	movs	r3, #3
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	e00a      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b80      	cmp	r3, #128	; 0x80
 80035ce:	d102      	bne.n	80035d6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80035d0:	2302      	movs	r3, #2
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	e004      	b.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b70      	cmp	r3, #112	; 0x70
 80035da:	d101      	bne.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80035dc:	2301      	movs	r3, #1
 80035de:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f023 0207 	bic.w	r2, r3, #7
 80035e8:	4909      	ldr	r1, [pc, #36]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80035f0:	4b07      	ldr	r3, [pc, #28]	; (8003610 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d001      	beq.n	8003602 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021000 	.word	0x40021000
 8003610:	40022000 	.word	0x40022000

08003614 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800361c:	2300      	movs	r3, #0
 800361e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003620:	2300      	movs	r3, #0
 8003622:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800362c:	2b00      	cmp	r3, #0
 800362e:	d041      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003634:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003638:	d02a      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800363a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800363e:	d824      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003640:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003644:	d008      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003646:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800364a:	d81e      	bhi.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003650:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003654:	d010      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003656:	e018      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003658:	4b86      	ldr	r3, [pc, #536]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	4a85      	ldr	r2, [pc, #532]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003662:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003664:	e015      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3304      	adds	r3, #4
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fabb 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003676:	e00c      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3320      	adds	r3, #32
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f000 fba6 	bl	8003dd0 <RCCEx_PLLSAI2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003688:	e003      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	74fb      	strb	r3, [r7, #19]
      break;
 800368e:	e000      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003692:	7cfb      	ldrb	r3, [r7, #19]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003698:	4b76      	ldr	r3, [pc, #472]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a6:	4973      	ldr	r1, [pc, #460]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80036ae:	e001      	b.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d041      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036c8:	d02a      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80036ca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036ce:	d824      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036d4:	d008      	beq.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80036d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036da:	d81e      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d00a      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80036e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e4:	d010      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036e6:	e018      	b.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80036e8:	4b62      	ldr	r3, [pc, #392]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	4a61      	ldr	r2, [pc, #388]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80036f4:	e015      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	3304      	adds	r3, #4
 80036fa:	2100      	movs	r1, #0
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fa73 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003706:	e00c      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3320      	adds	r3, #32
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fb5e 	bl	8003dd0 <RCCEx_PLLSAI2_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003718:	e003      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	74fb      	strb	r3, [r7, #19]
      break;
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003728:	4b52      	ldr	r3, [pc, #328]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800372e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003736:	494f      	ldr	r1, [pc, #316]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800373e:	e001      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003740:	7cfb      	ldrb	r3, [r7, #19]
 8003742:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 80a0 	beq.w	8003892 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003756:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800375a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003762:	2301      	movs	r3, #1
 8003764:	e000      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003766:	2300      	movs	r3, #0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00d      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800376e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003770:	4a40      	ldr	r2, [pc, #256]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003776:	6593      	str	r3, [r2, #88]	; 0x58
 8003778:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800377a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003784:	2301      	movs	r3, #1
 8003786:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003788:	4b3b      	ldr	r3, [pc, #236]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a3a      	ldr	r2, [pc, #232]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800378e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003792:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003794:	f7fd ff84 	bl	80016a0 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800379a:	e009      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800379c:	f7fd ff80 	bl	80016a0 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d902      	bls.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	74fb      	strb	r3, [r7, #19]
        break;
 80037ae:	e005      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80037b0:	4b31      	ldr	r3, [pc, #196]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0ef      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80037bc:	7cfb      	ldrb	r3, [r7, #19]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d15c      	bne.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80037c2:	4b2c      	ldr	r3, [pc, #176]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01f      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d019      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80037e0:	4b24      	ldr	r3, [pc, #144]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037ec:	4b21      	ldr	r3, [pc, #132]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f2:	4a20      	ldr	r2, [pc, #128]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800380c:	4a19      	ldr	r2, [pc, #100]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d016      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fd ff3f 	bl	80016a0 <HAL_GetTick>
 8003822:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003824:	e00b      	b.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fd ff3b 	bl	80016a0 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	; 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d902      	bls.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	74fb      	strb	r3, [r7, #19]
            break;
 800383c:	e006      	b.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ec      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800384c:	7cfb      	ldrb	r3, [r7, #19]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10c      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003852:	4b08      	ldr	r3, [pc, #32]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003862:	4904      	ldr	r1, [pc, #16]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800386a:	e009      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800386c:	7cfb      	ldrb	r3, [r7, #19]
 800386e:	74bb      	strb	r3, [r7, #18]
 8003870:	e006      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003880:	7c7b      	ldrb	r3, [r7, #17]
 8003882:	2b01      	cmp	r3, #1
 8003884:	d105      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003886:	4b9e      	ldr	r3, [pc, #632]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388a:	4a9d      	ldr	r2, [pc, #628]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800388c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003890:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800389e:	4b98      	ldr	r3, [pc, #608]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038a4:	f023 0203 	bic.w	r2, r3, #3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ac:	4994      	ldr	r1, [pc, #592]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0302 	and.w	r3, r3, #2
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00a      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038c0:	4b8f      	ldr	r3, [pc, #572]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038c6:	f023 020c 	bic.w	r2, r3, #12
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	498c      	ldr	r1, [pc, #560]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00a      	beq.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038e2:	4b87      	ldr	r3, [pc, #540]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f0:	4983      	ldr	r1, [pc, #524]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0308 	and.w	r3, r3, #8
 8003900:	2b00      	cmp	r3, #0
 8003902:	d00a      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003904:	4b7e      	ldr	r3, [pc, #504]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800390a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003912:	497b      	ldr	r1, [pc, #492]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	4313      	orrs	r3, r2
 8003916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0310 	and.w	r3, r3, #16
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003926:	4b76      	ldr	r3, [pc, #472]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800392c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003934:	4972      	ldr	r1, [pc, #456]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003936:	4313      	orrs	r3, r2
 8003938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0320 	and.w	r3, r3, #32
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00a      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003948:	4b6d      	ldr	r3, [pc, #436]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003956:	496a      	ldr	r1, [pc, #424]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003958:	4313      	orrs	r3, r2
 800395a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800396a:	4b65      	ldr	r3, [pc, #404]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003970:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003978:	4961      	ldr	r1, [pc, #388]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800397a:	4313      	orrs	r3, r2
 800397c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800398c:	4b5c      	ldr	r3, [pc, #368]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800398e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399a:	4959      	ldr	r1, [pc, #356]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800399c:	4313      	orrs	r3, r2
 800399e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00a      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80039ae:	4b54      	ldr	r3, [pc, #336]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039bc:	4950      	ldr	r1, [pc, #320]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d00a      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039d0:	4b4b      	ldr	r3, [pc, #300]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039de:	4948      	ldr	r1, [pc, #288]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039f2:	4b43      	ldr	r3, [pc, #268]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a00:	493f      	ldr	r1, [pc, #252]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d028      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a14:	4b3a      	ldr	r3, [pc, #232]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a22:	4937      	ldr	r1, [pc, #220]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a32:	d106      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a34:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a31      	ldr	r2, [pc, #196]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a3e:	60d3      	str	r3, [r2, #12]
 8003a40:	e011      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a4a:	d10c      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	3304      	adds	r3, #4
 8003a50:	2101      	movs	r1, #1
 8003a52:	4618      	mov	r0, r3
 8003a54:	f000 f8c8 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003a5c:	7cfb      	ldrb	r3, [r7, #19]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003a62:	7cfb      	ldrb	r3, [r7, #19]
 8003a64:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d028      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a72:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a78:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a80:	491f      	ldr	r1, [pc, #124]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003a90:	d106      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a92:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	4a1a      	ldr	r2, [pc, #104]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a9c:	60d3      	str	r3, [r2, #12]
 8003a9e:	e011      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3304      	adds	r3, #4
 8003aae:	2101      	movs	r1, #1
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f899 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003aba:	7cfb      	ldrb	r3, [r7, #19]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003ac0:	7cfb      	ldrb	r3, [r7, #19]
 8003ac2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d02b      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ade:	4908      	ldr	r1, [pc, #32]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003aea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003aee:	d109      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a02      	ldr	r2, [pc, #8]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003afa:	60d3      	str	r3, [r2, #12]
 8003afc:	e014      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003afe:	bf00      	nop
 8003b00:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3304      	adds	r3, #4
 8003b12:	2101      	movs	r1, #1
 8003b14:	4618      	mov	r0, r3
 8003b16:	f000 f867 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b1e:	7cfb      	ldrb	r3, [r7, #19]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003b24:	7cfb      	ldrb	r3, [r7, #19]
 8003b26:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d02f      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b34:	4b2b      	ldr	r3, [pc, #172]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b42:	4928      	ldr	r1, [pc, #160]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b52:	d10d      	bne.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	3304      	adds	r3, #4
 8003b58:	2102      	movs	r1, #2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 f844 	bl	8003be8 <RCCEx_PLLSAI1_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d014      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	74bb      	strb	r3, [r7, #18]
 8003b6e:	e011      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	3320      	adds	r3, #32
 8003b7e:	2102      	movs	r1, #2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f000 f925 	bl	8003dd0 <RCCEx_PLLSAI2_Config>
 8003b86:	4603      	mov	r3, r0
 8003b88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d001      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003b90:	7cfb      	ldrb	r3, [r7, #19]
 8003b92:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d00a      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ba0:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bae:	490d      	ldr	r1, [pc, #52]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00b      	beq.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003bc2:	4b08      	ldr	r3, [pc, #32]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd2:	4904      	ldr	r1, [pc, #16]	; (8003be4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003bda:	7cbb      	ldrb	r3, [r7, #18]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	40021000 	.word	0x40021000

08003be8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003bf6:	4b75      	ldr	r3, [pc, #468]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f003 0303 	and.w	r3, r3, #3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d018      	beq.n	8003c34 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003c02:	4b72      	ldr	r3, [pc, #456]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0203 	and.w	r2, r3, #3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d10d      	bne.n	8003c2e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
       ||
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d009      	beq.n	8003c2e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003c1a:	4b6c      	ldr	r3, [pc, #432]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	091b      	lsrs	r3, r3, #4
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	1c5a      	adds	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
       ||
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d047      	beq.n	8003cbe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
 8003c32:	e044      	b.n	8003cbe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d018      	beq.n	8003c6e <RCCEx_PLLSAI1_Config+0x86>
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d825      	bhi.n	8003c8c <RCCEx_PLLSAI1_Config+0xa4>
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d002      	beq.n	8003c4a <RCCEx_PLLSAI1_Config+0x62>
 8003c44:	2b02      	cmp	r3, #2
 8003c46:	d009      	beq.n	8003c5c <RCCEx_PLLSAI1_Config+0x74>
 8003c48:	e020      	b.n	8003c8c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003c4a:	4b60      	ldr	r3, [pc, #384]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d11d      	bne.n	8003c92 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c5a:	e01a      	b.n	8003c92 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c5c:	4b5b      	ldr	r3, [pc, #364]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d116      	bne.n	8003c96 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c6c:	e013      	b.n	8003c96 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c6e:	4b57      	ldr	r3, [pc, #348]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c7a:	4b54      	ldr	r3, [pc, #336]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c8a:	e006      	b.n	8003c9a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c90:	e004      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c92:	bf00      	nop
 8003c94:	e002      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c96:	bf00      	nop
 8003c98:	e000      	b.n	8003c9c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003c9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10d      	bne.n	8003cbe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ca2:	4b4a      	ldr	r3, [pc, #296]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6819      	ldr	r1, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	4944      	ldr	r1, [pc, #272]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d17d      	bne.n	8003dc0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003cc4:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a40      	ldr	r2, [pc, #256]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cd0:	f7fd fce6 	bl	80016a0 <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cd6:	e009      	b.n	8003cec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003cd8:	f7fd fce2 	bl	80016a0 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d902      	bls.n	8003cec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	73fb      	strb	r3, [r7, #15]
        break;
 8003cea:	e005      	b.n	8003cf8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003cec:	4b37      	ldr	r3, [pc, #220]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1ef      	bne.n	8003cd8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d160      	bne.n	8003dc0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d111      	bne.n	8003d28 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d04:	4b31      	ldr	r3, [pc, #196]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	6892      	ldr	r2, [r2, #8]
 8003d14:	0211      	lsls	r1, r2, #8
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	68d2      	ldr	r2, [r2, #12]
 8003d1a:	0912      	lsrs	r2, r2, #4
 8003d1c:	0452      	lsls	r2, r2, #17
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	492a      	ldr	r1, [pc, #168]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	610b      	str	r3, [r1, #16]
 8003d26:	e027      	b.n	8003d78 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d112      	bne.n	8003d54 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d2e:	4b27      	ldr	r3, [pc, #156]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003d36:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6892      	ldr	r2, [r2, #8]
 8003d3e:	0211      	lsls	r1, r2, #8
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6912      	ldr	r2, [r2, #16]
 8003d44:	0852      	lsrs	r2, r2, #1
 8003d46:	3a01      	subs	r2, #1
 8003d48:	0552      	lsls	r2, r2, #21
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	491f      	ldr	r1, [pc, #124]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	610b      	str	r3, [r1, #16]
 8003d52:	e011      	b.n	8003d78 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003d54:	4b1d      	ldr	r3, [pc, #116]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d5c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	6892      	ldr	r2, [r2, #8]
 8003d64:	0211      	lsls	r1, r2, #8
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6952      	ldr	r2, [r2, #20]
 8003d6a:	0852      	lsrs	r2, r2, #1
 8003d6c:	3a01      	subs	r2, #1
 8003d6e:	0652      	lsls	r2, r2, #25
 8003d70:	430a      	orrs	r2, r1
 8003d72:	4916      	ldr	r1, [pc, #88]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003d78:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003d7e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7fd fc8c 	bl	80016a0 <HAL_GetTick>
 8003d88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003d8a:	e009      	b.n	8003da0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003d8c:	f7fd fc88 	bl	80016a0 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d902      	bls.n	8003da0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d9e:	e005      	b.n	8003dac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003da0:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0ef      	beq.n	8003d8c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d106      	bne.n	8003dc0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003db2:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003db4:	691a      	ldr	r2, [r3, #16]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	4904      	ldr	r1, [pc, #16]	; (8003dcc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000

08003dd0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003dde:	4b6a      	ldr	r3, [pc, #424]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d018      	beq.n	8003e1c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003dea:	4b67      	ldr	r3, [pc, #412]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0203 	and.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d10d      	bne.n	8003e16 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
       ||
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003e02:	4b61      	ldr	r3, [pc, #388]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	f003 0307 	and.w	r3, r3, #7
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	685b      	ldr	r3, [r3, #4]
       ||
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d047      	beq.n	8003ea6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
 8003e1a:	e044      	b.n	8003ea6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d018      	beq.n	8003e56 <RCCEx_PLLSAI2_Config+0x86>
 8003e24:	2b03      	cmp	r3, #3
 8003e26:	d825      	bhi.n	8003e74 <RCCEx_PLLSAI2_Config+0xa4>
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d002      	beq.n	8003e32 <RCCEx_PLLSAI2_Config+0x62>
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d009      	beq.n	8003e44 <RCCEx_PLLSAI2_Config+0x74>
 8003e30:	e020      	b.n	8003e74 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e32:	4b55      	ldr	r3, [pc, #340]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d11d      	bne.n	8003e7a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e42:	e01a      	b.n	8003e7a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e44:	4b50      	ldr	r3, [pc, #320]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d116      	bne.n	8003e7e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e54:	e013      	b.n	8003e7e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e56:	4b4c      	ldr	r3, [pc, #304]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10f      	bne.n	8003e82 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e62:	4b49      	ldr	r3, [pc, #292]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e72:	e006      	b.n	8003e82 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
      break;
 8003e78:	e004      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e7a:	bf00      	nop
 8003e7c:	e002      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e7e:	bf00      	nop
 8003e80:	e000      	b.n	8003e84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003e82:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10d      	bne.n	8003ea6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e8a:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6819      	ldr	r1, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	430b      	orrs	r3, r1
 8003ea0:	4939      	ldr	r1, [pc, #228]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d167      	bne.n	8003f7c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003eac:	4b36      	ldr	r3, [pc, #216]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a35      	ldr	r2, [pc, #212]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003eb8:	f7fd fbf2 	bl	80016a0 <HAL_GetTick>
 8003ebc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ebe:	e009      	b.n	8003ed4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003ec0:	f7fd fbee 	bl	80016a0 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d902      	bls.n	8003ed4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	73fb      	strb	r3, [r7, #15]
        break;
 8003ed2:	e005      	b.n	8003ee0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003ed4:	4b2c      	ldr	r3, [pc, #176]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1ef      	bne.n	8003ec0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d14a      	bne.n	8003f7c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d111      	bne.n	8003f10 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003eec:	4b26      	ldr	r3, [pc, #152]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003ef4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6892      	ldr	r2, [r2, #8]
 8003efc:	0211      	lsls	r1, r2, #8
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	68d2      	ldr	r2, [r2, #12]
 8003f02:	0912      	lsrs	r2, r2, #4
 8003f04:	0452      	lsls	r2, r2, #17
 8003f06:	430a      	orrs	r2, r1
 8003f08:	491f      	ldr	r1, [pc, #124]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	614b      	str	r3, [r1, #20]
 8003f0e:	e011      	b.n	8003f34 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003f10:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	6892      	ldr	r2, [r2, #8]
 8003f20:	0211      	lsls	r1, r2, #8
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	6912      	ldr	r2, [r2, #16]
 8003f26:	0852      	lsrs	r2, r2, #1
 8003f28:	3a01      	subs	r2, #1
 8003f2a:	0652      	lsls	r2, r2, #25
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	4916      	ldr	r1, [pc, #88]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003f34:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a13      	ldr	r2, [pc, #76]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f40:	f7fd fbae 	bl	80016a0 <HAL_GetTick>
 8003f44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f46:	e009      	b.n	8003f5c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003f48:	f7fd fbaa 	bl	80016a0 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d902      	bls.n	8003f5c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	73fb      	strb	r3, [r7, #15]
          break;
 8003f5a:	e005      	b.n	8003f68 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0ef      	beq.n	8003f48 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d106      	bne.n	8003f7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003f6e:	4b06      	ldr	r3, [pc, #24]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f70:	695a      	ldr	r2, [r3, #20]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	4904      	ldr	r1, [pc, #16]	; (8003f88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000

08003f8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e040      	b.n	8004020 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fd fa80 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2224      	movs	r2, #36	; 0x24
 8003fb8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0201 	bic.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f8c0 	bl	8004150 <UART_SetConfig>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e022      	b.n	8004020 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d002      	beq.n	8003fe8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 fb3e 	bl	8004664 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ff6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689a      	ldr	r2, [r3, #8]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004006:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fbc5 	bl	80047a8 <UART_CheckIdleState>
 800401e:	4603      	mov	r3, r0
}
 8004020:	4618      	mov	r0, r3
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	603b      	str	r3, [r7, #0]
 8004034:	4613      	mov	r3, r2
 8004036:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800403c:	2b20      	cmp	r3, #32
 800403e:	f040 8082 	bne.w	8004146 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_UART_Transmit+0x26>
 8004048:	88fb      	ldrh	r3, [r7, #6]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e07a      	b.n	8004148 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_UART_Transmit+0x38>
 800405c:	2302      	movs	r3, #2
 800405e:	e073      	b.n	8004148 <HAL_UART_Transmit+0x120>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2221      	movs	r2, #33	; 0x21
 8004074:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004076:	f7fd fb13 	bl	80016a0 <HAL_GetTick>
 800407a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	88fa      	ldrh	r2, [r7, #6]
 8004080:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004094:	d108      	bne.n	80040a8 <HAL_UART_Transmit+0x80>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d104      	bne.n	80040a8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	61bb      	str	r3, [r7, #24]
 80040a6:	e003      	b.n	80040b0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80040b8:	e02d      	b.n	8004116 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	9300      	str	r3, [sp, #0]
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2200      	movs	r2, #0
 80040c2:	2180      	movs	r1, #128	; 0x80
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 fbb8 	bl	800483a <UART_WaitOnFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e039      	b.n	8004148 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10b      	bne.n	80040f2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	881a      	ldrh	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040e6:	b292      	uxth	r2, r2
 80040e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	3302      	adds	r3, #2
 80040ee:	61bb      	str	r3, [r7, #24]
 80040f0:	e008      	b.n	8004104 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	781a      	ldrb	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	b292      	uxth	r2, r2
 80040fc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	3301      	adds	r3, #1
 8004102:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1cb      	bne.n	80040ba <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2200      	movs	r2, #0
 800412a:	2140      	movs	r1, #64	; 0x40
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fb84 	bl	800483a <UART_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e005      	b.n	8004148 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004150:	b5b0      	push	{r4, r5, r7, lr}
 8004152:	b088      	sub	sp, #32
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	4313      	orrs	r3, r2
 8004172:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4bad      	ldr	r3, [pc, #692]	; (8004430 <UART_SetConfig+0x2e0>)
 800417c:	4013      	ands	r3, r2
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6812      	ldr	r2, [r2, #0]
 8004182:	69f9      	ldr	r1, [r7, #28]
 8004184:	430b      	orrs	r3, r1
 8004186:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68da      	ldr	r2, [r3, #12]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4aa2      	ldr	r2, [pc, #648]	; (8004434 <UART_SetConfig+0x2e4>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d004      	beq.n	80041b8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69fa      	ldr	r2, [r7, #28]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a99      	ldr	r2, [pc, #612]	; (8004438 <UART_SetConfig+0x2e8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d121      	bne.n	800421a <UART_SetConfig+0xca>
 80041d6:	4b99      	ldr	r3, [pc, #612]	; (800443c <UART_SetConfig+0x2ec>)
 80041d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d817      	bhi.n	8004214 <UART_SetConfig+0xc4>
 80041e4:	a201      	add	r2, pc, #4	; (adr r2, 80041ec <UART_SetConfig+0x9c>)
 80041e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ea:	bf00      	nop
 80041ec:	080041fd 	.word	0x080041fd
 80041f0:	08004209 	.word	0x08004209
 80041f4:	08004203 	.word	0x08004203
 80041f8:	0800420f 	.word	0x0800420f
 80041fc:	2301      	movs	r3, #1
 80041fe:	76fb      	strb	r3, [r7, #27]
 8004200:	e0e7      	b.n	80043d2 <UART_SetConfig+0x282>
 8004202:	2302      	movs	r3, #2
 8004204:	76fb      	strb	r3, [r7, #27]
 8004206:	e0e4      	b.n	80043d2 <UART_SetConfig+0x282>
 8004208:	2304      	movs	r3, #4
 800420a:	76fb      	strb	r3, [r7, #27]
 800420c:	e0e1      	b.n	80043d2 <UART_SetConfig+0x282>
 800420e:	2308      	movs	r3, #8
 8004210:	76fb      	strb	r3, [r7, #27]
 8004212:	e0de      	b.n	80043d2 <UART_SetConfig+0x282>
 8004214:	2310      	movs	r3, #16
 8004216:	76fb      	strb	r3, [r7, #27]
 8004218:	e0db      	b.n	80043d2 <UART_SetConfig+0x282>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a88      	ldr	r2, [pc, #544]	; (8004440 <UART_SetConfig+0x2f0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d132      	bne.n	800428a <UART_SetConfig+0x13a>
 8004224:	4b85      	ldr	r3, [pc, #532]	; (800443c <UART_SetConfig+0x2ec>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b0c      	cmp	r3, #12
 8004230:	d828      	bhi.n	8004284 <UART_SetConfig+0x134>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <UART_SetConfig+0xe8>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800426d 	.word	0x0800426d
 800423c:	08004285 	.word	0x08004285
 8004240:	08004285 	.word	0x08004285
 8004244:	08004285 	.word	0x08004285
 8004248:	08004279 	.word	0x08004279
 800424c:	08004285 	.word	0x08004285
 8004250:	08004285 	.word	0x08004285
 8004254:	08004285 	.word	0x08004285
 8004258:	08004273 	.word	0x08004273
 800425c:	08004285 	.word	0x08004285
 8004260:	08004285 	.word	0x08004285
 8004264:	08004285 	.word	0x08004285
 8004268:	0800427f 	.word	0x0800427f
 800426c:	2300      	movs	r3, #0
 800426e:	76fb      	strb	r3, [r7, #27]
 8004270:	e0af      	b.n	80043d2 <UART_SetConfig+0x282>
 8004272:	2302      	movs	r3, #2
 8004274:	76fb      	strb	r3, [r7, #27]
 8004276:	e0ac      	b.n	80043d2 <UART_SetConfig+0x282>
 8004278:	2304      	movs	r3, #4
 800427a:	76fb      	strb	r3, [r7, #27]
 800427c:	e0a9      	b.n	80043d2 <UART_SetConfig+0x282>
 800427e:	2308      	movs	r3, #8
 8004280:	76fb      	strb	r3, [r7, #27]
 8004282:	e0a6      	b.n	80043d2 <UART_SetConfig+0x282>
 8004284:	2310      	movs	r3, #16
 8004286:	76fb      	strb	r3, [r7, #27]
 8004288:	e0a3      	b.n	80043d2 <UART_SetConfig+0x282>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a6d      	ldr	r2, [pc, #436]	; (8004444 <UART_SetConfig+0x2f4>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d120      	bne.n	80042d6 <UART_SetConfig+0x186>
 8004294:	4b69      	ldr	r3, [pc, #420]	; (800443c <UART_SetConfig+0x2ec>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800429e:	2b30      	cmp	r3, #48	; 0x30
 80042a0:	d013      	beq.n	80042ca <UART_SetConfig+0x17a>
 80042a2:	2b30      	cmp	r3, #48	; 0x30
 80042a4:	d814      	bhi.n	80042d0 <UART_SetConfig+0x180>
 80042a6:	2b20      	cmp	r3, #32
 80042a8:	d009      	beq.n	80042be <UART_SetConfig+0x16e>
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	d810      	bhi.n	80042d0 <UART_SetConfig+0x180>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <UART_SetConfig+0x168>
 80042b2:	2b10      	cmp	r3, #16
 80042b4:	d006      	beq.n	80042c4 <UART_SetConfig+0x174>
 80042b6:	e00b      	b.n	80042d0 <UART_SetConfig+0x180>
 80042b8:	2300      	movs	r3, #0
 80042ba:	76fb      	strb	r3, [r7, #27]
 80042bc:	e089      	b.n	80043d2 <UART_SetConfig+0x282>
 80042be:	2302      	movs	r3, #2
 80042c0:	76fb      	strb	r3, [r7, #27]
 80042c2:	e086      	b.n	80043d2 <UART_SetConfig+0x282>
 80042c4:	2304      	movs	r3, #4
 80042c6:	76fb      	strb	r3, [r7, #27]
 80042c8:	e083      	b.n	80043d2 <UART_SetConfig+0x282>
 80042ca:	2308      	movs	r3, #8
 80042cc:	76fb      	strb	r3, [r7, #27]
 80042ce:	e080      	b.n	80043d2 <UART_SetConfig+0x282>
 80042d0:	2310      	movs	r3, #16
 80042d2:	76fb      	strb	r3, [r7, #27]
 80042d4:	e07d      	b.n	80043d2 <UART_SetConfig+0x282>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a5b      	ldr	r2, [pc, #364]	; (8004448 <UART_SetConfig+0x2f8>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d120      	bne.n	8004322 <UART_SetConfig+0x1d2>
 80042e0:	4b56      	ldr	r3, [pc, #344]	; (800443c <UART_SetConfig+0x2ec>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80042ea:	2bc0      	cmp	r3, #192	; 0xc0
 80042ec:	d013      	beq.n	8004316 <UART_SetConfig+0x1c6>
 80042ee:	2bc0      	cmp	r3, #192	; 0xc0
 80042f0:	d814      	bhi.n	800431c <UART_SetConfig+0x1cc>
 80042f2:	2b80      	cmp	r3, #128	; 0x80
 80042f4:	d009      	beq.n	800430a <UART_SetConfig+0x1ba>
 80042f6:	2b80      	cmp	r3, #128	; 0x80
 80042f8:	d810      	bhi.n	800431c <UART_SetConfig+0x1cc>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <UART_SetConfig+0x1b4>
 80042fe:	2b40      	cmp	r3, #64	; 0x40
 8004300:	d006      	beq.n	8004310 <UART_SetConfig+0x1c0>
 8004302:	e00b      	b.n	800431c <UART_SetConfig+0x1cc>
 8004304:	2300      	movs	r3, #0
 8004306:	76fb      	strb	r3, [r7, #27]
 8004308:	e063      	b.n	80043d2 <UART_SetConfig+0x282>
 800430a:	2302      	movs	r3, #2
 800430c:	76fb      	strb	r3, [r7, #27]
 800430e:	e060      	b.n	80043d2 <UART_SetConfig+0x282>
 8004310:	2304      	movs	r3, #4
 8004312:	76fb      	strb	r3, [r7, #27]
 8004314:	e05d      	b.n	80043d2 <UART_SetConfig+0x282>
 8004316:	2308      	movs	r3, #8
 8004318:	76fb      	strb	r3, [r7, #27]
 800431a:	e05a      	b.n	80043d2 <UART_SetConfig+0x282>
 800431c:	2310      	movs	r3, #16
 800431e:	76fb      	strb	r3, [r7, #27]
 8004320:	e057      	b.n	80043d2 <UART_SetConfig+0x282>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a49      	ldr	r2, [pc, #292]	; (800444c <UART_SetConfig+0x2fc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d125      	bne.n	8004378 <UART_SetConfig+0x228>
 800432c:	4b43      	ldr	r3, [pc, #268]	; (800443c <UART_SetConfig+0x2ec>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004336:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800433a:	d017      	beq.n	800436c <UART_SetConfig+0x21c>
 800433c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004340:	d817      	bhi.n	8004372 <UART_SetConfig+0x222>
 8004342:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004346:	d00b      	beq.n	8004360 <UART_SetConfig+0x210>
 8004348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800434c:	d811      	bhi.n	8004372 <UART_SetConfig+0x222>
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <UART_SetConfig+0x20a>
 8004352:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004356:	d006      	beq.n	8004366 <UART_SetConfig+0x216>
 8004358:	e00b      	b.n	8004372 <UART_SetConfig+0x222>
 800435a:	2300      	movs	r3, #0
 800435c:	76fb      	strb	r3, [r7, #27]
 800435e:	e038      	b.n	80043d2 <UART_SetConfig+0x282>
 8004360:	2302      	movs	r3, #2
 8004362:	76fb      	strb	r3, [r7, #27]
 8004364:	e035      	b.n	80043d2 <UART_SetConfig+0x282>
 8004366:	2304      	movs	r3, #4
 8004368:	76fb      	strb	r3, [r7, #27]
 800436a:	e032      	b.n	80043d2 <UART_SetConfig+0x282>
 800436c:	2308      	movs	r3, #8
 800436e:	76fb      	strb	r3, [r7, #27]
 8004370:	e02f      	b.n	80043d2 <UART_SetConfig+0x282>
 8004372:	2310      	movs	r3, #16
 8004374:	76fb      	strb	r3, [r7, #27]
 8004376:	e02c      	b.n	80043d2 <UART_SetConfig+0x282>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a2d      	ldr	r2, [pc, #180]	; (8004434 <UART_SetConfig+0x2e4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d125      	bne.n	80043ce <UART_SetConfig+0x27e>
 8004382:	4b2e      	ldr	r3, [pc, #184]	; (800443c <UART_SetConfig+0x2ec>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004388:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800438c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004390:	d017      	beq.n	80043c2 <UART_SetConfig+0x272>
 8004392:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004396:	d817      	bhi.n	80043c8 <UART_SetConfig+0x278>
 8004398:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800439c:	d00b      	beq.n	80043b6 <UART_SetConfig+0x266>
 800439e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043a2:	d811      	bhi.n	80043c8 <UART_SetConfig+0x278>
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <UART_SetConfig+0x260>
 80043a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ac:	d006      	beq.n	80043bc <UART_SetConfig+0x26c>
 80043ae:	e00b      	b.n	80043c8 <UART_SetConfig+0x278>
 80043b0:	2300      	movs	r3, #0
 80043b2:	76fb      	strb	r3, [r7, #27]
 80043b4:	e00d      	b.n	80043d2 <UART_SetConfig+0x282>
 80043b6:	2302      	movs	r3, #2
 80043b8:	76fb      	strb	r3, [r7, #27]
 80043ba:	e00a      	b.n	80043d2 <UART_SetConfig+0x282>
 80043bc:	2304      	movs	r3, #4
 80043be:	76fb      	strb	r3, [r7, #27]
 80043c0:	e007      	b.n	80043d2 <UART_SetConfig+0x282>
 80043c2:	2308      	movs	r3, #8
 80043c4:	76fb      	strb	r3, [r7, #27]
 80043c6:	e004      	b.n	80043d2 <UART_SetConfig+0x282>
 80043c8:	2310      	movs	r3, #16
 80043ca:	76fb      	strb	r3, [r7, #27]
 80043cc:	e001      	b.n	80043d2 <UART_SetConfig+0x282>
 80043ce:	2310      	movs	r3, #16
 80043d0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a17      	ldr	r2, [pc, #92]	; (8004434 <UART_SetConfig+0x2e4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	f040 8087 	bne.w	80044ec <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043de:	7efb      	ldrb	r3, [r7, #27]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d837      	bhi.n	8004454 <UART_SetConfig+0x304>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <UART_SetConfig+0x29c>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	08004411 	.word	0x08004411
 80043f0:	08004455 	.word	0x08004455
 80043f4:	08004419 	.word	0x08004419
 80043f8:	08004455 	.word	0x08004455
 80043fc:	0800441f 	.word	0x0800441f
 8004400:	08004455 	.word	0x08004455
 8004404:	08004455 	.word	0x08004455
 8004408:	08004455 	.word	0x08004455
 800440c:	08004427 	.word	0x08004427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004410:	f7ff f874 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 8004414:	6178      	str	r0, [r7, #20]
        break;
 8004416:	e022      	b.n	800445e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004418:	4b0d      	ldr	r3, [pc, #52]	; (8004450 <UART_SetConfig+0x300>)
 800441a:	617b      	str	r3, [r7, #20]
        break;
 800441c:	e01f      	b.n	800445e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800441e:	f7fe ffd5 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8004422:	6178      	str	r0, [r7, #20]
        break;
 8004424:	e01b      	b.n	800445e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800442a:	617b      	str	r3, [r7, #20]
        break;
 800442c:	e017      	b.n	800445e <UART_SetConfig+0x30e>
 800442e:	bf00      	nop
 8004430:	efff69f3 	.word	0xefff69f3
 8004434:	40008000 	.word	0x40008000
 8004438:	40013800 	.word	0x40013800
 800443c:	40021000 	.word	0x40021000
 8004440:	40004400 	.word	0x40004400
 8004444:	40004800 	.word	0x40004800
 8004448:	40004c00 	.word	0x40004c00
 800444c:	40005000 	.word	0x40005000
 8004450:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	76bb      	strb	r3, [r7, #26]
        break;
 800445c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80f1 	beq.w	8004648 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	4613      	mov	r3, r2
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	4413      	add	r3, r2
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	429a      	cmp	r2, r3
 8004474:	d305      	bcc.n	8004482 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	429a      	cmp	r2, r3
 8004480:	d902      	bls.n	8004488 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	76bb      	strb	r3, [r7, #26]
 8004486:	e0df      	b.n	8004648 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	4618      	mov	r0, r3
 800448c:	f04f 0100 	mov.w	r1, #0
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	020b      	lsls	r3, r1, #8
 800449a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800449e:	0202      	lsls	r2, r0, #8
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	6849      	ldr	r1, [r1, #4]
 80044a4:	0849      	lsrs	r1, r1, #1
 80044a6:	4608      	mov	r0, r1
 80044a8:	f04f 0100 	mov.w	r1, #0
 80044ac:	1814      	adds	r4, r2, r0
 80044ae:	eb43 0501 	adc.w	r5, r3, r1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	461a      	mov	r2, r3
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	4620      	mov	r0, r4
 80044be:	4629      	mov	r1, r5
 80044c0:	f7fc fa14 	bl	80008ec <__aeabi_uldivmod>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4613      	mov	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044d2:	d308      	bcc.n	80044e6 <UART_SetConfig+0x396>
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044da:	d204      	bcs.n	80044e6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	60da      	str	r2, [r3, #12]
 80044e4:	e0b0      	b.n	8004648 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	76bb      	strb	r3, [r7, #26]
 80044ea:	e0ad      	b.n	8004648 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044f4:	d15b      	bne.n	80045ae <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80044f6:	7efb      	ldrb	r3, [r7, #27]
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d828      	bhi.n	800454e <UART_SetConfig+0x3fe>
 80044fc:	a201      	add	r2, pc, #4	; (adr r2, 8004504 <UART_SetConfig+0x3b4>)
 80044fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004502:	bf00      	nop
 8004504:	08004529 	.word	0x08004529
 8004508:	08004531 	.word	0x08004531
 800450c:	08004539 	.word	0x08004539
 8004510:	0800454f 	.word	0x0800454f
 8004514:	0800453f 	.word	0x0800453f
 8004518:	0800454f 	.word	0x0800454f
 800451c:	0800454f 	.word	0x0800454f
 8004520:	0800454f 	.word	0x0800454f
 8004524:	08004547 	.word	0x08004547
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004528:	f7fe ffe8 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 800452c:	6178      	str	r0, [r7, #20]
        break;
 800452e:	e013      	b.n	8004558 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004530:	f7fe fffa 	bl	8003528 <HAL_RCC_GetPCLK2Freq>
 8004534:	6178      	str	r0, [r7, #20]
        break;
 8004536:	e00f      	b.n	8004558 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004538:	4b49      	ldr	r3, [pc, #292]	; (8004660 <UART_SetConfig+0x510>)
 800453a:	617b      	str	r3, [r7, #20]
        break;
 800453c:	e00c      	b.n	8004558 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800453e:	f7fe ff45 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 8004542:	6178      	str	r0, [r7, #20]
        break;
 8004544:	e008      	b.n	8004558 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800454a:	617b      	str	r3, [r7, #20]
        break;
 800454c:	e004      	b.n	8004558 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	76bb      	strb	r3, [r7, #26]
        break;
 8004556:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d074      	beq.n	8004648 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	005a      	lsls	r2, r3, #1
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	441a      	add	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004572:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	2b0f      	cmp	r3, #15
 8004578:	d916      	bls.n	80045a8 <UART_SetConfig+0x458>
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004580:	d212      	bcs.n	80045a8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	b29b      	uxth	r3, r3
 8004586:	f023 030f 	bic.w	r3, r3, #15
 800458a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	b29b      	uxth	r3, r3
 8004592:	f003 0307 	and.w	r3, r3, #7
 8004596:	b29a      	uxth	r2, r3
 8004598:	89fb      	ldrh	r3, [r7, #14]
 800459a:	4313      	orrs	r3, r2
 800459c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	89fa      	ldrh	r2, [r7, #14]
 80045a4:	60da      	str	r2, [r3, #12]
 80045a6:	e04f      	b.n	8004648 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	76bb      	strb	r3, [r7, #26]
 80045ac:	e04c      	b.n	8004648 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80045ae:	7efb      	ldrb	r3, [r7, #27]
 80045b0:	2b08      	cmp	r3, #8
 80045b2:	d828      	bhi.n	8004606 <UART_SetConfig+0x4b6>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <UART_SetConfig+0x46c>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045e9 	.word	0x080045e9
 80045c4:	080045f1 	.word	0x080045f1
 80045c8:	08004607 	.word	0x08004607
 80045cc:	080045f7 	.word	0x080045f7
 80045d0:	08004607 	.word	0x08004607
 80045d4:	08004607 	.word	0x08004607
 80045d8:	08004607 	.word	0x08004607
 80045dc:	080045ff 	.word	0x080045ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045e0:	f7fe ff8c 	bl	80034fc <HAL_RCC_GetPCLK1Freq>
 80045e4:	6178      	str	r0, [r7, #20]
        break;
 80045e6:	e013      	b.n	8004610 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045e8:	f7fe ff9e 	bl	8003528 <HAL_RCC_GetPCLK2Freq>
 80045ec:	6178      	str	r0, [r7, #20]
        break;
 80045ee:	e00f      	b.n	8004610 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f0:	4b1b      	ldr	r3, [pc, #108]	; (8004660 <UART_SetConfig+0x510>)
 80045f2:	617b      	str	r3, [r7, #20]
        break;
 80045f4:	e00c      	b.n	8004610 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045f6:	f7fe fee9 	bl	80033cc <HAL_RCC_GetSysClockFreq>
 80045fa:	6178      	str	r0, [r7, #20]
        break;
 80045fc:	e008      	b.n	8004610 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004602:	617b      	str	r3, [r7, #20]
        break;
 8004604:	e004      	b.n	8004610 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	76bb      	strb	r3, [r7, #26]
        break;
 800460e:	bf00      	nop
    }

    if (pclk != 0U)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d018      	beq.n	8004648 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	085a      	lsrs	r2, r3, #1
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	441a      	add	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b0f      	cmp	r3, #15
 800462e:	d909      	bls.n	8004644 <UART_SetConfig+0x4f4>
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004636:	d205      	bcs.n	8004644 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60da      	str	r2, [r3, #12]
 8004642:	e001      	b.n	8004648 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004654:	7ebb      	ldrb	r3, [r7, #26]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bdb0      	pop	{r4, r5, r7, pc}
 800465e:	bf00      	nop
 8004660:	00f42400 	.word	0x00f42400

08004664 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	430a      	orrs	r2, r1
 800468c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004692:	f003 0302 	and.w	r3, r3, #2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	f003 0304 	and.w	r3, r3, #4
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d00a      	beq.n	80046d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	430a      	orrs	r2, r1
 80046d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	f003 0308 	and.w	r3, r3, #8
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00a      	beq.n	80046f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f8:	f003 0310 	and.w	r3, r3, #16
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01a      	beq.n	800477a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004762:	d10a      	bne.n	800477a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	430a      	orrs	r2, r1
 8004778:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00a      	beq.n	800479c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	430a      	orrs	r2, r1
 800479a:	605a      	str	r2, [r3, #4]
  }
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b086      	sub	sp, #24
 80047ac:	af02      	add	r7, sp, #8
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047b8:	f7fc ff72 	bl	80016a0 <HAL_GetTick>
 80047bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d10e      	bne.n	80047ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f82d 	bl	800483a <UART_WaitOnFlagUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e023      	b.n	8004832 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d10e      	bne.n	8004816 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f817 	bl	800483a <UART_WaitOnFlagUntilTimeout>
 800480c:	4603      	mov	r3, r0
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e00d      	b.n	8004832 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2220      	movs	r2, #32
 8004820:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b09c      	sub	sp, #112	; 0x70
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	603b      	str	r3, [r7, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800484a:	e0a5      	b.n	8004998 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800484c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800484e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004852:	f000 80a1 	beq.w	8004998 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004856:	f7fc ff23 	bl	80016a0 <HAL_GetTick>
 800485a:	4602      	mov	r2, r0
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	1ad3      	subs	r3, r2, r3
 8004860:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004862:	429a      	cmp	r2, r3
 8004864:	d302      	bcc.n	800486c <UART_WaitOnFlagUntilTimeout+0x32>
 8004866:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004868:	2b00      	cmp	r3, #0
 800486a:	d13e      	bne.n	80048ea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800487a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800487c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004880:	667b      	str	r3, [r7, #100]	; 0x64
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	461a      	mov	r2, r3
 8004888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800488a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800488c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004890:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004892:	e841 2300 	strex	r3, r2, [r1]
 8004896:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800489a:	2b00      	cmp	r3, #0
 800489c:	d1e6      	bne.n	800486c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3308      	adds	r3, #8
 80048a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b0:	f023 0301 	bic.w	r3, r3, #1
 80048b4:	663b      	str	r3, [r7, #96]	; 0x60
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3308      	adds	r3, #8
 80048bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80048be:	64ba      	str	r2, [r7, #72]	; 0x48
 80048c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80048cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e5      	bne.n	800489e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2220      	movs	r2, #32
 80048d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2220      	movs	r2, #32
 80048dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e067      	b.n	80049ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0304 	and.w	r3, r3, #4
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d04f      	beq.n	8004998 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004906:	d147      	bne.n	8004998 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004910:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004926:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	461a      	mov	r2, r3
 800492e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004930:	637b      	str	r3, [r7, #52]	; 0x34
 8004932:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e6      	bne.n	8004912 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3308      	adds	r3, #8
 800494a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	e853 3f00 	ldrex	r3, [r3]
 8004952:	613b      	str	r3, [r7, #16]
   return(result);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	f023 0301 	bic.w	r3, r3, #1
 800495a:	66bb      	str	r3, [r7, #104]	; 0x68
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3308      	adds	r3, #8
 8004962:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004964:	623a      	str	r2, [r7, #32]
 8004966:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004968:	69f9      	ldr	r1, [r7, #28]
 800496a:	6a3a      	ldr	r2, [r7, #32]
 800496c:	e841 2300 	strex	r3, r2, [r1]
 8004970:	61bb      	str	r3, [r7, #24]
   return(result);
 8004972:	69bb      	ldr	r3, [r7, #24]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1e5      	bne.n	8004944 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2220      	movs	r2, #32
 8004982:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e010      	b.n	80049ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69da      	ldr	r2, [r3, #28]
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	4013      	ands	r3, r2
 80049a2:	68ba      	ldr	r2, [r7, #8]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	bf0c      	ite	eq
 80049a8:	2301      	moveq	r3, #1
 80049aa:	2300      	movne	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	461a      	mov	r2, r3
 80049b0:	79fb      	ldrb	r3, [r7, #7]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	f43f af4a 	beq.w	800484c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3770      	adds	r7, #112	; 0x70
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <__errno>:
 80049c4:	4b01      	ldr	r3, [pc, #4]	; (80049cc <__errno+0x8>)
 80049c6:	6818      	ldr	r0, [r3, #0]
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	2000000c 	.word	0x2000000c

080049d0 <__libc_init_array>:
 80049d0:	b570      	push	{r4, r5, r6, lr}
 80049d2:	4d0d      	ldr	r5, [pc, #52]	; (8004a08 <__libc_init_array+0x38>)
 80049d4:	4c0d      	ldr	r4, [pc, #52]	; (8004a0c <__libc_init_array+0x3c>)
 80049d6:	1b64      	subs	r4, r4, r5
 80049d8:	10a4      	asrs	r4, r4, #2
 80049da:	2600      	movs	r6, #0
 80049dc:	42a6      	cmp	r6, r4
 80049de:	d109      	bne.n	80049f4 <__libc_init_array+0x24>
 80049e0:	4d0b      	ldr	r5, [pc, #44]	; (8004a10 <__libc_init_array+0x40>)
 80049e2:	4c0c      	ldr	r4, [pc, #48]	; (8004a14 <__libc_init_array+0x44>)
 80049e4:	f000 fc4e 	bl	8005284 <_init>
 80049e8:	1b64      	subs	r4, r4, r5
 80049ea:	10a4      	asrs	r4, r4, #2
 80049ec:	2600      	movs	r6, #0
 80049ee:	42a6      	cmp	r6, r4
 80049f0:	d105      	bne.n	80049fe <__libc_init_array+0x2e>
 80049f2:	bd70      	pop	{r4, r5, r6, pc}
 80049f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f8:	4798      	blx	r3
 80049fa:	3601      	adds	r6, #1
 80049fc:	e7ee      	b.n	80049dc <__libc_init_array+0xc>
 80049fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a02:	4798      	blx	r3
 8004a04:	3601      	adds	r6, #1
 8004a06:	e7f2      	b.n	80049ee <__libc_init_array+0x1e>
 8004a08:	08005344 	.word	0x08005344
 8004a0c:	08005344 	.word	0x08005344
 8004a10:	08005344 	.word	0x08005344
 8004a14:	08005348 	.word	0x08005348

08004a18 <memset>:
 8004a18:	4402      	add	r2, r0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d100      	bne.n	8004a22 <memset+0xa>
 8004a20:	4770      	bx	lr
 8004a22:	f803 1b01 	strb.w	r1, [r3], #1
 8004a26:	e7f9      	b.n	8004a1c <memset+0x4>

08004a28 <siprintf>:
 8004a28:	b40e      	push	{r1, r2, r3}
 8004a2a:	b500      	push	{lr}
 8004a2c:	b09c      	sub	sp, #112	; 0x70
 8004a2e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a30:	9002      	str	r0, [sp, #8]
 8004a32:	9006      	str	r0, [sp, #24]
 8004a34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a38:	4809      	ldr	r0, [pc, #36]	; (8004a60 <siprintf+0x38>)
 8004a3a:	9107      	str	r1, [sp, #28]
 8004a3c:	9104      	str	r1, [sp, #16]
 8004a3e:	4909      	ldr	r1, [pc, #36]	; (8004a64 <siprintf+0x3c>)
 8004a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a44:	9105      	str	r1, [sp, #20]
 8004a46:	6800      	ldr	r0, [r0, #0]
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	a902      	add	r1, sp, #8
 8004a4c:	f000 f868 	bl	8004b20 <_svfiprintf_r>
 8004a50:	9b02      	ldr	r3, [sp, #8]
 8004a52:	2200      	movs	r2, #0
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	b01c      	add	sp, #112	; 0x70
 8004a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a5c:	b003      	add	sp, #12
 8004a5e:	4770      	bx	lr
 8004a60:	2000000c 	.word	0x2000000c
 8004a64:	ffff0208 	.word	0xffff0208

08004a68 <__ssputs_r>:
 8004a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6c:	688e      	ldr	r6, [r1, #8]
 8004a6e:	429e      	cmp	r6, r3
 8004a70:	4682      	mov	sl, r0
 8004a72:	460c      	mov	r4, r1
 8004a74:	4690      	mov	r8, r2
 8004a76:	461f      	mov	r7, r3
 8004a78:	d838      	bhi.n	8004aec <__ssputs_r+0x84>
 8004a7a:	898a      	ldrh	r2, [r1, #12]
 8004a7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a80:	d032      	beq.n	8004ae8 <__ssputs_r+0x80>
 8004a82:	6825      	ldr	r5, [r4, #0]
 8004a84:	6909      	ldr	r1, [r1, #16]
 8004a86:	eba5 0901 	sub.w	r9, r5, r1
 8004a8a:	6965      	ldr	r5, [r4, #20]
 8004a8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a94:	3301      	adds	r3, #1
 8004a96:	444b      	add	r3, r9
 8004a98:	106d      	asrs	r5, r5, #1
 8004a9a:	429d      	cmp	r5, r3
 8004a9c:	bf38      	it	cc
 8004a9e:	461d      	movcc	r5, r3
 8004aa0:	0553      	lsls	r3, r2, #21
 8004aa2:	d531      	bpl.n	8004b08 <__ssputs_r+0xa0>
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	f000 fb47 	bl	8005138 <_malloc_r>
 8004aaa:	4606      	mov	r6, r0
 8004aac:	b950      	cbnz	r0, 8004ac4 <__ssputs_r+0x5c>
 8004aae:	230c      	movs	r3, #12
 8004ab0:	f8ca 3000 	str.w	r3, [sl]
 8004ab4:	89a3      	ldrh	r3, [r4, #12]
 8004ab6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004aba:	81a3      	strh	r3, [r4, #12]
 8004abc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac4:	6921      	ldr	r1, [r4, #16]
 8004ac6:	464a      	mov	r2, r9
 8004ac8:	f000 fabe 	bl	8005048 <memcpy>
 8004acc:	89a3      	ldrh	r3, [r4, #12]
 8004ace:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad6:	81a3      	strh	r3, [r4, #12]
 8004ad8:	6126      	str	r6, [r4, #16]
 8004ada:	6165      	str	r5, [r4, #20]
 8004adc:	444e      	add	r6, r9
 8004ade:	eba5 0509 	sub.w	r5, r5, r9
 8004ae2:	6026      	str	r6, [r4, #0]
 8004ae4:	60a5      	str	r5, [r4, #8]
 8004ae6:	463e      	mov	r6, r7
 8004ae8:	42be      	cmp	r6, r7
 8004aea:	d900      	bls.n	8004aee <__ssputs_r+0x86>
 8004aec:	463e      	mov	r6, r7
 8004aee:	4632      	mov	r2, r6
 8004af0:	6820      	ldr	r0, [r4, #0]
 8004af2:	4641      	mov	r1, r8
 8004af4:	f000 fab6 	bl	8005064 <memmove>
 8004af8:	68a3      	ldr	r3, [r4, #8]
 8004afa:	6822      	ldr	r2, [r4, #0]
 8004afc:	1b9b      	subs	r3, r3, r6
 8004afe:	4432      	add	r2, r6
 8004b00:	60a3      	str	r3, [r4, #8]
 8004b02:	6022      	str	r2, [r4, #0]
 8004b04:	2000      	movs	r0, #0
 8004b06:	e7db      	b.n	8004ac0 <__ssputs_r+0x58>
 8004b08:	462a      	mov	r2, r5
 8004b0a:	f000 fb6f 	bl	80051ec <_realloc_r>
 8004b0e:	4606      	mov	r6, r0
 8004b10:	2800      	cmp	r0, #0
 8004b12:	d1e1      	bne.n	8004ad8 <__ssputs_r+0x70>
 8004b14:	6921      	ldr	r1, [r4, #16]
 8004b16:	4650      	mov	r0, sl
 8004b18:	f000 fabe 	bl	8005098 <_free_r>
 8004b1c:	e7c7      	b.n	8004aae <__ssputs_r+0x46>
	...

08004b20 <_svfiprintf_r>:
 8004b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	4698      	mov	r8, r3
 8004b26:	898b      	ldrh	r3, [r1, #12]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	b09d      	sub	sp, #116	; 0x74
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	460d      	mov	r5, r1
 8004b30:	4614      	mov	r4, r2
 8004b32:	d50e      	bpl.n	8004b52 <_svfiprintf_r+0x32>
 8004b34:	690b      	ldr	r3, [r1, #16]
 8004b36:	b963      	cbnz	r3, 8004b52 <_svfiprintf_r+0x32>
 8004b38:	2140      	movs	r1, #64	; 0x40
 8004b3a:	f000 fafd 	bl	8005138 <_malloc_r>
 8004b3e:	6028      	str	r0, [r5, #0]
 8004b40:	6128      	str	r0, [r5, #16]
 8004b42:	b920      	cbnz	r0, 8004b4e <_svfiprintf_r+0x2e>
 8004b44:	230c      	movs	r3, #12
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b4c:	e0d1      	b.n	8004cf2 <_svfiprintf_r+0x1d2>
 8004b4e:	2340      	movs	r3, #64	; 0x40
 8004b50:	616b      	str	r3, [r5, #20]
 8004b52:	2300      	movs	r3, #0
 8004b54:	9309      	str	r3, [sp, #36]	; 0x24
 8004b56:	2320      	movs	r3, #32
 8004b58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b60:	2330      	movs	r3, #48	; 0x30
 8004b62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004d0c <_svfiprintf_r+0x1ec>
 8004b66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b6a:	f04f 0901 	mov.w	r9, #1
 8004b6e:	4623      	mov	r3, r4
 8004b70:	469a      	mov	sl, r3
 8004b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b76:	b10a      	cbz	r2, 8004b7c <_svfiprintf_r+0x5c>
 8004b78:	2a25      	cmp	r2, #37	; 0x25
 8004b7a:	d1f9      	bne.n	8004b70 <_svfiprintf_r+0x50>
 8004b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8004b80:	d00b      	beq.n	8004b9a <_svfiprintf_r+0x7a>
 8004b82:	465b      	mov	r3, fp
 8004b84:	4622      	mov	r2, r4
 8004b86:	4629      	mov	r1, r5
 8004b88:	4638      	mov	r0, r7
 8004b8a:	f7ff ff6d 	bl	8004a68 <__ssputs_r>
 8004b8e:	3001      	adds	r0, #1
 8004b90:	f000 80aa 	beq.w	8004ce8 <_svfiprintf_r+0x1c8>
 8004b94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b96:	445a      	add	r2, fp
 8004b98:	9209      	str	r2, [sp, #36]	; 0x24
 8004b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 80a2 	beq.w	8004ce8 <_svfiprintf_r+0x1c8>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bae:	f10a 0a01 	add.w	sl, sl, #1
 8004bb2:	9304      	str	r3, [sp, #16]
 8004bb4:	9307      	str	r3, [sp, #28]
 8004bb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bba:	931a      	str	r3, [sp, #104]	; 0x68
 8004bbc:	4654      	mov	r4, sl
 8004bbe:	2205      	movs	r2, #5
 8004bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc4:	4851      	ldr	r0, [pc, #324]	; (8004d0c <_svfiprintf_r+0x1ec>)
 8004bc6:	f7fb fb0b 	bl	80001e0 <memchr>
 8004bca:	9a04      	ldr	r2, [sp, #16]
 8004bcc:	b9d8      	cbnz	r0, 8004c06 <_svfiprintf_r+0xe6>
 8004bce:	06d0      	lsls	r0, r2, #27
 8004bd0:	bf44      	itt	mi
 8004bd2:	2320      	movmi	r3, #32
 8004bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bd8:	0711      	lsls	r1, r2, #28
 8004bda:	bf44      	itt	mi
 8004bdc:	232b      	movmi	r3, #43	; 0x2b
 8004bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be2:	f89a 3000 	ldrb.w	r3, [sl]
 8004be6:	2b2a      	cmp	r3, #42	; 0x2a
 8004be8:	d015      	beq.n	8004c16 <_svfiprintf_r+0xf6>
 8004bea:	9a07      	ldr	r2, [sp, #28]
 8004bec:	4654      	mov	r4, sl
 8004bee:	2000      	movs	r0, #0
 8004bf0:	f04f 0c0a 	mov.w	ip, #10
 8004bf4:	4621      	mov	r1, r4
 8004bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bfa:	3b30      	subs	r3, #48	; 0x30
 8004bfc:	2b09      	cmp	r3, #9
 8004bfe:	d94e      	bls.n	8004c9e <_svfiprintf_r+0x17e>
 8004c00:	b1b0      	cbz	r0, 8004c30 <_svfiprintf_r+0x110>
 8004c02:	9207      	str	r2, [sp, #28]
 8004c04:	e014      	b.n	8004c30 <_svfiprintf_r+0x110>
 8004c06:	eba0 0308 	sub.w	r3, r0, r8
 8004c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	9304      	str	r3, [sp, #16]
 8004c12:	46a2      	mov	sl, r4
 8004c14:	e7d2      	b.n	8004bbc <_svfiprintf_r+0x9c>
 8004c16:	9b03      	ldr	r3, [sp, #12]
 8004c18:	1d19      	adds	r1, r3, #4
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	9103      	str	r1, [sp, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfbb      	ittet	lt
 8004c22:	425b      	neglt	r3, r3
 8004c24:	f042 0202 	orrlt.w	r2, r2, #2
 8004c28:	9307      	strge	r3, [sp, #28]
 8004c2a:	9307      	strlt	r3, [sp, #28]
 8004c2c:	bfb8      	it	lt
 8004c2e:	9204      	strlt	r2, [sp, #16]
 8004c30:	7823      	ldrb	r3, [r4, #0]
 8004c32:	2b2e      	cmp	r3, #46	; 0x2e
 8004c34:	d10c      	bne.n	8004c50 <_svfiprintf_r+0x130>
 8004c36:	7863      	ldrb	r3, [r4, #1]
 8004c38:	2b2a      	cmp	r3, #42	; 0x2a
 8004c3a:	d135      	bne.n	8004ca8 <_svfiprintf_r+0x188>
 8004c3c:	9b03      	ldr	r3, [sp, #12]
 8004c3e:	1d1a      	adds	r2, r3, #4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	9203      	str	r2, [sp, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	bfb8      	it	lt
 8004c48:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c4c:	3402      	adds	r4, #2
 8004c4e:	9305      	str	r3, [sp, #20]
 8004c50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d1c <_svfiprintf_r+0x1fc>
 8004c54:	7821      	ldrb	r1, [r4, #0]
 8004c56:	2203      	movs	r2, #3
 8004c58:	4650      	mov	r0, sl
 8004c5a:	f7fb fac1 	bl	80001e0 <memchr>
 8004c5e:	b140      	cbz	r0, 8004c72 <_svfiprintf_r+0x152>
 8004c60:	2340      	movs	r3, #64	; 0x40
 8004c62:	eba0 000a 	sub.w	r0, r0, sl
 8004c66:	fa03 f000 	lsl.w	r0, r3, r0
 8004c6a:	9b04      	ldr	r3, [sp, #16]
 8004c6c:	4303      	orrs	r3, r0
 8004c6e:	3401      	adds	r4, #1
 8004c70:	9304      	str	r3, [sp, #16]
 8004c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c76:	4826      	ldr	r0, [pc, #152]	; (8004d10 <_svfiprintf_r+0x1f0>)
 8004c78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c7c:	2206      	movs	r2, #6
 8004c7e:	f7fb faaf 	bl	80001e0 <memchr>
 8004c82:	2800      	cmp	r0, #0
 8004c84:	d038      	beq.n	8004cf8 <_svfiprintf_r+0x1d8>
 8004c86:	4b23      	ldr	r3, [pc, #140]	; (8004d14 <_svfiprintf_r+0x1f4>)
 8004c88:	bb1b      	cbnz	r3, 8004cd2 <_svfiprintf_r+0x1b2>
 8004c8a:	9b03      	ldr	r3, [sp, #12]
 8004c8c:	3307      	adds	r3, #7
 8004c8e:	f023 0307 	bic.w	r3, r3, #7
 8004c92:	3308      	adds	r3, #8
 8004c94:	9303      	str	r3, [sp, #12]
 8004c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c98:	4433      	add	r3, r6
 8004c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004c9c:	e767      	b.n	8004b6e <_svfiprintf_r+0x4e>
 8004c9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ca2:	460c      	mov	r4, r1
 8004ca4:	2001      	movs	r0, #1
 8004ca6:	e7a5      	b.n	8004bf4 <_svfiprintf_r+0xd4>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	3401      	adds	r4, #1
 8004cac:	9305      	str	r3, [sp, #20]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f04f 0c0a 	mov.w	ip, #10
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cba:	3a30      	subs	r2, #48	; 0x30
 8004cbc:	2a09      	cmp	r2, #9
 8004cbe:	d903      	bls.n	8004cc8 <_svfiprintf_r+0x1a8>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d0c5      	beq.n	8004c50 <_svfiprintf_r+0x130>
 8004cc4:	9105      	str	r1, [sp, #20]
 8004cc6:	e7c3      	b.n	8004c50 <_svfiprintf_r+0x130>
 8004cc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ccc:	4604      	mov	r4, r0
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e7f0      	b.n	8004cb4 <_svfiprintf_r+0x194>
 8004cd2:	ab03      	add	r3, sp, #12
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	462a      	mov	r2, r5
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <_svfiprintf_r+0x1f8>)
 8004cda:	a904      	add	r1, sp, #16
 8004cdc:	4638      	mov	r0, r7
 8004cde:	f3af 8000 	nop.w
 8004ce2:	1c42      	adds	r2, r0, #1
 8004ce4:	4606      	mov	r6, r0
 8004ce6:	d1d6      	bne.n	8004c96 <_svfiprintf_r+0x176>
 8004ce8:	89ab      	ldrh	r3, [r5, #12]
 8004cea:	065b      	lsls	r3, r3, #25
 8004cec:	f53f af2c 	bmi.w	8004b48 <_svfiprintf_r+0x28>
 8004cf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cf2:	b01d      	add	sp, #116	; 0x74
 8004cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf8:	ab03      	add	r3, sp, #12
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	462a      	mov	r2, r5
 8004cfe:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <_svfiprintf_r+0x1f8>)
 8004d00:	a904      	add	r1, sp, #16
 8004d02:	4638      	mov	r0, r7
 8004d04:	f000 f87a 	bl	8004dfc <_printf_i>
 8004d08:	e7eb      	b.n	8004ce2 <_svfiprintf_r+0x1c2>
 8004d0a:	bf00      	nop
 8004d0c:	08005308 	.word	0x08005308
 8004d10:	08005312 	.word	0x08005312
 8004d14:	00000000 	.word	0x00000000
 8004d18:	08004a69 	.word	0x08004a69
 8004d1c:	0800530e 	.word	0x0800530e

08004d20 <_printf_common>:
 8004d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d24:	4616      	mov	r6, r2
 8004d26:	4699      	mov	r9, r3
 8004d28:	688a      	ldr	r2, [r1, #8]
 8004d2a:	690b      	ldr	r3, [r1, #16]
 8004d2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d30:	4293      	cmp	r3, r2
 8004d32:	bfb8      	it	lt
 8004d34:	4613      	movlt	r3, r2
 8004d36:	6033      	str	r3, [r6, #0]
 8004d38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d3c:	4607      	mov	r7, r0
 8004d3e:	460c      	mov	r4, r1
 8004d40:	b10a      	cbz	r2, 8004d46 <_printf_common+0x26>
 8004d42:	3301      	adds	r3, #1
 8004d44:	6033      	str	r3, [r6, #0]
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	0699      	lsls	r1, r3, #26
 8004d4a:	bf42      	ittt	mi
 8004d4c:	6833      	ldrmi	r3, [r6, #0]
 8004d4e:	3302      	addmi	r3, #2
 8004d50:	6033      	strmi	r3, [r6, #0]
 8004d52:	6825      	ldr	r5, [r4, #0]
 8004d54:	f015 0506 	ands.w	r5, r5, #6
 8004d58:	d106      	bne.n	8004d68 <_printf_common+0x48>
 8004d5a:	f104 0a19 	add.w	sl, r4, #25
 8004d5e:	68e3      	ldr	r3, [r4, #12]
 8004d60:	6832      	ldr	r2, [r6, #0]
 8004d62:	1a9b      	subs	r3, r3, r2
 8004d64:	42ab      	cmp	r3, r5
 8004d66:	dc26      	bgt.n	8004db6 <_printf_common+0x96>
 8004d68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d6c:	1e13      	subs	r3, r2, #0
 8004d6e:	6822      	ldr	r2, [r4, #0]
 8004d70:	bf18      	it	ne
 8004d72:	2301      	movne	r3, #1
 8004d74:	0692      	lsls	r2, r2, #26
 8004d76:	d42b      	bmi.n	8004dd0 <_printf_common+0xb0>
 8004d78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d7c:	4649      	mov	r1, r9
 8004d7e:	4638      	mov	r0, r7
 8004d80:	47c0      	blx	r8
 8004d82:	3001      	adds	r0, #1
 8004d84:	d01e      	beq.n	8004dc4 <_printf_common+0xa4>
 8004d86:	6823      	ldr	r3, [r4, #0]
 8004d88:	68e5      	ldr	r5, [r4, #12]
 8004d8a:	6832      	ldr	r2, [r6, #0]
 8004d8c:	f003 0306 	and.w	r3, r3, #6
 8004d90:	2b04      	cmp	r3, #4
 8004d92:	bf08      	it	eq
 8004d94:	1aad      	subeq	r5, r5, r2
 8004d96:	68a3      	ldr	r3, [r4, #8]
 8004d98:	6922      	ldr	r2, [r4, #16]
 8004d9a:	bf0c      	ite	eq
 8004d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004da0:	2500      	movne	r5, #0
 8004da2:	4293      	cmp	r3, r2
 8004da4:	bfc4      	itt	gt
 8004da6:	1a9b      	subgt	r3, r3, r2
 8004da8:	18ed      	addgt	r5, r5, r3
 8004daa:	2600      	movs	r6, #0
 8004dac:	341a      	adds	r4, #26
 8004dae:	42b5      	cmp	r5, r6
 8004db0:	d11a      	bne.n	8004de8 <_printf_common+0xc8>
 8004db2:	2000      	movs	r0, #0
 8004db4:	e008      	b.n	8004dc8 <_printf_common+0xa8>
 8004db6:	2301      	movs	r3, #1
 8004db8:	4652      	mov	r2, sl
 8004dba:	4649      	mov	r1, r9
 8004dbc:	4638      	mov	r0, r7
 8004dbe:	47c0      	blx	r8
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d103      	bne.n	8004dcc <_printf_common+0xac>
 8004dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dcc:	3501      	adds	r5, #1
 8004dce:	e7c6      	b.n	8004d5e <_printf_common+0x3e>
 8004dd0:	18e1      	adds	r1, r4, r3
 8004dd2:	1c5a      	adds	r2, r3, #1
 8004dd4:	2030      	movs	r0, #48	; 0x30
 8004dd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dda:	4422      	add	r2, r4
 8004ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004de0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004de4:	3302      	adds	r3, #2
 8004de6:	e7c7      	b.n	8004d78 <_printf_common+0x58>
 8004de8:	2301      	movs	r3, #1
 8004dea:	4622      	mov	r2, r4
 8004dec:	4649      	mov	r1, r9
 8004dee:	4638      	mov	r0, r7
 8004df0:	47c0      	blx	r8
 8004df2:	3001      	adds	r0, #1
 8004df4:	d0e6      	beq.n	8004dc4 <_printf_common+0xa4>
 8004df6:	3601      	adds	r6, #1
 8004df8:	e7d9      	b.n	8004dae <_printf_common+0x8e>
	...

08004dfc <_printf_i>:
 8004dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e00:	460c      	mov	r4, r1
 8004e02:	4691      	mov	r9, r2
 8004e04:	7e27      	ldrb	r7, [r4, #24]
 8004e06:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e08:	2f78      	cmp	r7, #120	; 0x78
 8004e0a:	4680      	mov	r8, r0
 8004e0c:	469a      	mov	sl, r3
 8004e0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e12:	d807      	bhi.n	8004e24 <_printf_i+0x28>
 8004e14:	2f62      	cmp	r7, #98	; 0x62
 8004e16:	d80a      	bhi.n	8004e2e <_printf_i+0x32>
 8004e18:	2f00      	cmp	r7, #0
 8004e1a:	f000 80d8 	beq.w	8004fce <_printf_i+0x1d2>
 8004e1e:	2f58      	cmp	r7, #88	; 0x58
 8004e20:	f000 80a3 	beq.w	8004f6a <_printf_i+0x16e>
 8004e24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e2c:	e03a      	b.n	8004ea4 <_printf_i+0xa8>
 8004e2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e32:	2b15      	cmp	r3, #21
 8004e34:	d8f6      	bhi.n	8004e24 <_printf_i+0x28>
 8004e36:	a001      	add	r0, pc, #4	; (adr r0, 8004e3c <_printf_i+0x40>)
 8004e38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e3c:	08004e95 	.word	0x08004e95
 8004e40:	08004ea9 	.word	0x08004ea9
 8004e44:	08004e25 	.word	0x08004e25
 8004e48:	08004e25 	.word	0x08004e25
 8004e4c:	08004e25 	.word	0x08004e25
 8004e50:	08004e25 	.word	0x08004e25
 8004e54:	08004ea9 	.word	0x08004ea9
 8004e58:	08004e25 	.word	0x08004e25
 8004e5c:	08004e25 	.word	0x08004e25
 8004e60:	08004e25 	.word	0x08004e25
 8004e64:	08004e25 	.word	0x08004e25
 8004e68:	08004fb5 	.word	0x08004fb5
 8004e6c:	08004ed9 	.word	0x08004ed9
 8004e70:	08004f97 	.word	0x08004f97
 8004e74:	08004e25 	.word	0x08004e25
 8004e78:	08004e25 	.word	0x08004e25
 8004e7c:	08004fd7 	.word	0x08004fd7
 8004e80:	08004e25 	.word	0x08004e25
 8004e84:	08004ed9 	.word	0x08004ed9
 8004e88:	08004e25 	.word	0x08004e25
 8004e8c:	08004e25 	.word	0x08004e25
 8004e90:	08004f9f 	.word	0x08004f9f
 8004e94:	680b      	ldr	r3, [r1, #0]
 8004e96:	1d1a      	adds	r2, r3, #4
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	600a      	str	r2, [r1, #0]
 8004e9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004ea0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e0a3      	b.n	8004ff0 <_printf_i+0x1f4>
 8004ea8:	6825      	ldr	r5, [r4, #0]
 8004eaa:	6808      	ldr	r0, [r1, #0]
 8004eac:	062e      	lsls	r6, r5, #24
 8004eae:	f100 0304 	add.w	r3, r0, #4
 8004eb2:	d50a      	bpl.n	8004eca <_printf_i+0xce>
 8004eb4:	6805      	ldr	r5, [r0, #0]
 8004eb6:	600b      	str	r3, [r1, #0]
 8004eb8:	2d00      	cmp	r5, #0
 8004eba:	da03      	bge.n	8004ec4 <_printf_i+0xc8>
 8004ebc:	232d      	movs	r3, #45	; 0x2d
 8004ebe:	426d      	negs	r5, r5
 8004ec0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec4:	485e      	ldr	r0, [pc, #376]	; (8005040 <_printf_i+0x244>)
 8004ec6:	230a      	movs	r3, #10
 8004ec8:	e019      	b.n	8004efe <_printf_i+0x102>
 8004eca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004ece:	6805      	ldr	r5, [r0, #0]
 8004ed0:	600b      	str	r3, [r1, #0]
 8004ed2:	bf18      	it	ne
 8004ed4:	b22d      	sxthne	r5, r5
 8004ed6:	e7ef      	b.n	8004eb8 <_printf_i+0xbc>
 8004ed8:	680b      	ldr	r3, [r1, #0]
 8004eda:	6825      	ldr	r5, [r4, #0]
 8004edc:	1d18      	adds	r0, r3, #4
 8004ede:	6008      	str	r0, [r1, #0]
 8004ee0:	0628      	lsls	r0, r5, #24
 8004ee2:	d501      	bpl.n	8004ee8 <_printf_i+0xec>
 8004ee4:	681d      	ldr	r5, [r3, #0]
 8004ee6:	e002      	b.n	8004eee <_printf_i+0xf2>
 8004ee8:	0669      	lsls	r1, r5, #25
 8004eea:	d5fb      	bpl.n	8004ee4 <_printf_i+0xe8>
 8004eec:	881d      	ldrh	r5, [r3, #0]
 8004eee:	4854      	ldr	r0, [pc, #336]	; (8005040 <_printf_i+0x244>)
 8004ef0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ef2:	bf0c      	ite	eq
 8004ef4:	2308      	moveq	r3, #8
 8004ef6:	230a      	movne	r3, #10
 8004ef8:	2100      	movs	r1, #0
 8004efa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004efe:	6866      	ldr	r6, [r4, #4]
 8004f00:	60a6      	str	r6, [r4, #8]
 8004f02:	2e00      	cmp	r6, #0
 8004f04:	bfa2      	ittt	ge
 8004f06:	6821      	ldrge	r1, [r4, #0]
 8004f08:	f021 0104 	bicge.w	r1, r1, #4
 8004f0c:	6021      	strge	r1, [r4, #0]
 8004f0e:	b90d      	cbnz	r5, 8004f14 <_printf_i+0x118>
 8004f10:	2e00      	cmp	r6, #0
 8004f12:	d04d      	beq.n	8004fb0 <_printf_i+0x1b4>
 8004f14:	4616      	mov	r6, r2
 8004f16:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f1a:	fb03 5711 	mls	r7, r3, r1, r5
 8004f1e:	5dc7      	ldrb	r7, [r0, r7]
 8004f20:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f24:	462f      	mov	r7, r5
 8004f26:	42bb      	cmp	r3, r7
 8004f28:	460d      	mov	r5, r1
 8004f2a:	d9f4      	bls.n	8004f16 <_printf_i+0x11a>
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d10b      	bne.n	8004f48 <_printf_i+0x14c>
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	07df      	lsls	r7, r3, #31
 8004f34:	d508      	bpl.n	8004f48 <_printf_i+0x14c>
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	6861      	ldr	r1, [r4, #4]
 8004f3a:	4299      	cmp	r1, r3
 8004f3c:	bfde      	ittt	le
 8004f3e:	2330      	movle	r3, #48	; 0x30
 8004f40:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f44:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8004f48:	1b92      	subs	r2, r2, r6
 8004f4a:	6122      	str	r2, [r4, #16]
 8004f4c:	f8cd a000 	str.w	sl, [sp]
 8004f50:	464b      	mov	r3, r9
 8004f52:	aa03      	add	r2, sp, #12
 8004f54:	4621      	mov	r1, r4
 8004f56:	4640      	mov	r0, r8
 8004f58:	f7ff fee2 	bl	8004d20 <_printf_common>
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	d14c      	bne.n	8004ffa <_printf_i+0x1fe>
 8004f60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f64:	b004      	add	sp, #16
 8004f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6a:	4835      	ldr	r0, [pc, #212]	; (8005040 <_printf_i+0x244>)
 8004f6c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	680e      	ldr	r6, [r1, #0]
 8004f74:	061f      	lsls	r7, r3, #24
 8004f76:	f856 5b04 	ldr.w	r5, [r6], #4
 8004f7a:	600e      	str	r6, [r1, #0]
 8004f7c:	d514      	bpl.n	8004fa8 <_printf_i+0x1ac>
 8004f7e:	07d9      	lsls	r1, r3, #31
 8004f80:	bf44      	itt	mi
 8004f82:	f043 0320 	orrmi.w	r3, r3, #32
 8004f86:	6023      	strmi	r3, [r4, #0]
 8004f88:	b91d      	cbnz	r5, 8004f92 <_printf_i+0x196>
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	f023 0320 	bic.w	r3, r3, #32
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	2310      	movs	r3, #16
 8004f94:	e7b0      	b.n	8004ef8 <_printf_i+0xfc>
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	f043 0320 	orr.w	r3, r3, #32
 8004f9c:	6023      	str	r3, [r4, #0]
 8004f9e:	2378      	movs	r3, #120	; 0x78
 8004fa0:	4828      	ldr	r0, [pc, #160]	; (8005044 <_printf_i+0x248>)
 8004fa2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fa6:	e7e3      	b.n	8004f70 <_printf_i+0x174>
 8004fa8:	065e      	lsls	r6, r3, #25
 8004faa:	bf48      	it	mi
 8004fac:	b2ad      	uxthmi	r5, r5
 8004fae:	e7e6      	b.n	8004f7e <_printf_i+0x182>
 8004fb0:	4616      	mov	r6, r2
 8004fb2:	e7bb      	b.n	8004f2c <_printf_i+0x130>
 8004fb4:	680b      	ldr	r3, [r1, #0]
 8004fb6:	6826      	ldr	r6, [r4, #0]
 8004fb8:	6960      	ldr	r0, [r4, #20]
 8004fba:	1d1d      	adds	r5, r3, #4
 8004fbc:	600d      	str	r5, [r1, #0]
 8004fbe:	0635      	lsls	r5, r6, #24
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	d501      	bpl.n	8004fc8 <_printf_i+0x1cc>
 8004fc4:	6018      	str	r0, [r3, #0]
 8004fc6:	e002      	b.n	8004fce <_printf_i+0x1d2>
 8004fc8:	0671      	lsls	r1, r6, #25
 8004fca:	d5fb      	bpl.n	8004fc4 <_printf_i+0x1c8>
 8004fcc:	8018      	strh	r0, [r3, #0]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	6123      	str	r3, [r4, #16]
 8004fd2:	4616      	mov	r6, r2
 8004fd4:	e7ba      	b.n	8004f4c <_printf_i+0x150>
 8004fd6:	680b      	ldr	r3, [r1, #0]
 8004fd8:	1d1a      	adds	r2, r3, #4
 8004fda:	600a      	str	r2, [r1, #0]
 8004fdc:	681e      	ldr	r6, [r3, #0]
 8004fde:	6862      	ldr	r2, [r4, #4]
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	f7fb f8fc 	bl	80001e0 <memchr>
 8004fe8:	b108      	cbz	r0, 8004fee <_printf_i+0x1f2>
 8004fea:	1b80      	subs	r0, r0, r6
 8004fec:	6060      	str	r0, [r4, #4]
 8004fee:	6863      	ldr	r3, [r4, #4]
 8004ff0:	6123      	str	r3, [r4, #16]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff8:	e7a8      	b.n	8004f4c <_printf_i+0x150>
 8004ffa:	6923      	ldr	r3, [r4, #16]
 8004ffc:	4632      	mov	r2, r6
 8004ffe:	4649      	mov	r1, r9
 8005000:	4640      	mov	r0, r8
 8005002:	47d0      	blx	sl
 8005004:	3001      	adds	r0, #1
 8005006:	d0ab      	beq.n	8004f60 <_printf_i+0x164>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	079b      	lsls	r3, r3, #30
 800500c:	d413      	bmi.n	8005036 <_printf_i+0x23a>
 800500e:	68e0      	ldr	r0, [r4, #12]
 8005010:	9b03      	ldr	r3, [sp, #12]
 8005012:	4298      	cmp	r0, r3
 8005014:	bfb8      	it	lt
 8005016:	4618      	movlt	r0, r3
 8005018:	e7a4      	b.n	8004f64 <_printf_i+0x168>
 800501a:	2301      	movs	r3, #1
 800501c:	4632      	mov	r2, r6
 800501e:	4649      	mov	r1, r9
 8005020:	4640      	mov	r0, r8
 8005022:	47d0      	blx	sl
 8005024:	3001      	adds	r0, #1
 8005026:	d09b      	beq.n	8004f60 <_printf_i+0x164>
 8005028:	3501      	adds	r5, #1
 800502a:	68e3      	ldr	r3, [r4, #12]
 800502c:	9903      	ldr	r1, [sp, #12]
 800502e:	1a5b      	subs	r3, r3, r1
 8005030:	42ab      	cmp	r3, r5
 8005032:	dcf2      	bgt.n	800501a <_printf_i+0x21e>
 8005034:	e7eb      	b.n	800500e <_printf_i+0x212>
 8005036:	2500      	movs	r5, #0
 8005038:	f104 0619 	add.w	r6, r4, #25
 800503c:	e7f5      	b.n	800502a <_printf_i+0x22e>
 800503e:	bf00      	nop
 8005040:	08005319 	.word	0x08005319
 8005044:	0800532a 	.word	0x0800532a

08005048 <memcpy>:
 8005048:	440a      	add	r2, r1
 800504a:	4291      	cmp	r1, r2
 800504c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005050:	d100      	bne.n	8005054 <memcpy+0xc>
 8005052:	4770      	bx	lr
 8005054:	b510      	push	{r4, lr}
 8005056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800505a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800505e:	4291      	cmp	r1, r2
 8005060:	d1f9      	bne.n	8005056 <memcpy+0xe>
 8005062:	bd10      	pop	{r4, pc}

08005064 <memmove>:
 8005064:	4288      	cmp	r0, r1
 8005066:	b510      	push	{r4, lr}
 8005068:	eb01 0402 	add.w	r4, r1, r2
 800506c:	d902      	bls.n	8005074 <memmove+0x10>
 800506e:	4284      	cmp	r4, r0
 8005070:	4623      	mov	r3, r4
 8005072:	d807      	bhi.n	8005084 <memmove+0x20>
 8005074:	1e43      	subs	r3, r0, #1
 8005076:	42a1      	cmp	r1, r4
 8005078:	d008      	beq.n	800508c <memmove+0x28>
 800507a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800507e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005082:	e7f8      	b.n	8005076 <memmove+0x12>
 8005084:	4402      	add	r2, r0
 8005086:	4601      	mov	r1, r0
 8005088:	428a      	cmp	r2, r1
 800508a:	d100      	bne.n	800508e <memmove+0x2a>
 800508c:	bd10      	pop	{r4, pc}
 800508e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005092:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005096:	e7f7      	b.n	8005088 <memmove+0x24>

08005098 <_free_r>:
 8005098:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800509a:	2900      	cmp	r1, #0
 800509c:	d048      	beq.n	8005130 <_free_r+0x98>
 800509e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050a2:	9001      	str	r0, [sp, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f1a1 0404 	sub.w	r4, r1, #4
 80050aa:	bfb8      	it	lt
 80050ac:	18e4      	addlt	r4, r4, r3
 80050ae:	f000 f8d3 	bl	8005258 <__malloc_lock>
 80050b2:	4a20      	ldr	r2, [pc, #128]	; (8005134 <_free_r+0x9c>)
 80050b4:	9801      	ldr	r0, [sp, #4]
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	4615      	mov	r5, r2
 80050ba:	b933      	cbnz	r3, 80050ca <_free_r+0x32>
 80050bc:	6063      	str	r3, [r4, #4]
 80050be:	6014      	str	r4, [r2, #0]
 80050c0:	b003      	add	sp, #12
 80050c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050c6:	f000 b8cd 	b.w	8005264 <__malloc_unlock>
 80050ca:	42a3      	cmp	r3, r4
 80050cc:	d90b      	bls.n	80050e6 <_free_r+0x4e>
 80050ce:	6821      	ldr	r1, [r4, #0]
 80050d0:	1862      	adds	r2, r4, r1
 80050d2:	4293      	cmp	r3, r2
 80050d4:	bf04      	itt	eq
 80050d6:	681a      	ldreq	r2, [r3, #0]
 80050d8:	685b      	ldreq	r3, [r3, #4]
 80050da:	6063      	str	r3, [r4, #4]
 80050dc:	bf04      	itt	eq
 80050de:	1852      	addeq	r2, r2, r1
 80050e0:	6022      	streq	r2, [r4, #0]
 80050e2:	602c      	str	r4, [r5, #0]
 80050e4:	e7ec      	b.n	80050c0 <_free_r+0x28>
 80050e6:	461a      	mov	r2, r3
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	b10b      	cbz	r3, 80050f0 <_free_r+0x58>
 80050ec:	42a3      	cmp	r3, r4
 80050ee:	d9fa      	bls.n	80050e6 <_free_r+0x4e>
 80050f0:	6811      	ldr	r1, [r2, #0]
 80050f2:	1855      	adds	r5, r2, r1
 80050f4:	42a5      	cmp	r5, r4
 80050f6:	d10b      	bne.n	8005110 <_free_r+0x78>
 80050f8:	6824      	ldr	r4, [r4, #0]
 80050fa:	4421      	add	r1, r4
 80050fc:	1854      	adds	r4, r2, r1
 80050fe:	42a3      	cmp	r3, r4
 8005100:	6011      	str	r1, [r2, #0]
 8005102:	d1dd      	bne.n	80050c0 <_free_r+0x28>
 8005104:	681c      	ldr	r4, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	6053      	str	r3, [r2, #4]
 800510a:	4421      	add	r1, r4
 800510c:	6011      	str	r1, [r2, #0]
 800510e:	e7d7      	b.n	80050c0 <_free_r+0x28>
 8005110:	d902      	bls.n	8005118 <_free_r+0x80>
 8005112:	230c      	movs	r3, #12
 8005114:	6003      	str	r3, [r0, #0]
 8005116:	e7d3      	b.n	80050c0 <_free_r+0x28>
 8005118:	6825      	ldr	r5, [r4, #0]
 800511a:	1961      	adds	r1, r4, r5
 800511c:	428b      	cmp	r3, r1
 800511e:	bf04      	itt	eq
 8005120:	6819      	ldreq	r1, [r3, #0]
 8005122:	685b      	ldreq	r3, [r3, #4]
 8005124:	6063      	str	r3, [r4, #4]
 8005126:	bf04      	itt	eq
 8005128:	1949      	addeq	r1, r1, r5
 800512a:	6021      	streq	r1, [r4, #0]
 800512c:	6054      	str	r4, [r2, #4]
 800512e:	e7c7      	b.n	80050c0 <_free_r+0x28>
 8005130:	b003      	add	sp, #12
 8005132:	bd30      	pop	{r4, r5, pc}
 8005134:	20000090 	.word	0x20000090

08005138 <_malloc_r>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	1ccd      	adds	r5, r1, #3
 800513c:	f025 0503 	bic.w	r5, r5, #3
 8005140:	3508      	adds	r5, #8
 8005142:	2d0c      	cmp	r5, #12
 8005144:	bf38      	it	cc
 8005146:	250c      	movcc	r5, #12
 8005148:	2d00      	cmp	r5, #0
 800514a:	4606      	mov	r6, r0
 800514c:	db01      	blt.n	8005152 <_malloc_r+0x1a>
 800514e:	42a9      	cmp	r1, r5
 8005150:	d903      	bls.n	800515a <_malloc_r+0x22>
 8005152:	230c      	movs	r3, #12
 8005154:	6033      	str	r3, [r6, #0]
 8005156:	2000      	movs	r0, #0
 8005158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800515a:	f000 f87d 	bl	8005258 <__malloc_lock>
 800515e:	4921      	ldr	r1, [pc, #132]	; (80051e4 <_malloc_r+0xac>)
 8005160:	680a      	ldr	r2, [r1, #0]
 8005162:	4614      	mov	r4, r2
 8005164:	b99c      	cbnz	r4, 800518e <_malloc_r+0x56>
 8005166:	4f20      	ldr	r7, [pc, #128]	; (80051e8 <_malloc_r+0xb0>)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	b923      	cbnz	r3, 8005176 <_malloc_r+0x3e>
 800516c:	4621      	mov	r1, r4
 800516e:	4630      	mov	r0, r6
 8005170:	f000 f862 	bl	8005238 <_sbrk_r>
 8005174:	6038      	str	r0, [r7, #0]
 8005176:	4629      	mov	r1, r5
 8005178:	4630      	mov	r0, r6
 800517a:	f000 f85d 	bl	8005238 <_sbrk_r>
 800517e:	1c43      	adds	r3, r0, #1
 8005180:	d123      	bne.n	80051ca <_malloc_r+0x92>
 8005182:	230c      	movs	r3, #12
 8005184:	6033      	str	r3, [r6, #0]
 8005186:	4630      	mov	r0, r6
 8005188:	f000 f86c 	bl	8005264 <__malloc_unlock>
 800518c:	e7e3      	b.n	8005156 <_malloc_r+0x1e>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	1b5b      	subs	r3, r3, r5
 8005192:	d417      	bmi.n	80051c4 <_malloc_r+0x8c>
 8005194:	2b0b      	cmp	r3, #11
 8005196:	d903      	bls.n	80051a0 <_malloc_r+0x68>
 8005198:	6023      	str	r3, [r4, #0]
 800519a:	441c      	add	r4, r3
 800519c:	6025      	str	r5, [r4, #0]
 800519e:	e004      	b.n	80051aa <_malloc_r+0x72>
 80051a0:	6863      	ldr	r3, [r4, #4]
 80051a2:	42a2      	cmp	r2, r4
 80051a4:	bf0c      	ite	eq
 80051a6:	600b      	streq	r3, [r1, #0]
 80051a8:	6053      	strne	r3, [r2, #4]
 80051aa:	4630      	mov	r0, r6
 80051ac:	f000 f85a 	bl	8005264 <__malloc_unlock>
 80051b0:	f104 000b 	add.w	r0, r4, #11
 80051b4:	1d23      	adds	r3, r4, #4
 80051b6:	f020 0007 	bic.w	r0, r0, #7
 80051ba:	1ac2      	subs	r2, r0, r3
 80051bc:	d0cc      	beq.n	8005158 <_malloc_r+0x20>
 80051be:	1a1b      	subs	r3, r3, r0
 80051c0:	50a3      	str	r3, [r4, r2]
 80051c2:	e7c9      	b.n	8005158 <_malloc_r+0x20>
 80051c4:	4622      	mov	r2, r4
 80051c6:	6864      	ldr	r4, [r4, #4]
 80051c8:	e7cc      	b.n	8005164 <_malloc_r+0x2c>
 80051ca:	1cc4      	adds	r4, r0, #3
 80051cc:	f024 0403 	bic.w	r4, r4, #3
 80051d0:	42a0      	cmp	r0, r4
 80051d2:	d0e3      	beq.n	800519c <_malloc_r+0x64>
 80051d4:	1a21      	subs	r1, r4, r0
 80051d6:	4630      	mov	r0, r6
 80051d8:	f000 f82e 	bl	8005238 <_sbrk_r>
 80051dc:	3001      	adds	r0, #1
 80051de:	d1dd      	bne.n	800519c <_malloc_r+0x64>
 80051e0:	e7cf      	b.n	8005182 <_malloc_r+0x4a>
 80051e2:	bf00      	nop
 80051e4:	20000090 	.word	0x20000090
 80051e8:	20000094 	.word	0x20000094

080051ec <_realloc_r>:
 80051ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ee:	4607      	mov	r7, r0
 80051f0:	4614      	mov	r4, r2
 80051f2:	460e      	mov	r6, r1
 80051f4:	b921      	cbnz	r1, 8005200 <_realloc_r+0x14>
 80051f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80051fa:	4611      	mov	r1, r2
 80051fc:	f7ff bf9c 	b.w	8005138 <_malloc_r>
 8005200:	b922      	cbnz	r2, 800520c <_realloc_r+0x20>
 8005202:	f7ff ff49 	bl	8005098 <_free_r>
 8005206:	4625      	mov	r5, r4
 8005208:	4628      	mov	r0, r5
 800520a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800520c:	f000 f830 	bl	8005270 <_malloc_usable_size_r>
 8005210:	42a0      	cmp	r0, r4
 8005212:	d20f      	bcs.n	8005234 <_realloc_r+0x48>
 8005214:	4621      	mov	r1, r4
 8005216:	4638      	mov	r0, r7
 8005218:	f7ff ff8e 	bl	8005138 <_malloc_r>
 800521c:	4605      	mov	r5, r0
 800521e:	2800      	cmp	r0, #0
 8005220:	d0f2      	beq.n	8005208 <_realloc_r+0x1c>
 8005222:	4631      	mov	r1, r6
 8005224:	4622      	mov	r2, r4
 8005226:	f7ff ff0f 	bl	8005048 <memcpy>
 800522a:	4631      	mov	r1, r6
 800522c:	4638      	mov	r0, r7
 800522e:	f7ff ff33 	bl	8005098 <_free_r>
 8005232:	e7e9      	b.n	8005208 <_realloc_r+0x1c>
 8005234:	4635      	mov	r5, r6
 8005236:	e7e7      	b.n	8005208 <_realloc_r+0x1c>

08005238 <_sbrk_r>:
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	4d06      	ldr	r5, [pc, #24]	; (8005254 <_sbrk_r+0x1c>)
 800523c:	2300      	movs	r3, #0
 800523e:	4604      	mov	r4, r0
 8005240:	4608      	mov	r0, r1
 8005242:	602b      	str	r3, [r5, #0]
 8005244:	f7fc f8be 	bl	80013c4 <_sbrk>
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	d102      	bne.n	8005252 <_sbrk_r+0x1a>
 800524c:	682b      	ldr	r3, [r5, #0]
 800524e:	b103      	cbz	r3, 8005252 <_sbrk_r+0x1a>
 8005250:	6023      	str	r3, [r4, #0]
 8005252:	bd38      	pop	{r3, r4, r5, pc}
 8005254:	2000016c 	.word	0x2000016c

08005258 <__malloc_lock>:
 8005258:	4801      	ldr	r0, [pc, #4]	; (8005260 <__malloc_lock+0x8>)
 800525a:	f000 b811 	b.w	8005280 <__retarget_lock_acquire_recursive>
 800525e:	bf00      	nop
 8005260:	20000174 	.word	0x20000174

08005264 <__malloc_unlock>:
 8005264:	4801      	ldr	r0, [pc, #4]	; (800526c <__malloc_unlock+0x8>)
 8005266:	f000 b80c 	b.w	8005282 <__retarget_lock_release_recursive>
 800526a:	bf00      	nop
 800526c:	20000174 	.word	0x20000174

08005270 <_malloc_usable_size_r>:
 8005270:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005274:	1f18      	subs	r0, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	bfbc      	itt	lt
 800527a:	580b      	ldrlt	r3, [r1, r0]
 800527c:	18c0      	addlt	r0, r0, r3
 800527e:	4770      	bx	lr

08005280 <__retarget_lock_acquire_recursive>:
 8005280:	4770      	bx	lr

08005282 <__retarget_lock_release_recursive>:
 8005282:	4770      	bx	lr

08005284 <_init>:
 8005284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005286:	bf00      	nop
 8005288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528a:	bc08      	pop	{r3}
 800528c:	469e      	mov	lr, r3
 800528e:	4770      	bx	lr

08005290 <_fini>:
 8005290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005292:	bf00      	nop
 8005294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005296:	bc08      	pop	{r3}
 8005298:	469e      	mov	lr, r3
 800529a:	4770      	bx	lr
