
essai1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08008028  08008028  00018028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800848c  0800848c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800848c  0800848c  0001848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008494  08008494  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008494  08008494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800849c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  200001dc  08008678  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08008678  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018cb1  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c7c  00000000  00000000  00038ebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0003bb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  0003cdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f3f  00000000  00000000  0003df38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fed  00000000  00000000  00066e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7102  00000000  00000000  0007de64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00174f66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f24  00000000  00000000  00174fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800800c 	.word	0x0800800c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800800c 	.word	0x0800800c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08a      	sub	sp, #40	; 0x28
 8000ea4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea6:	f107 0314 	add.w	r3, r7, #20
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb6:	4b2c      	ldr	r3, [pc, #176]	; (8000f68 <MX_GPIO_Init+0xc8>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a2b      	ldr	r2, [pc, #172]	; (8000f68 <MX_GPIO_Init+0xc8>)
 8000ebc:	f043 0304 	orr.w	r3, r3, #4
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b29      	ldr	r3, [pc, #164]	; (8000f68 <MX_GPIO_Init+0xc8>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <MX_GPIO_Init+0xc8>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4a25      	ldr	r2, [pc, #148]	; (8000f68 <MX_GPIO_Init+0xc8>)
 8000ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4b23      	ldr	r3, [pc, #140]	; (8000f68 <MX_GPIO_Init+0xc8>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <MX_GPIO_Init+0xc8>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a1f      	ldr	r2, [pc, #124]	; (8000f68 <MX_GPIO_Init+0xc8>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_GPIO_Init+0xc8>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b1a      	ldr	r3, [pc, #104]	; (8000f68 <MX_GPIO_Init+0xc8>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a19      	ldr	r2, [pc, #100]	; (8000f68 <MX_GPIO_Init+0xc8>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_GPIO_Init+0xc8>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SIG_Pin, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f001 f906 	bl	8002130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f2a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480c      	ldr	r0, [pc, #48]	; (8000f6c <MX_GPIO_Init+0xcc>)
 8000f3c:	f000 ff36 	bl	8001dac <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SIG_Pin;
 8000f40:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5c:	f000 ff26 	bl	8001dac <HAL_GPIO_Init>

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	48000800 	.word	0x48000800

08000f70 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f76:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <MX_I2C1_Init+0x78>)
 8000f78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <MX_I2C1_Init+0x7c>)
 8000f7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000faa:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fac:	f001 f8d8 	bl	8002160 <HAL_I2C_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fb6:	f000 fb25 	bl	8001604 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fbe:	f001 fd59 	bl	8002a74 <HAL_I2CEx_ConfigAnalogFilter>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fc8:	f000 fb1c 	bl	8001604 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_I2C1_Init+0x74>)
 8000fd0:	f001 fd9b 	bl	8002b0a <HAL_I2CEx_ConfigDigitalFilter>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fda:	f000 fb13 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000021c 	.word	0x2000021c
 8000fe8:	40005400 	.word	0x40005400
 8000fec:	10909cec 	.word	0x10909cec

08000ff0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b0ac      	sub	sp, #176	; 0xb0
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001008:	f107 0314 	add.w	r3, r7, #20
 800100c:	2288      	movs	r2, #136	; 0x88
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f004 f95f 	bl	80052d4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a21      	ldr	r2, [pc, #132]	; (80010a0 <HAL_I2C_MspInit+0xb0>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d13b      	bne.n	8001098 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001020:	2340      	movs	r3, #64	; 0x40
 8001022:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001024:	2300      	movs	r3, #0
 8001026:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4618      	mov	r0, r3
 800102e:	f002 fc09 	bl	8003844 <HAL_RCCEx_PeriphCLKConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001038:	f000 fae4 	bl	8001604 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103c:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <HAL_I2C_MspInit+0xb4>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001040:	4a18      	ldr	r2, [pc, #96]	; (80010a4 <HAL_I2C_MspInit+0xb4>)
 8001042:	f043 0302 	orr.w	r3, r3, #2
 8001046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <HAL_I2C_MspInit+0xb4>)
 800104a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104c:	f003 0302 	and.w	r3, r3, #2
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001054:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001058:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105c:	2312      	movs	r3, #18
 800105e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001062:	2301      	movs	r3, #1
 8001064:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800106e:	2304      	movs	r3, #4
 8001070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001078:	4619      	mov	r1, r3
 800107a:	480b      	ldr	r0, [pc, #44]	; (80010a8 <HAL_I2C_MspInit+0xb8>)
 800107c:	f000 fe96 	bl	8001dac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <HAL_I2C_MspInit+0xb4>)
 8001082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001084:	4a07      	ldr	r2, [pc, #28]	; (80010a4 <HAL_I2C_MspInit+0xb4>)
 8001086:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800108a:	6593      	str	r3, [r2, #88]	; 0x58
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <HAL_I2C_MspInit+0xb4>)
 800108e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001090:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001098:	bf00      	nop
 800109a:	37b0      	adds	r7, #176	; 0xb0
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40005400 	.word	0x40005400
 80010a4:	40021000 	.word	0x40021000
 80010a8:	48000400 	.word	0x48000400

080010ac <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	f043 030c 	orr.w	r3, r3, #12
 80010c2:	b2da      	uxtb	r2, r3
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80010c8:	2380      	movs	r3, #128	; 0x80
 80010ca:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	f043 0320 	orr.w	r3, r3, #32
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80010d8:	f107 0118 	add.w	r1, r7, #24
 80010dc:	230a      	movs	r3, #10
 80010de:	2202      	movs	r2, #2
 80010e0:	486c      	ldr	r0, [pc, #432]	; (8001294 <lcd_init+0x1e8>)
 80010e2:	f003 fbff 	bl	80048e4 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 80010e6:	f640 230d 	movw	r3, #2573	; 0xa0d
 80010ea:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 80010ec:	f107 0114 	add.w	r1, r7, #20
 80010f0:	230a      	movs	r3, #10
 80010f2:	2202      	movs	r2, #2
 80010f4:	4867      	ldr	r0, [pc, #412]	; (8001294 <lcd_init+0x1e8>)
 80010f6:	f003 fbf5 	bl	80048e4 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 80010fa:	2364      	movs	r3, #100	; 0x64
 80010fc:	2205      	movs	r2, #5
 80010fe:	217c      	movs	r1, #124	; 0x7c
 8001100:	69f8      	ldr	r0, [r7, #28]
 8001102:	f001 f9b1 	bl	8002468 <HAL_I2C_IsDeviceReady>
 8001106:	4603      	mov	r3, r0
 8001108:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 800110a:	f107 0113 	add.w	r1, r7, #19
 800110e:	230a      	movs	r3, #10
 8001110:	2201      	movs	r2, #1
 8001112:	4860      	ldr	r0, [pc, #384]	; (8001294 <lcd_init+0x1e8>)
 8001114:	f003 fbe6 	bl	80048e4 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001118:	2032      	movs	r0, #50	; 0x32
 800111a:	f000 fd3d 	bl	8001b98 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 800111e:	f107 0218 	add.w	r2, r7, #24
 8001122:	f241 3388 	movw	r3, #5000	; 0x1388
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	2302      	movs	r3, #2
 800112a:	217c      	movs	r1, #124	; 0x7c
 800112c:	69f8      	ldr	r0, [r7, #28]
 800112e:	f001 f8a7 	bl	8002280 <HAL_I2C_Master_Transmit>
 8001132:	4603      	mov	r3, r0
 8001134:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8001136:	f107 0112 	add.w	r1, r7, #18
 800113a:	230a      	movs	r3, #10
 800113c:	2201      	movs	r2, #1
 800113e:	4855      	ldr	r0, [pc, #340]	; (8001294 <lcd_init+0x1e8>)
 8001140:	f003 fbd0 	bl	80048e4 <HAL_UART_Transmit>
	HAL_Delay(50);
 8001144:	2032      	movs	r0, #50	; 0x32
 8001146:	f000 fd27 	bl	8001b98 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 800114a:	f107 0218 	add.w	r2, r7, #24
 800114e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2302      	movs	r3, #2
 8001156:	217c      	movs	r1, #124	; 0x7c
 8001158:	69f8      	ldr	r0, [r7, #28]
 800115a:	f001 f891 	bl	8002280 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800115e:	2005      	movs	r0, #5
 8001160:	f000 fd1a 	bl	8001b98 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8001164:	f107 0218 	add.w	r2, r7, #24
 8001168:	f241 3388 	movw	r3, #5000	; 0x1388
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2302      	movs	r3, #2
 8001170:	217c      	movs	r1, #124	; 0x7c
 8001172:	69f8      	ldr	r0, [r7, #28]
 8001174:	f001 f884 	bl	8002280 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2204      	movs	r2, #4
 800117c:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	785b      	ldrb	r3, [r3, #1]
 8001182:	f043 0308 	orr.w	r3, r3, #8
 8001186:	b2db      	uxtb	r3, r3
 8001188:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 800118a:	f107 0218 	add.w	r2, r7, #24
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2302      	movs	r3, #2
 8001196:	217c      	movs	r1, #124	; 0x7c
 8001198:	69f8      	ldr	r0, [r7, #28]
 800119a:	f001 f871 	bl	8002280 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 800119e:	2301      	movs	r3, #1
 80011a0:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80011a2:	f107 0218 	add.w	r2, r7, #24
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2302      	movs	r3, #2
 80011ae:	217c      	movs	r1, #124	; 0x7c
 80011b0:	69f8      	ldr	r0, [r7, #28]
 80011b2:	f001 f865 	bl	8002280 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80011b6:	2002      	movs	r0, #2
 80011b8:	f000 fcee 	bl	8001b98 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2202      	movs	r2, #2
 80011c0:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	789b      	ldrb	r3, [r3, #2]
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80011ce:	f107 0218 	add.w	r2, r7, #24
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2302      	movs	r3, #2
 80011da:	217c      	movs	r1, #124	; 0x7c
 80011dc:	69f8      	ldr	r0, [r7, #28]
 80011de:	f001 f84f 	bl	8002280 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 80011ea:	f107 0210 	add.w	r2, r7, #16
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2302      	movs	r3, #2
 80011f6:	21c4      	movs	r1, #196	; 0xc4
 80011f8:	69f8      	ldr	r0, [r7, #28]
 80011fa:	f001 f841 	bl	8002280 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 80011fe:	2308      	movs	r3, #8
 8001200:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 8001202:	23ff      	movs	r3, #255	; 0xff
 8001204:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001206:	f107 0210 	add.w	r2, r7, #16
 800120a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2302      	movs	r3, #2
 8001212:	21c4      	movs	r1, #196	; 0xc4
 8001214:	69f8      	ldr	r0, [r7, #28]
 8001216:	f001 f833 	bl	8002280 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 800121a:	2301      	movs	r3, #1
 800121c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 800121e:	2320      	movs	r3, #32
 8001220:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8001222:	f107 0210 	add.w	r2, r7, #16
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2302      	movs	r3, #2
 800122e:	21c4      	movs	r1, #196	; 0xc4
 8001230:	69f8      	ldr	r0, [r7, #28]
 8001232:	f001 f825 	bl	8002280 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8001236:	2304      	movs	r3, #4
 8001238:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800123a:	23ff      	movs	r3, #255	; 0xff
 800123c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800123e:	f107 020c 	add.w	r2, r7, #12
 8001242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2302      	movs	r3, #2
 800124a:	21c4      	movs	r1, #196	; 0xc4
 800124c:	69f8      	ldr	r0, [r7, #28]
 800124e:	f001 f817 	bl	8002280 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 8001252:	2303      	movs	r3, #3
 8001254:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001256:	23ff      	movs	r3, #255	; 0xff
 8001258:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800125a:	f107 020c 	add.w	r2, r7, #12
 800125e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2302      	movs	r3, #2
 8001266:	21c4      	movs	r1, #196	; 0xc4
 8001268:	69f8      	ldr	r0, [r7, #28]
 800126a:	f001 f809 	bl	8002280 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 800126e:	2302      	movs	r3, #2
 8001270:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8001272:	23ff      	movs	r3, #255	; 0xff
 8001274:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8001276:	f107 020c 	add.w	r2, r7, #12
 800127a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2302      	movs	r3, #2
 8001282:	21c4      	movs	r1, #196	; 0xc4
 8001284:	69f8      	ldr	r0, [r7, #28]
 8001286:	f000 fffb 	bl	8002280 <HAL_I2C_Master_Transmit>


}
 800128a:	bf00      	nop
 800128c:	3720      	adds	r7, #32
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200002b8 	.word	0x200002b8

08001298 <clearlcd>:



void clearlcd(void) // permet d'effacer tout ce qui s'affiche sur le lcd
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	lcd_position(&hi2c1,0,0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	4808      	ldr	r0, [pc, #32]	; (80012c4 <clearlcd+0x2c>)
 80012a2:	f000 f83c 	bl	800131e <lcd_position>
	lcd_print(&hi2c1,"                ");
 80012a6:	4908      	ldr	r1, [pc, #32]	; (80012c8 <clearlcd+0x30>)
 80012a8:	4806      	ldr	r0, [pc, #24]	; (80012c4 <clearlcd+0x2c>)
 80012aa:	f000 f80f 	bl	80012cc <lcd_print>
	lcd_position(&hi2c1,0,1);
 80012ae:	2201      	movs	r2, #1
 80012b0:	2100      	movs	r1, #0
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <clearlcd+0x2c>)
 80012b4:	f000 f833 	bl	800131e <lcd_position>
	lcd_print(&hi2c1,"                ");
 80012b8:	4903      	ldr	r1, [pc, #12]	; (80012c8 <clearlcd+0x30>)
 80012ba:	4802      	ldr	r0, [pc, #8]	; (80012c4 <clearlcd+0x2c>)
 80012bc:	f000 f806 	bl	80012cc <lcd_print>
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000021c 	.word	0x2000021c
 80012c8:	08008028 	.word	0x08008028

080012cc <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af02      	add	r7, sp, #8
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 80012da:	2340      	movs	r3, #64	; 0x40
 80012dc:	733b      	strb	r3, [r7, #12]
    int i=0;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80012e2:	e011      	b.n	8001308 <lcd_print+0x3c>
    {
            data[1] = str[i];
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80012ee:	f107 020c 	add.w	r2, r7, #12
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2302      	movs	r3, #2
 80012fa:	217c      	movs	r1, #124	; 0x7c
 80012fc:	6938      	ldr	r0, [r7, #16]
 80012fe:	f000 ffbf 	bl	8002280 <HAL_I2C_Master_Transmit>
            i++;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	3301      	adds	r3, #1
 8001306:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	683a      	ldr	r2, [r7, #0]
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1e7      	bne.n	80012e4 <lcd_print+0x18>
   }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af02      	add	r7, sp, #8
 8001324:	6078      	str	r0, [r7, #4]
 8001326:	460b      	mov	r3, r1
 8001328:	70fb      	strb	r3, [r7, #3]
 800132a:	4613      	mov	r3, r2
 800132c:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 8001332:	78bb      	ldrb	r3, [r7, #2]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d104      	bne.n	8001342 <lcd_position+0x24>
    {
        col = col | 0x80;
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800133e:	70fb      	strb	r3, [r7, #3]
 8001340:	e003      	b.n	800134a <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 8001342:	78fb      	ldrb	r3, [r7, #3]
 8001344:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001348:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 800134a:	2380      	movs	r3, #128	; 0x80
 800134c:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 800134e:	78fb      	ldrb	r3, [r7, #3]
 8001350:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 8001352:	f107 0208 	add.w	r2, r7, #8
 8001356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2302      	movs	r3, #2
 800135e:	217c      	movs	r1, #124	; 0x7c
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f000 ff8d 	bl	8002280 <HAL_I2C_Master_Transmit>
}
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <delay_us>:
/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
 static rgb_lcd lcdData;

 void delay_us(uint16_t us){ // Fonction permettant d'avoir un timer qui compte en microseconde
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]

 	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <delay_us+0x30>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
 	while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 8001382:	bf00      	nop
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <delay_us+0x30>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	429a      	cmp	r2, r3
 800138e:	d3f9      	bcc.n	8001384 <delay_us+0x14>
 }
 8001390:	bf00      	nop
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	2000026c 	.word	0x2000026c

080013a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t temp[16] = "";
 80013aa:	2300      	movs	r3, #0
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b8:	f000 fb72 	bl	8001aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013bc:	f000 f86e 	bl	800149c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c0:	f7ff fd6e 	bl	8000ea0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013c4:	f000 fab6 	bl	8001934 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013c8:	f7ff fdd2 	bl	8000f70 <MX_I2C1_Init>
  MX_TIM2_Init();
 80013cc:	f000 fa46 	bl	800185c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 80013d0:	482b      	ldr	r0, [pc, #172]	; (8001480 <main+0xdc>)
 80013d2:	f002 ff4b 	bl	800426c <HAL_TIM_Base_Start>

  lcd_init(&hi2c1, &lcdData);
 80013d6:	492b      	ldr	r1, [pc, #172]	; (8001484 <main+0xe0>)
 80013d8:	482b      	ldr	r0, [pc, #172]	; (8001488 <main+0xe4>)
 80013da:	f7ff fe67 	bl	80010ac <lcd_init>

  clearlcd();
 80013de:	f7ff ff5b 	bl	8001298 <clearlcd>
  lcd_print(&hi2c1,"Hello world");
 80013e2:	492a      	ldr	r1, [pc, #168]	; (800148c <main+0xe8>)
 80013e4:	4828      	ldr	r0, [pc, #160]	; (8001488 <main+0xe4>)
 80013e6:	f7ff ff71 	bl	80012cc <lcd_print>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MX_GPIO_output();														//on configure le pin en sortie
 80013ea:	f000 f8a9 	bl	8001540 <MX_GPIO_output>
	 	  HAL_GPIO_WritePin(SIG_GPIO_Port, SIG_Pin, GPIO_PIN_SET);				//on passe le pin Ã  l'Ã©tat haut
 80013ee:	2201      	movs	r2, #1
 80013f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f000 fe9a 	bl	8002130 <HAL_GPIO_WritePin>
	 	  delay_us (20);														//pendant 20 microsec pour dÃ©clencher une mesure
 80013fc:	2014      	movs	r0, #20
 80013fe:	f7ff ffb7 	bl	8001370 <delay_us>
	 	  HAL_GPIO_WritePin(SIG_GPIO_Port, SIG_Pin, GPIO_PIN_RESET);			//puis on passe le pin Ã  l'Ã©tat bas
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140c:	f000 fe90 	bl	8002130 <HAL_GPIO_WritePin>
	 	  MX_GPIO_input();														//on configure le pin en entrÃ©e
 8001410:	f000 f8ae 	bl	8001570 <MX_GPIO_input>
	 	  distance = mesure_distance(SIG_GPIO_Port, SIG_Pin);
 8001414:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f000 f8be 	bl	800159c <mesure_distance>
 8001420:	eef0 7a40 	vmov.f32	s15, s0
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <main+0xec>)
 8001426:	edc3 7a00 	vstr	s15, [r3]

	 	  clearlcd();
 800142a:	f7ff ff35 	bl	8001298 <clearlcd>
		  lcd_position(&hi2c1,0,0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	4815      	ldr	r0, [pc, #84]	; (8001488 <main+0xe4>)
 8001434:	f7ff ff73 	bl	800131e <lcd_position>
	 	  lcd_print(&hi2c1,"The distance is:");
 8001438:	4916      	ldr	r1, [pc, #88]	; (8001494 <main+0xf0>)
 800143a:	4813      	ldr	r0, [pc, #76]	; (8001488 <main+0xe4>)
 800143c:	f7ff ff46 	bl	80012cc <lcd_print>

	 	  lcd_position(&hi2c1, 0, 1);
 8001440:	2201      	movs	r2, #1
 8001442:	2100      	movs	r1, #0
 8001444:	4810      	ldr	r0, [pc, #64]	; (8001488 <main+0xe4>)
 8001446:	f7ff ff6a 	bl	800131e <lcd_position>
	 	  memset(temp,0,sizeof(temp));
 800144a:	463b      	mov	r3, r7
 800144c:	2210      	movs	r2, #16
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f003 ff3f 	bl	80052d4 <memset>
	 	  sprintf((char*)temp,"%2.f cm",distance);
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <main+0xec>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f874 	bl	8000548 <__aeabi_f2d>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4638      	mov	r0, r7
 8001466:	490c      	ldr	r1, [pc, #48]	; (8001498 <main+0xf4>)
 8001468:	f004 fba6 	bl	8005bb8 <siprintf>
	 	  lcd_print(&hi2c1,(char*)temp);
 800146c:	463b      	mov	r3, r7
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	; (8001488 <main+0xe4>)
 8001472:	f7ff ff2b 	bl	80012cc <lcd_print>

	 	  HAL_Delay(1000);
 8001476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800147a:	f000 fb8d 	bl	8001b98 <HAL_Delay>
	  MX_GPIO_output();														//on configure le pin en sortie
 800147e:	e7b4      	b.n	80013ea <main+0x46>
 8001480:	2000026c 	.word	0x2000026c
 8001484:	2000020c 	.word	0x2000020c
 8001488:	2000021c 	.word	0x2000021c
 800148c:	0800803c 	.word	0x0800803c
 8001490:	20000268 	.word	0x20000268
 8001494:	08008048 	.word	0x08008048
 8001498:	0800805c 	.word	0x0800805c

0800149c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b096      	sub	sp, #88	; 0x58
 80014a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2244      	movs	r2, #68	; 0x44
 80014a8:	2100      	movs	r1, #0
 80014aa:	4618      	mov	r0, r3
 80014ac:	f003 ff12 	bl	80052d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014c2:	f001 fb7d 	bl	8002bc0 <HAL_PWREx_ControlVoltageScaling>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014cc:	f000 f89a 	bl	8001604 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014d0:	2302      	movs	r3, #2
 80014d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014da:	2310      	movs	r3, #16
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014de:	2302      	movs	r3, #2
 80014e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014e2:	2302      	movs	r3, #2
 80014e4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80014ea:	230a      	movs	r3, #10
 80014ec:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014ee:	2307      	movs	r3, #7
 80014f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014f2:	2302      	movs	r3, #2
 80014f4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4618      	mov	r0, r3
 8001500:	f001 fbb4 	bl	8002c6c <HAL_RCC_OscConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800150a:	f000 f87b 	bl	8001604 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800150e:	230f      	movs	r3, #15
 8001510:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001512:	2303      	movs	r3, #3
 8001514:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001522:	463b      	mov	r3, r7
 8001524:	2104      	movs	r1, #4
 8001526:	4618      	mov	r0, r3
 8001528:	f001 ff86 	bl	8003438 <HAL_RCC_ClockConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001532:	f000 f867 	bl	8001604 <Error_Handler>
  }
}
 8001536:	bf00      	nop
 8001538:	3758      	adds	r7, #88	; 0x58
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <MX_GPIO_output>:

/* USER CODE BEGIN 4 */
void MX_GPIO_output(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
	/*Configure SIG en sortie*/
	  GPIO_InitStruct.Pin = SIG_Pin;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_GPIO_output+0x2c>)
 8001546:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154a:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <MX_GPIO_output+0x2c>)
 800154e:	2201      	movs	r2, #1
 8001550:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_GPIO_output+0x2c>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <MX_GPIO_output+0x2c>)
 800155a:	2203      	movs	r2, #3
 800155c:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(SIG_GPIO_Port, &GPIO_InitStruct);
 800155e:	4903      	ldr	r1, [pc, #12]	; (800156c <MX_GPIO_output+0x2c>)
 8001560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001564:	f000 fc22 	bl	8001dac <HAL_GPIO_Init>
}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200001f8 	.word	0x200001f8

08001570 <MX_GPIO_input>:

void MX_GPIO_input(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	/*Configure SIG en entrÃ©e*/
	GPIO_InitStruct.Pin = SIG_Pin;
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_GPIO_input+0x28>)
 8001576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800157a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_GPIO_input+0x28>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <MX_GPIO_input+0x28>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(SIG_GPIO_Port, &GPIO_InitStruct);
 8001588:	4903      	ldr	r1, [pc, #12]	; (8001598 <MX_GPIO_input+0x28>)
 800158a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158e:	f000 fc0d 	bl	8001dac <HAL_GPIO_Init>
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200001f8 	.word	0x200001f8

0800159c <mesure_distance>:
  }
}*/

//fonction mesure de distance
float mesure_distance(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
	  unsigned long tick=0; 	//on initialise une variable qui contiendra le nbre de tick
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
	  while (!HAL_GPIO_ReadPin(GPIOx, GPIO_Pin)){}
 80015ac:	bf00      	nop
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	4619      	mov	r1, r3
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 fda4 	bl	8002100 <HAL_GPIO_ReadPin>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f7      	beq.n	80015ae <mesure_distance+0x12>

	  while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
 80015be:	e005      	b.n	80015cc <mesure_distance+0x30>
	  {
		delay_us (10);											// on fixe la durÃ©e du tick Ã  10us
 80015c0:	200a      	movs	r0, #10
 80015c2:	f7ff fed5 	bl	8001370 <delay_us>
		tick++;													// puis on incrÃ©mente le tick toutes les 10us
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3301      	adds	r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
	  while (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
 80015cc:	887b      	ldrh	r3, [r7, #2]
 80015ce:	4619      	mov	r1, r3
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f000 fd95 	bl	8002100 <HAL_GPIO_ReadPin>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f1      	bne.n	80015c0 <mesure_distance+0x24>
	  }
	  //100000 pour resultat en m, 1000 pour cm
	  return (tick * 170)/1000; //puis quand le pin n'est plus Ã  1, on calcule la distance en mÃ¨tre et on renvoi la valeur
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	22aa      	movs	r2, #170	; 0xaa
 80015e0:	fb02 f303 	mul.w	r3, r2, r3
 80015e4:	4a06      	ldr	r2, [pc, #24]	; (8001600 <mesure_distance+0x64>)
 80015e6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ea:	099b      	lsrs	r3, r3, #6
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 80015f4:	eeb0 0a67 	vmov.f32	s0, s15
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	10624dd3 	.word	0x10624dd3

08001604 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001608:	b672      	cpsid	i
}
 800160a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800160c:	e7fe      	b.n	800160c <Error_Handler+0x8>
	...

08001610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <HAL_MspInit+0x44>)
 8001618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_MspInit+0x44>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6613      	str	r3, [r2, #96]	; 0x60
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_MspInit+0x44>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_MspInit+0x44>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <HAL_MspInit+0x44>)
 8001634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001638:	6593      	str	r3, [r2, #88]	; 0x58
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_MspInit+0x44>)
 800163c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800163e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001642:	603b      	str	r3, [r7, #0]
 8001644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <MemManage_Handler+0x4>

0800166a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <BusFault_Handler+0x4>

08001670 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <UsageFault_Handler+0x4>

08001676 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016a4:	f000 fa58 	bl	8001b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
	return 1;
 80016b0:	2301      	movs	r3, #1
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <_kill>:

int _kill(int pid, int sig)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016c6:	f003 fddb 	bl	8005280 <__errno>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2216      	movs	r2, #22
 80016ce:	601a      	str	r2, [r3, #0]
	return -1;
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_exit>:

void _exit (int status)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ffe7 	bl	80016bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80016ee:	e7fe      	b.n	80016ee <_exit+0x12>

080016f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
 8001700:	e00a      	b.n	8001718 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001702:	f3af 8000 	nop.w
 8001706:	4601      	mov	r1, r0
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	1c5a      	adds	r2, r3, #1
 800170c:	60ba      	str	r2, [r7, #8]
 800170e:	b2ca      	uxtb	r2, r1
 8001710:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	697a      	ldr	r2, [r7, #20]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbf0      	blt.n	8001702 <_read+0x12>
	}

return len;
 8001720:	687b      	ldr	r3, [r7, #4]
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b086      	sub	sp, #24
 800172e:	af00      	add	r7, sp, #0
 8001730:	60f8      	str	r0, [r7, #12]
 8001732:	60b9      	str	r1, [r7, #8]
 8001734:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e009      	b.n	8001750 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	1c5a      	adds	r2, r3, #1
 8001740:	60ba      	str	r2, [r7, #8]
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4618      	mov	r0, r3
 8001746:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	3301      	adds	r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697a      	ldr	r2, [r7, #20]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	429a      	cmp	r2, r3
 8001756:	dbf1      	blt.n	800173c <_write+0x12>
	}
	return len;
 8001758:	687b      	ldr	r3, [r7, #4]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <_close>:

int _close(int file)
{
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
	return -1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800176e:	4618      	mov	r0, r3
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
 8001782:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800178a:	605a      	str	r2, [r3, #4]
	return 0;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_isatty>:

int _isatty(int file)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
	return 1;
 80017a2:	2301      	movs	r3, #1
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
	return 0;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3714      	adds	r7, #20
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d4:	4a14      	ldr	r2, [pc, #80]	; (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	4b10      	ldr	r3, [pc, #64]	; (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d207      	bcs.n	800180c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017fc:	f003 fd40 	bl	8005280 <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	220c      	movs	r2, #12
 8001804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	e009      	b.n	8001820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800180c:	4b08      	ldr	r3, [pc, #32]	; (8001830 <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001812:	4b07      	ldr	r3, [pc, #28]	; (8001830 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	4a05      	ldr	r2, [pc, #20]	; (8001830 <_sbrk+0x64>)
 800181c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20018000 	.word	0x20018000
 800182c:	00000400 	.word	0x00000400
 8001830:	20000210 	.word	0x20000210
 8001834:	20000350 	.word	0x20000350

08001838 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <SystemInit+0x20>)
 800183e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <SystemInit+0x20>)
 8001844:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001848:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001870:	1d3b      	adds	r3, r7, #4
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]
 8001878:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800187a:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <MX_TIM2_Init+0x98>)
 800187c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001880:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <MX_TIM2_Init+0x98>)
 8001884:	224f      	movs	r2, #79	; 0x4f
 8001886:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <MX_TIM2_Init+0x98>)
 800188a:	2200      	movs	r2, #0
 800188c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <MX_TIM2_Init+0x98>)
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_TIM2_Init+0x98>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <MX_TIM2_Init+0x98>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a2:	4814      	ldr	r0, [pc, #80]	; (80018f4 <MX_TIM2_Init+0x98>)
 80018a4:	f002 fc8a 	bl	80041bc <HAL_TIM_Base_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018ae:	f7ff fea9 	bl	8001604 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018b8:	f107 0310 	add.w	r3, r7, #16
 80018bc:	4619      	mov	r1, r3
 80018be:	480d      	ldr	r0, [pc, #52]	; (80018f4 <MX_TIM2_Init+0x98>)
 80018c0:	f002 fd3c 	bl	800433c <HAL_TIM_ConfigClockSource>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018ca:	f7ff fe9b 	bl	8001604 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	4619      	mov	r1, r3
 80018da:	4806      	ldr	r0, [pc, #24]	; (80018f4 <MX_TIM2_Init+0x98>)
 80018dc:	f002 ff2c 	bl	8004738 <HAL_TIMEx_MasterConfigSynchronization>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018e6:	f7ff fe8d 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	3720      	adds	r7, #32
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	2000026c 	.word	0x2000026c

080018f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001908:	d10b      	bne.n	8001922 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <HAL_TIM_Base_MspInit+0x38>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	4a08      	ldr	r2, [pc, #32]	; (8001930 <HAL_TIM_Base_MspInit+0x38>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6593      	str	r3, [r2, #88]	; 0x58
 8001916:	4b06      	ldr	r3, [pc, #24]	; (8001930 <HAL_TIM_Base_MspInit+0x38>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001922:	bf00      	nop
 8001924:	3714      	adds	r7, #20
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40021000 	.word	0x40021000

08001934 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <MX_USART2_UART_Init+0x58>)
 800193a:	4a15      	ldr	r2, [pc, #84]	; (8001990 <MX_USART2_UART_Init+0x5c>)
 800193c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <MX_USART2_UART_Init+0x58>)
 8001940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b11      	ldr	r3, [pc, #68]	; (800198c <MX_USART2_UART_Init+0x58>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_USART2_UART_Init+0x58>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001952:	4b0e      	ldr	r3, [pc, #56]	; (800198c <MX_USART2_UART_Init+0x58>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <MX_USART2_UART_Init+0x58>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MX_USART2_UART_Init+0x58>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_USART2_UART_Init+0x58>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <MX_USART2_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_USART2_UART_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_USART2_UART_Init+0x58>)
 8001978:	f002 ff66 	bl	8004848 <HAL_UART_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001982:	f7ff fe3f 	bl	8001604 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	200002b8 	.word	0x200002b8
 8001990:	40004400 	.word	0x40004400

08001994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b0ac      	sub	sp, #176	; 0xb0
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
 80019aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	2288      	movs	r2, #136	; 0x88
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f003 fc8d 	bl	80052d4 <memset>
  if(uartHandle->Instance==USART2)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a21      	ldr	r2, [pc, #132]	; (8001a44 <HAL_UART_MspInit+0xb0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d13b      	bne.n	8001a3c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019c4:	2302      	movs	r3, #2
 80019c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019c8:	2300      	movs	r3, #0
 80019ca:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019cc:	f107 0314 	add.w	r3, r7, #20
 80019d0:	4618      	mov	r0, r3
 80019d2:	f001 ff37 	bl	8003844 <HAL_RCCEx_PeriphCLKConfig>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019dc:	f7ff fe12 	bl	8001604 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_UART_MspInit+0xb4>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	4a18      	ldr	r2, [pc, #96]	; (8001a48 <HAL_UART_MspInit+0xb4>)
 80019e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ea:	6593      	str	r3, [r2, #88]	; 0x58
 80019ec:	4b16      	ldr	r3, [pc, #88]	; (8001a48 <HAL_UART_MspInit+0xb4>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f8:	4b13      	ldr	r3, [pc, #76]	; (8001a48 <HAL_UART_MspInit+0xb4>)
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	4a12      	ldr	r2, [pc, #72]	; (8001a48 <HAL_UART_MspInit+0xb4>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <HAL_UART_MspInit+0xb4>)
 8001a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a10:	230c      	movs	r3, #12
 8001a12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a28:	2307      	movs	r3, #7
 8001a2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a32:	4619      	mov	r1, r3
 8001a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a38:	f000 f9b8 	bl	8001dac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	37b0      	adds	r7, #176	; 0xb0
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40004400 	.word	0x40004400
 8001a48:	40021000 	.word	0x40021000

08001a4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a50:	f7ff fef2 	bl	8001838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a54:	480c      	ldr	r0, [pc, #48]	; (8001a88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a56:	490d      	ldr	r1, [pc, #52]	; (8001a8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a58:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <LoopForever+0xe>)
  movs r3, #0
 8001a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a5c:	e002      	b.n	8001a64 <LoopCopyDataInit>

08001a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a62:	3304      	adds	r3, #4

08001a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a68:	d3f9      	bcc.n	8001a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a6c:	4c0a      	ldr	r4, [pc, #40]	; (8001a98 <LoopForever+0x16>)
  movs r3, #0
 8001a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a70:	e001      	b.n	8001a76 <LoopFillZerobss>

08001a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a74:	3204      	adds	r2, #4

08001a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a78:	d3fb      	bcc.n	8001a72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a7a:	f003 fc07 	bl	800528c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a7e:	f7ff fc91 	bl	80013a4 <main>

08001a82 <LoopForever>:

LoopForever:
    b LoopForever
 8001a82:	e7fe      	b.n	8001a82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001a84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a8c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a90:	0800849c 	.word	0x0800849c
  ldr r2, =_sbss
 8001a94:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001a98:	20000350 	.word	0x20000350

08001a9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a9c:	e7fe      	b.n	8001a9c <ADC1_2_IRQHandler>
	...

08001aa0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_Init+0x3c>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <HAL_Init+0x3c>)
 8001ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ab6:	2003      	movs	r0, #3
 8001ab8:	f000 f944 	bl	8001d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001abc:	2000      	movs	r0, #0
 8001abe:	f000 f80f 	bl	8001ae0 <HAL_InitTick>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	71fb      	strb	r3, [r7, #7]
 8001acc:	e001      	b.n	8001ad2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ace:	f7ff fd9f 	bl	8001610 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40022000 	.word	0x40022000

08001ae0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001aec:	4b17      	ldr	r3, [pc, #92]	; (8001b4c <HAL_InitTick+0x6c>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d023      	beq.n	8001b3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001af4:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <HAL_InitTick+0x70>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <HAL_InitTick+0x6c>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4619      	mov	r1, r3
 8001afe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f941 	bl	8001d92 <HAL_SYSTICK_Config>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10f      	bne.n	8001b36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b0f      	cmp	r3, #15
 8001b1a:	d809      	bhi.n	8001b30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295
 8001b24:	f000 f919 	bl	8001d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <HAL_InitTick+0x74>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
 8001b2e:	e007      	b.n	8001b40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
 8001b34:	e004      	b.n	8001b40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]
 8001b3a:	e001      	b.n	8001b40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000008 	.word	0x20000008
 8001b50:	20000000 	.word	0x20000000
 8001b54:	20000004 	.word	0x20000004

08001b58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x20>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_IncTick+0x24>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4413      	add	r3, r2
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <HAL_IncTick+0x24>)
 8001b6a:	6013      	str	r3, [r2, #0]
}
 8001b6c:	bf00      	nop
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20000008 	.word	0x20000008
 8001b7c:	2000033c 	.word	0x2000033c

08001b80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return uwTick;
 8001b84:	4b03      	ldr	r3, [pc, #12]	; (8001b94 <HAL_GetTick+0x14>)
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	2000033c 	.word	0x2000033c

08001b98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff ffee 	bl	8001b80 <HAL_GetTick>
 8001ba4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb0:	d005      	beq.n	8001bbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <HAL_Delay+0x44>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4413      	add	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bbe:	bf00      	nop
 8001bc0:	f7ff ffde 	bl	8001b80 <HAL_GetTick>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	68fa      	ldr	r2, [r7, #12]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d8f7      	bhi.n	8001bc0 <HAL_Delay+0x28>
  {
  }
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000008 	.word	0x20000008

08001be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c12:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	60d3      	str	r3, [r2, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <__NVIC_GetPriorityGrouping+0x18>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	f003 0307 	and.w	r3, r3, #7
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	db0a      	blt.n	8001c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	490c      	ldr	r1, [pc, #48]	; (8001c90 <__NVIC_SetPriority+0x4c>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	0112      	lsls	r2, r2, #4
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	440b      	add	r3, r1
 8001c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c6c:	e00a      	b.n	8001c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	b2da      	uxtb	r2, r3
 8001c72:	4908      	ldr	r1, [pc, #32]	; (8001c94 <__NVIC_SetPriority+0x50>)
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	3b04      	subs	r3, #4
 8001c7c:	0112      	lsls	r2, r2, #4
 8001c7e:	b2d2      	uxtb	r2, r2
 8001c80:	440b      	add	r3, r1
 8001c82:	761a      	strb	r2, [r3, #24]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	e000e100 	.word	0xe000e100
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f1c3 0307 	rsb	r3, r3, #7
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	bf28      	it	cs
 8001cb6:	2304      	movcs	r3, #4
 8001cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	2b06      	cmp	r3, #6
 8001cc0:	d902      	bls.n	8001cc8 <NVIC_EncodePriority+0x30>
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3b03      	subs	r3, #3
 8001cc6:	e000      	b.n	8001cca <NVIC_EncodePriority+0x32>
 8001cc8:	2300      	movs	r3, #0
 8001cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43da      	mvns	r2, r3
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	401a      	ands	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cea:	43d9      	mvns	r1, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf0:	4313      	orrs	r3, r2
         );
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3724      	adds	r7, #36	; 0x24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
	...

08001d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d10:	d301      	bcc.n	8001d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d12:	2301      	movs	r3, #1
 8001d14:	e00f      	b.n	8001d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <SysTick_Config+0x40>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d1e:	210f      	movs	r1, #15
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	f7ff ff8e 	bl	8001c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <SysTick_Config+0x40>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d2e:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <SysTick_Config+0x40>)
 8001d30:	2207      	movs	r2, #7
 8001d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	e000e010 	.word	0xe000e010

08001d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff47 	bl	8001be0 <__NVIC_SetPriorityGrouping>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	4603      	mov	r3, r0
 8001d62:	60b9      	str	r1, [r7, #8]
 8001d64:	607a      	str	r2, [r7, #4]
 8001d66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d6c:	f7ff ff5c 	bl	8001c28 <__NVIC_GetPriorityGrouping>
 8001d70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	68b9      	ldr	r1, [r7, #8]
 8001d76:	6978      	ldr	r0, [r7, #20]
 8001d78:	f7ff ff8e 	bl	8001c98 <NVIC_EncodePriority>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d82:	4611      	mov	r1, r2
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff5d 	bl	8001c44 <__NVIC_SetPriority>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b082      	sub	sp, #8
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7ff ffb0 	bl	8001d00 <SysTick_Config>
 8001da0:	4603      	mov	r3, r0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
	...

08001dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dba:	e17f      	b.n	80020bc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 8171 	beq.w	80020b6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d005      	beq.n	8001dec <HAL_GPIO_Init+0x40>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d130      	bne.n	8001e4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	2203      	movs	r2, #3
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e22:	2201      	movs	r2, #1
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	f003 0201 	and.w	r2, r3, #1
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 0303 	and.w	r3, r3, #3
 8001e56:	2b03      	cmp	r3, #3
 8001e58:	d118      	bne.n	8001e8c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e60:	2201      	movs	r2, #1
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	08db      	lsrs	r3, r3, #3
 8001e76:	f003 0201 	and.w	r2, r3, #1
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d017      	beq.n	8001ec8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	693a      	ldr	r2, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0303 	and.w	r3, r3, #3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d123      	bne.n	8001f1c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	08da      	lsrs	r2, r3, #3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3208      	adds	r2, #8
 8001edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	220f      	movs	r2, #15
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	691a      	ldr	r2, [r3, #16]
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	08da      	lsrs	r2, r3, #3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	3208      	adds	r2, #8
 8001f16:	6939      	ldr	r1, [r7, #16]
 8001f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4013      	ands	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0203 	and.w	r2, r3, #3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 80ac 	beq.w	80020b6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5e:	4b5f      	ldr	r3, [pc, #380]	; (80020dc <HAL_GPIO_Init+0x330>)
 8001f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f62:	4a5e      	ldr	r2, [pc, #376]	; (80020dc <HAL_GPIO_Init+0x330>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	6613      	str	r3, [r2, #96]	; 0x60
 8001f6a:	4b5c      	ldr	r3, [pc, #368]	; (80020dc <HAL_GPIO_Init+0x330>)
 8001f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f76:	4a5a      	ldr	r2, [pc, #360]	; (80020e0 <HAL_GPIO_Init+0x334>)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	089b      	lsrs	r3, r3, #2
 8001f7c:	3302      	adds	r3, #2
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	220f      	movs	r2, #15
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	4013      	ands	r3, r2
 8001f98:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fa0:	d025      	beq.n	8001fee <HAL_GPIO_Init+0x242>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a4f      	ldr	r2, [pc, #316]	; (80020e4 <HAL_GPIO_Init+0x338>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01f      	beq.n	8001fea <HAL_GPIO_Init+0x23e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4e      	ldr	r2, [pc, #312]	; (80020e8 <HAL_GPIO_Init+0x33c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d019      	beq.n	8001fe6 <HAL_GPIO_Init+0x23a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4d      	ldr	r2, [pc, #308]	; (80020ec <HAL_GPIO_Init+0x340>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d013      	beq.n	8001fe2 <HAL_GPIO_Init+0x236>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4c      	ldr	r2, [pc, #304]	; (80020f0 <HAL_GPIO_Init+0x344>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00d      	beq.n	8001fde <HAL_GPIO_Init+0x232>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4b      	ldr	r2, [pc, #300]	; (80020f4 <HAL_GPIO_Init+0x348>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <HAL_GPIO_Init+0x22e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4a      	ldr	r2, [pc, #296]	; (80020f8 <HAL_GPIO_Init+0x34c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_GPIO_Init+0x22a>
 8001fd2:	2306      	movs	r3, #6
 8001fd4:	e00c      	b.n	8001ff0 <HAL_GPIO_Init+0x244>
 8001fd6:	2307      	movs	r3, #7
 8001fd8:	e00a      	b.n	8001ff0 <HAL_GPIO_Init+0x244>
 8001fda:	2305      	movs	r3, #5
 8001fdc:	e008      	b.n	8001ff0 <HAL_GPIO_Init+0x244>
 8001fde:	2304      	movs	r3, #4
 8001fe0:	e006      	b.n	8001ff0 <HAL_GPIO_Init+0x244>
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e004      	b.n	8001ff0 <HAL_GPIO_Init+0x244>
 8001fe6:	2302      	movs	r3, #2
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_Init+0x244>
 8001fea:	2301      	movs	r3, #1
 8001fec:	e000      	b.n	8001ff0 <HAL_GPIO_Init+0x244>
 8001fee:	2300      	movs	r3, #0
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	f002 0203 	and.w	r2, r2, #3
 8001ff6:	0092      	lsls	r2, r2, #2
 8001ff8:	4093      	lsls	r3, r2
 8001ffa:	693a      	ldr	r2, [r7, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002000:	4937      	ldr	r1, [pc, #220]	; (80020e0 <HAL_GPIO_Init+0x334>)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	089b      	lsrs	r3, r3, #2
 8002006:	3302      	adds	r3, #2
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <HAL_GPIO_Init+0x350>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	43db      	mvns	r3, r3
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4013      	ands	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002032:	4a32      	ldr	r2, [pc, #200]	; (80020fc <HAL_GPIO_Init+0x350>)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002038:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_GPIO_Init+0x350>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d003      	beq.n	800205c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800205c:	4a27      	ldr	r2, [pc, #156]	; (80020fc <HAL_GPIO_Init+0x350>)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002062:	4b26      	ldr	r3, [pc, #152]	; (80020fc <HAL_GPIO_Init+0x350>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	43db      	mvns	r3, r3
 800206c:	693a      	ldr	r2, [r7, #16]
 800206e:	4013      	ands	r3, r2
 8002070:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800207e:	693a      	ldr	r2, [r7, #16]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002086:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_GPIO_Init+0x350>)
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800208c:	4b1b      	ldr	r3, [pc, #108]	; (80020fc <HAL_GPIO_Init+0x350>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	43db      	mvns	r3, r3
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	4013      	ands	r3, r2
 800209a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020b0:	4a12      	ldr	r2, [pc, #72]	; (80020fc <HAL_GPIO_Init+0x350>)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	3301      	adds	r3, #1
 80020ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa22 f303 	lsr.w	r3, r2, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f47f ae78 	bne.w	8001dbc <HAL_GPIO_Init+0x10>
  }
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	371c      	adds	r7, #28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010000 	.word	0x40010000
 80020e4:	48000400 	.word	0x48000400
 80020e8:	48000800 	.word	0x48000800
 80020ec:	48000c00 	.word	0x48000c00
 80020f0:	48001000 	.word	0x48001000
 80020f4:	48001400 	.word	0x48001400
 80020f8:	48001800 	.word	0x48001800
 80020fc:	40010400 	.word	0x40010400

08002100 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691a      	ldr	r2, [r3, #16]
 8002110:	887b      	ldrh	r3, [r7, #2]
 8002112:	4013      	ands	r3, r2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002118:	2301      	movs	r3, #1
 800211a:	73fb      	strb	r3, [r7, #15]
 800211c:	e001      	b.n	8002122 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
}
 8002124:	4618      	mov	r0, r3
 8002126:	3714      	adds	r7, #20
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	807b      	strh	r3, [r7, #2]
 800213c:	4613      	mov	r3, r2
 800213e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002140:	787b      	ldrb	r3, [r7, #1]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002146:	887a      	ldrh	r2, [r7, #2]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800214c:	e002      	b.n	8002154 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800214e:	887a      	ldrh	r2, [r7, #2]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr

08002160 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e081      	b.n	8002276 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d106      	bne.n	800218c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f7fe ff32 	bl	8000ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2224      	movs	r2, #36	; 0x24
 8002190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689a      	ldr	r2, [r3, #8]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d107      	bne.n	80021da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	e006      	b.n	80021e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80021e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d104      	bne.n	80021fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002208:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800220c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691a      	ldr	r2, [r3, #16]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	69d9      	ldr	r1, [r3, #28]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a1a      	ldr	r2, [r3, #32]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f042 0201 	orr.w	r2, r2, #1
 8002256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2220      	movs	r2, #32
 8002262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002274:	2300      	movs	r3, #0
}
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af02      	add	r7, sp, #8
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	461a      	mov	r2, r3
 800228c:	460b      	mov	r3, r1
 800228e:	817b      	strh	r3, [r7, #10]
 8002290:	4613      	mov	r3, r2
 8002292:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800229a:	b2db      	uxtb	r3, r3
 800229c:	2b20      	cmp	r3, #32
 800229e:	f040 80da 	bne.w	8002456 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_I2C_Master_Transmit+0x30>
 80022ac:	2302      	movs	r3, #2
 80022ae:	e0d3      	b.n	8002458 <HAL_I2C_Master_Transmit+0x1d8>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80022b8:	f7ff fc62 	bl	8001b80 <HAL_GetTick>
 80022bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2319      	movs	r3, #25
 80022c4:	2201      	movs	r2, #1
 80022c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022ca:	68f8      	ldr	r0, [r7, #12]
 80022cc:	f000 f9f7 	bl	80026be <I2C_WaitOnFlagUntilTimeout>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e0be      	b.n	8002458 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2221      	movs	r2, #33	; 0x21
 80022de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2210      	movs	r2, #16
 80022e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	893a      	ldrh	r2, [r7, #8]
 80022fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29b      	uxth	r3, r3
 8002308:	2bff      	cmp	r3, #255	; 0xff
 800230a:	d90e      	bls.n	800232a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	22ff      	movs	r2, #255	; 0xff
 8002310:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002316:	b2da      	uxtb	r2, r3
 8002318:	8979      	ldrh	r1, [r7, #10]
 800231a:	4b51      	ldr	r3, [pc, #324]	; (8002460 <HAL_I2C_Master_Transmit+0x1e0>)
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fb74 	bl	8002a10 <I2C_TransferConfig>
 8002328:	e06c      	b.n	8002404 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002338:	b2da      	uxtb	r2, r3
 800233a:	8979      	ldrh	r1, [r7, #10]
 800233c:	4b48      	ldr	r3, [pc, #288]	; (8002460 <HAL_I2C_Master_Transmit+0x1e0>)
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f000 fb63 	bl	8002a10 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800234a:	e05b      	b.n	8002404 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	6a39      	ldr	r1, [r7, #32]
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f9f4 	bl	800273e <I2C_WaitOnTXISFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e07b      	b.n	8002458 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002370:	1c5a      	adds	r2, r3, #1
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237a:	b29b      	uxth	r3, r3
 800237c:	3b01      	subs	r3, #1
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002388:	3b01      	subs	r3, #1
 800238a:	b29a      	uxth	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002394:	b29b      	uxth	r3, r3
 8002396:	2b00      	cmp	r3, #0
 8002398:	d034      	beq.n	8002404 <HAL_I2C_Master_Transmit+0x184>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d130      	bne.n	8002404 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	6a3b      	ldr	r3, [r7, #32]
 80023a8:	2200      	movs	r2, #0
 80023aa:	2180      	movs	r1, #128	; 0x80
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 f986 	bl	80026be <I2C_WaitOnFlagUntilTimeout>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e04d      	b.n	8002458 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	2bff      	cmp	r3, #255	; 0xff
 80023c4:	d90e      	bls.n	80023e4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	22ff      	movs	r2, #255	; 0xff
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	8979      	ldrh	r1, [r7, #10]
 80023d4:	2300      	movs	r3, #0
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 fb17 	bl	8002a10 <I2C_TransferConfig>
 80023e2:	e00f      	b.n	8002404 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	8979      	ldrh	r1, [r7, #10]
 80023f6:	2300      	movs	r3, #0
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fb06 	bl	8002a10 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002408:	b29b      	uxth	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d19e      	bne.n	800234c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	6a39      	ldr	r1, [r7, #32]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f9d3 	bl	80027be <I2C_WaitOnSTOPFlagUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e01a      	b.n	8002458 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2220      	movs	r2, #32
 8002428:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b0b      	ldr	r3, [pc, #44]	; (8002464 <HAL_I2C_Master_Transmit+0x1e4>)
 8002436:	400b      	ands	r3, r1
 8002438:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2220      	movs	r2, #32
 800243e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e000      	b.n	8002458 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002456:	2302      	movs	r3, #2
  }
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	80002000 	.word	0x80002000
 8002464:	fe00e800 	.word	0xfe00e800

08002468 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b08a      	sub	sp, #40	; 0x28
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	603b      	str	r3, [r7, #0]
 8002474:	460b      	mov	r3, r1
 8002476:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b20      	cmp	r3, #32
 8002486:	f040 80f1 	bne.w	800266c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002498:	d101      	bne.n	800249e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800249a:	2302      	movs	r3, #2
 800249c:	e0e7      	b.n	800266e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d101      	bne.n	80024ac <HAL_I2C_IsDeviceReady+0x44>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e0e0      	b.n	800266e <HAL_I2C_IsDeviceReady+0x206>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2224      	movs	r2, #36	; 0x24
 80024b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2200      	movs	r2, #0
 80024c0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_I2C_IsDeviceReady+0x72>
 80024ca:	897b      	ldrh	r3, [r7, #10]
 80024cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024d8:	e004      	b.n	80024e4 <HAL_I2C_IsDeviceReady+0x7c>
 80024da:	897b      	ldrh	r3, [r7, #10]
 80024dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024e0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	6812      	ldr	r2, [r2, #0]
 80024e8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80024ea:	f7ff fb49 	bl	8001b80 <HAL_GetTick>
 80024ee:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b10      	cmp	r3, #16
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800251c:	e034      	b.n	8002588 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002524:	d01a      	beq.n	800255c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002526:	f7ff fb2b 	bl	8001b80 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d302      	bcc.n	800253c <HAL_I2C_IsDeviceReady+0xd4>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10f      	bne.n	800255c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e088      	b.n	800266e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b20      	cmp	r3, #32
 8002568:	bf0c      	ite	eq
 800256a:	2301      	moveq	r3, #1
 800256c:	2300      	movne	r3, #0
 800256e:	b2db      	uxtb	r3, r3
 8002570:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b10      	cmp	r3, #16
 800257e:	bf0c      	ite	eq
 8002580:	2301      	moveq	r3, #1
 8002582:	2300      	movne	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002588:	7ffb      	ldrb	r3, [r7, #31]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d102      	bne.n	8002594 <HAL_I2C_IsDeviceReady+0x12c>
 800258e:	7fbb      	ldrb	r3, [r7, #30]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0c4      	beq.n	800251e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	2b10      	cmp	r3, #16
 80025a0:	d01a      	beq.n	80025d8 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2200      	movs	r2, #0
 80025aa:	2120      	movs	r1, #32
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f886 	bl	80026be <I2C_WaitOnFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e058      	b.n	800266e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2220      	movs	r2, #32
 80025c2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e04a      	b.n	800266e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2200      	movs	r2, #0
 80025e0:	2120      	movs	r1, #32
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f86b 	bl	80026be <I2C_WaitOnFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e03d      	b.n	800266e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2210      	movs	r2, #16
 80025f8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2220      	movs	r2, #32
 8002600:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	429a      	cmp	r2, r3
 8002608:	d118      	bne.n	800263c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002618:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2200      	movs	r2, #0
 8002622:	2120      	movs	r1, #32
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f84a 	bl	80026be <I2C_WaitOnFlagUntilTimeout>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e01c      	b.n	800266e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2220      	movs	r2, #32
 800263a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	3301      	adds	r3, #1
 8002640:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	f63f af3b 	bhi.w	80024c2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2220      	movs	r2, #32
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002658:	f043 0220 	orr.w	r2, r3, #32
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3720      	adds	r7, #32
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b02      	cmp	r3, #2
 800268a:	d103      	bne.n	8002694 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2200      	movs	r2, #0
 8002692:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d007      	beq.n	80026b2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699a      	ldr	r2, [r3, #24]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f042 0201 	orr.w	r2, r2, #1
 80026b0:	619a      	str	r2, [r3, #24]
  }
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	603b      	str	r3, [r7, #0]
 80026ca:	4613      	mov	r3, r2
 80026cc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ce:	e022      	b.n	8002716 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d6:	d01e      	beq.n	8002716 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026d8:	f7ff fa52 	bl	8001b80 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d302      	bcc.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x30>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d113      	bne.n	8002716 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f2:	f043 0220 	orr.w	r2, r3, #32
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2220      	movs	r2, #32
 80026fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e00f      	b.n	8002736 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	699a      	ldr	r2, [r3, #24]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4013      	ands	r3, r2
 8002720:	68ba      	ldr	r2, [r7, #8]
 8002722:	429a      	cmp	r2, r3
 8002724:	bf0c      	ite	eq
 8002726:	2301      	moveq	r3, #1
 8002728:	2300      	movne	r3, #0
 800272a:	b2db      	uxtb	r3, r3
 800272c:	461a      	mov	r2, r3
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	429a      	cmp	r2, r3
 8002732:	d0cd      	beq.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800273e:	b580      	push	{r7, lr}
 8002740:	b084      	sub	sp, #16
 8002742:	af00      	add	r7, sp, #0
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800274a:	e02c      	b.n	80027a6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800274c:	687a      	ldr	r2, [r7, #4]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f000 f871 	bl	8002838 <I2C_IsErrorOccurred>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d001      	beq.n	8002760 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e02a      	b.n	80027b6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002766:	d01e      	beq.n	80027a6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002768:	f7ff fa0a 	bl	8001b80 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	429a      	cmp	r2, r3
 8002776:	d302      	bcc.n	800277e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d113      	bne.n	80027a6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f043 0220 	orr.w	r2, r3, #32
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e007      	b.n	80027b6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d1cb      	bne.n	800274c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b084      	sub	sp, #16
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ca:	e028      	b.n	800281e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f831 	bl	8002838 <I2C_IsErrorOccurred>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e026      	b.n	800282e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027e0:	f7ff f9ce 	bl	8001b80 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	68ba      	ldr	r2, [r7, #8]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d302      	bcc.n	80027f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d113      	bne.n	800281e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	f043 0220 	orr.w	r2, r3, #32
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e007      	b.n	800282e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b20      	cmp	r3, #32
 800282a:	d1cf      	bne.n	80027cc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b08a      	sub	sp, #40	; 0x28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002852:	2300      	movs	r3, #0
 8002854:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	d075      	beq.n	8002950 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2210      	movs	r2, #16
 800286a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800286c:	e056      	b.n	800291c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d052      	beq.n	800291c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002876:	f7ff f983 	bl	8001b80 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	429a      	cmp	r2, r3
 8002884:	d302      	bcc.n	800288c <I2C_IsErrorOccurred+0x54>
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d147      	bne.n	800291c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800289e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028ae:	d12e      	bne.n	800290e <I2C_IsErrorOccurred+0xd6>
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028b6:	d02a      	beq.n	800290e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80028b8:	7cfb      	ldrb	r3, [r7, #19]
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d027      	beq.n	800290e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028cc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80028ce:	f7ff f957 	bl	8001b80 <HAL_GetTick>
 80028d2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028d4:	e01b      	b.n	800290e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80028d6:	f7ff f953 	bl	8001b80 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b19      	cmp	r3, #25
 80028e2:	d914      	bls.n	800290e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	f043 0220 	orr.w	r2, r3, #32
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b20      	cmp	r3, #32
 800291a:	d1dc      	bne.n	80028d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b20      	cmp	r3, #32
 8002928:	d003      	beq.n	8002932 <I2C_IsErrorOccurred+0xfa>
 800292a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800292e:	2b00      	cmp	r3, #0
 8002930:	d09d      	beq.n	800286e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002936:	2b00      	cmp	r3, #0
 8002938:	d103      	bne.n	8002942 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2220      	movs	r2, #32
 8002940:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	f043 0304 	orr.w	r3, r3, #4
 8002948:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002972:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00b      	beq.n	800299c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	f043 0308 	orr.w	r3, r3, #8
 800298a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002994:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00b      	beq.n	80029be <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	f043 0302 	orr.w	r3, r3, #2
 80029ac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80029be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d01c      	beq.n	8002a00 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff fe55 	bl	8002676 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	4b0d      	ldr	r3, [pc, #52]	; (8002a0c <I2C_IsErrorOccurred+0x1d4>)
 80029d8:	400b      	ands	r3, r1
 80029da:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029e0:	6a3b      	ldr	r3, [r7, #32]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002a00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3728      	adds	r7, #40	; 0x28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	fe00e800 	.word	0xfe00e800

08002a10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	817b      	strh	r3, [r7, #10]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a22:	897b      	ldrh	r3, [r7, #10]
 8002a24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a28:	7a7b      	ldrb	r3, [r7, #9]
 8002a2a:	041b      	lsls	r3, r3, #16
 8002a2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a30:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002a3e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	0d5b      	lsrs	r3, r3, #21
 8002a4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002a4e:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <I2C_TransferConfig+0x60>)
 8002a50:	430b      	orrs	r3, r1
 8002a52:	43db      	mvns	r3, r3
 8002a54:	ea02 0103 	and.w	r1, r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	697a      	ldr	r2, [r7, #20]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a62:	bf00      	nop
 8002a64:	371c      	adds	r7, #28
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	03ff63ff 	.word	0x03ff63ff

08002a74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b20      	cmp	r3, #32
 8002a88:	d138      	bne.n	8002afc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e032      	b.n	8002afe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2224      	movs	r2, #36	; 0x24
 8002aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ac6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6819      	ldr	r1, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002af8:	2300      	movs	r3, #0
 8002afa:	e000      	b.n	8002afe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002afc:	2302      	movs	r3, #2
  }
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
 8002b12:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	2b20      	cmp	r3, #32
 8002b1e:	d139      	bne.n	8002b94 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d101      	bne.n	8002b2e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	e033      	b.n	8002b96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2201      	movs	r2, #1
 8002b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2224      	movs	r2, #36	; 0x24
 8002b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b5c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	021b      	lsls	r3, r3, #8
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b90:	2300      	movs	r3, #0
 8002b92:	e000      	b.n	8002b96 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b94:	2302      	movs	r3, #2
  }
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <HAL_PWREx_GetVoltageRange+0x18>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40007000 	.word	0x40007000

08002bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bce:	d130      	bne.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bd0:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bdc:	d038      	beq.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002be6:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bee:	4b1d      	ldr	r3, [pc, #116]	; (8002c64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2232      	movs	r2, #50	; 0x32
 8002bf4:	fb02 f303 	mul.w	r3, r2, r3
 8002bf8:	4a1b      	ldr	r2, [pc, #108]	; (8002c68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	0c9b      	lsrs	r3, r3, #18
 8002c00:	3301      	adds	r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c04:	e002      	b.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c0c:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c18:	d102      	bne.n	8002c20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f2      	bne.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c2c:	d110      	bne.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e00f      	b.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c32:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c3e:	d007      	beq.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c40:	4b07      	ldr	r3, [pc, #28]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c48:	4a05      	ldr	r2, [pc, #20]	; (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40007000 	.word	0x40007000
 8002c64:	20000000 	.word	0x20000000
 8002c68:	431bde83 	.word	0x431bde83

08002c6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e3d4      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7e:	4ba1      	ldr	r3, [pc, #644]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c88:	4b9e      	ldr	r3, [pc, #632]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80e4 	beq.w	8002e68 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x4a>
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b0c      	cmp	r3, #12
 8002caa:	f040 808b 	bne.w	8002dc4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	f040 8087 	bne.w	8002dc4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cb6:	4b93      	ldr	r3, [pc, #588]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_RCC_OscConfig+0x62>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e3ac      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	4b8c      	ldr	r3, [pc, #560]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x7c>
 8002cde:	4b89      	ldr	r3, [pc, #548]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce6:	e005      	b.n	8002cf4 <HAL_RCC_OscConfig+0x88>
 8002ce8:	4b86      	ldr	r3, [pc, #536]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d223      	bcs.n	8002d40 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fd41 	bl	8003784 <RCC_SetFlashLatencyFromMSIRange>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e38d      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d0c:	4b7d      	ldr	r3, [pc, #500]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a7c      	ldr	r2, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002d12:	f043 0308 	orr.w	r3, r3, #8
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4b7a      	ldr	r3, [pc, #488]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4977      	ldr	r1, [pc, #476]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d2a:	4b76      	ldr	r3, [pc, #472]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	4972      	ldr	r1, [pc, #456]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	604b      	str	r3, [r1, #4]
 8002d3e:	e025      	b.n	8002d8c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d40:	4b70      	ldr	r3, [pc, #448]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a6f      	ldr	r2, [pc, #444]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002d46:	f043 0308 	orr.w	r3, r3, #8
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b6d      	ldr	r3, [pc, #436]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	496a      	ldr	r1, [pc, #424]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5e:	4b69      	ldr	r3, [pc, #420]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	4965      	ldr	r1, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fd01 	bl	8003784 <RCC_SetFlashLatencyFromMSIRange>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e34d      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d8c:	f000 fc36 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b5c      	ldr	r3, [pc, #368]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	495a      	ldr	r1, [pc, #360]	; (8002f08 <HAL_RCC_OscConfig+0x29c>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
 8002da8:	4a58      	ldr	r2, [pc, #352]	; (8002f0c <HAL_RCC_OscConfig+0x2a0>)
 8002daa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dac:	4b58      	ldr	r3, [pc, #352]	; (8002f10 <HAL_RCC_OscConfig+0x2a4>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe fe95 	bl	8001ae0 <HAL_InitTick>
 8002db6:	4603      	mov	r3, r0
 8002db8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d052      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	e331      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d032      	beq.n	8002e32 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dcc:	4b4d      	ldr	r3, [pc, #308]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a4c      	ldr	r2, [pc, #304]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dd8:	f7fe fed2 	bl	8001b80 <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002de0:	f7fe fece 	bl	8001b80 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e31a      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df2:	4b44      	ldr	r3, [pc, #272]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dfe:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a40      	ldr	r2, [pc, #256]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002e04:	f043 0308 	orr.w	r3, r3, #8
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b3e      	ldr	r3, [pc, #248]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	493b      	ldr	r1, [pc, #236]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e1c:	4b39      	ldr	r3, [pc, #228]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	4936      	ldr	r1, [pc, #216]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
 8002e30:	e01a      	b.n	8002e68 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e32:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a33      	ldr	r2, [pc, #204]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fe9f 	bl	8001b80 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e46:	f7fe fe9b 	bl	8001b80 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e2e7      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e58:	4b2a      	ldr	r3, [pc, #168]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f0      	bne.n	8002e46 <HAL_RCC_OscConfig+0x1da>
 8002e64:	e000      	b.n	8002e68 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d074      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d005      	beq.n	8002e86 <HAL_RCC_OscConfig+0x21a>
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b0c      	cmp	r3, #12
 8002e7e:	d10e      	bne.n	8002e9e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d10b      	bne.n	8002e9e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e86:	4b1f      	ldr	r3, [pc, #124]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d064      	beq.n	8002f5c <HAL_RCC_OscConfig+0x2f0>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d160      	bne.n	8002f5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e2c4      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x24a>
 8002ea8:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a15      	ldr	r2, [pc, #84]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	e01d      	b.n	8002ef2 <HAL_RCC_OscConfig+0x286>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ebe:	d10c      	bne.n	8002eda <HAL_RCC_OscConfig+0x26e>
 8002ec0:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0f      	ldr	r2, [pc, #60]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002ec6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0c      	ldr	r2, [pc, #48]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	e00b      	b.n	8002ef2 <HAL_RCC_OscConfig+0x286>
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a09      	ldr	r2, [pc, #36]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a06      	ldr	r2, [pc, #24]	; (8002f04 <HAL_RCC_OscConfig+0x298>)
 8002eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fe fe41 	bl	8001b80 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f00:	e011      	b.n	8002f26 <HAL_RCC_OscConfig+0x2ba>
 8002f02:	bf00      	nop
 8002f04:	40021000 	.word	0x40021000
 8002f08:	08008064 	.word	0x08008064
 8002f0c:	20000000 	.word	0x20000000
 8002f10:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f14:	f7fe fe34 	bl	8001b80 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	; 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e280      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f26:	4baf      	ldr	r3, [pc, #700]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x2a8>
 8002f32:	e014      	b.n	8002f5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7fe fe24 	bl	8001b80 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe fe20 	bl	8001b80 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	; 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e26c      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f4e:	4ba5      	ldr	r3, [pc, #660]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x2d0>
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d060      	beq.n	800302c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_OscConfig+0x310>
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b0c      	cmp	r3, #12
 8002f74:	d119      	bne.n	8002faa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d116      	bne.n	8002faa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f7c:	4b99      	ldr	r3, [pc, #612]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_OscConfig+0x328>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e249      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b93      	ldr	r3, [pc, #588]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	4990      	ldr	r1, [pc, #576]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa8:	e040      	b.n	800302c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d023      	beq.n	8002ffa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb2:	4b8c      	ldr	r3, [pc, #560]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a8b      	ldr	r2, [pc, #556]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbe:	f7fe fddf 	bl	8001b80 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc6:	f7fe fddb 	bl	8001b80 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e227      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fd8:	4b82      	ldr	r3, [pc, #520]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b7f      	ldr	r3, [pc, #508]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	497c      	ldr	r1, [pc, #496]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
 8002ff8:	e018      	b.n	800302c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffa:	4b7a      	ldr	r3, [pc, #488]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a79      	ldr	r2, [pc, #484]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8003000:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003006:	f7fe fdbb 	bl	8001b80 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300e:	f7fe fdb7 	bl	8001b80 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e203      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003020:	4b70      	ldr	r3, [pc, #448]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f0      	bne.n	800300e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d03c      	beq.n	80030b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01c      	beq.n	800307a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003040:	4b68      	ldr	r3, [pc, #416]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8003042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003046:	4a67      	ldr	r2, [pc, #412]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7fe fd96 	bl	8001b80 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003058:	f7fe fd92 	bl	8001b80 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e1de      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800306a:	4b5e      	ldr	r3, [pc, #376]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 800306c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0ef      	beq.n	8003058 <HAL_RCC_OscConfig+0x3ec>
 8003078:	e01b      	b.n	80030b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307a:	4b5a      	ldr	r3, [pc, #360]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 800307c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003080:	4a58      	ldr	r2, [pc, #352]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308a:	f7fe fd79 	bl	8001b80 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003092:	f7fe fd75 	bl	8001b80 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e1c1      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030a4:	4b4f      	ldr	r3, [pc, #316]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 80030a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ef      	bne.n	8003092 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80a6 	beq.w	800320c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030c4:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10d      	bne.n	80030ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d0:	4b44      	ldr	r3, [pc, #272]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 80030d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d4:	4a43      	ldr	r2, [pc, #268]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 80030d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030da:	6593      	str	r3, [r2, #88]	; 0x58
 80030dc:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e8:	2301      	movs	r3, #1
 80030ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ec:	4b3e      	ldr	r3, [pc, #248]	; (80031e8 <HAL_RCC_OscConfig+0x57c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d118      	bne.n	800312a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f8:	4b3b      	ldr	r3, [pc, #236]	; (80031e8 <HAL_RCC_OscConfig+0x57c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a3a      	ldr	r2, [pc, #232]	; (80031e8 <HAL_RCC_OscConfig+0x57c>)
 80030fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003102:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003104:	f7fe fd3c 	bl	8001b80 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7fe fd38 	bl	8001b80 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e184      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800311e:	4b32      	ldr	r3, [pc, #200]	; (80031e8 <HAL_RCC_OscConfig+0x57c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d108      	bne.n	8003144 <HAL_RCC_OscConfig+0x4d8>
 8003132:	4b2c      	ldr	r3, [pc, #176]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003138:	4a2a      	ldr	r2, [pc, #168]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003142:	e024      	b.n	800318e <HAL_RCC_OscConfig+0x522>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b05      	cmp	r3, #5
 800314a:	d110      	bne.n	800316e <HAL_RCC_OscConfig+0x502>
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	4a24      	ldr	r2, [pc, #144]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8003154:	f043 0304 	orr.w	r3, r3, #4
 8003158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800315c:	4b21      	ldr	r3, [pc, #132]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003162:	4a20      	ldr	r2, [pc, #128]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800316c:	e00f      	b.n	800318e <HAL_RCC_OscConfig+0x522>
 800316e:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003174:	4a1b      	ldr	r2, [pc, #108]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800317e:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003184:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 8003186:	f023 0304 	bic.w	r3, r3, #4
 800318a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003196:	f7fe fcf3 	bl	8001b80 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800319c:	e00a      	b.n	80031b4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800319e:	f7fe fcef 	bl	8001b80 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e139      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_RCC_OscConfig+0x578>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0ed      	beq.n	800319e <HAL_RCC_OscConfig+0x532>
 80031c2:	e01a      	b.n	80031fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c4:	f7fe fcdc 	bl	8001b80 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031ca:	e00f      	b.n	80031ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031cc:	f7fe fcd8 	bl	8001b80 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d906      	bls.n	80031ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e122      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031ec:	4b90      	ldr	r3, [pc, #576]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1e8      	bne.n	80031cc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031fa:	7ffb      	ldrb	r3, [r7, #31]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003200:	4b8b      	ldr	r3, [pc, #556]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003204:	4a8a      	ldr	r2, [pc, #552]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 8003206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800320a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8108 	beq.w	8003426 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321a:	2b02      	cmp	r3, #2
 800321c:	f040 80d0 	bne.w	80033c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003220:	4b83      	ldr	r3, [pc, #524]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f003 0203 	and.w	r2, r3, #3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	429a      	cmp	r2, r3
 8003232:	d130      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	3b01      	subs	r3, #1
 8003240:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d127      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003250:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d11f      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003260:	2a07      	cmp	r2, #7
 8003262:	bf14      	ite	ne
 8003264:	2201      	movne	r2, #1
 8003266:	2200      	moveq	r2, #0
 8003268:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800326a:	4293      	cmp	r3, r2
 800326c:	d113      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	3b01      	subs	r3, #1
 800327c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800327e:	429a      	cmp	r2, r3
 8003280:	d109      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	3b01      	subs	r3, #1
 8003290:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d06e      	beq.n	8003374 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	d069      	beq.n	8003370 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800329c:	4b64      	ldr	r3, [pc, #400]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032a8:	4b61      	ldr	r3, [pc, #388]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0b7      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032b8:	4b5d      	ldr	r3, [pc, #372]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a5c      	ldr	r2, [pc, #368]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 80032be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032c4:	f7fe fc5c 	bl	8001b80 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe fc58 	bl	8001b80 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e0a4      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032de:	4b54      	ldr	r3, [pc, #336]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ea:	4b51      	ldr	r3, [pc, #324]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	4b51      	ldr	r3, [pc, #324]	; (8003434 <HAL_RCC_OscConfig+0x7c8>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032fa:	3a01      	subs	r2, #1
 80032fc:	0112      	lsls	r2, r2, #4
 80032fe:	4311      	orrs	r1, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003304:	0212      	lsls	r2, r2, #8
 8003306:	4311      	orrs	r1, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800330c:	0852      	lsrs	r2, r2, #1
 800330e:	3a01      	subs	r2, #1
 8003310:	0552      	lsls	r2, r2, #21
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003318:	0852      	lsrs	r2, r2, #1
 800331a:	3a01      	subs	r2, #1
 800331c:	0652      	lsls	r2, r2, #25
 800331e:	4311      	orrs	r1, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003324:	0912      	lsrs	r2, r2, #4
 8003326:	0452      	lsls	r2, r2, #17
 8003328:	430a      	orrs	r2, r1
 800332a:	4941      	ldr	r1, [pc, #260]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 800332c:	4313      	orrs	r3, r2
 800332e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003330:	4b3f      	ldr	r3, [pc, #252]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a3e      	ldr	r2, [pc, #248]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 8003336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800333a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800333c:	4b3c      	ldr	r3, [pc, #240]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a3b      	ldr	r2, [pc, #236]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 8003342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003346:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003348:	f7fe fc1a 	bl	8001b80 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7fe fc16 	bl	8001b80 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e062      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003362:	4b33      	ldr	r3, [pc, #204]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800336e:	e05a      	b.n	8003426 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e059      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003374:	4b2e      	ldr	r3, [pc, #184]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d152      	bne.n	8003426 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003380:	4b2b      	ldr	r3, [pc, #172]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a2a      	ldr	r2, [pc, #168]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 8003386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800338a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800338c:	4b28      	ldr	r3, [pc, #160]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a27      	ldr	r2, [pc, #156]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 8003392:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003396:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003398:	f7fe fbf2 	bl	8001b80 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7fe fbee 	bl	8001b80 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e03a      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b2:	4b1f      	ldr	r3, [pc, #124]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x734>
 80033be:	e032      	b.n	8003426 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d02d      	beq.n	8003422 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c6:	4b1a      	ldr	r3, [pc, #104]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a19      	ldr	r2, [pc, #100]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 80033cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033d0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80033d2:	4b17      	ldr	r3, [pc, #92]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d105      	bne.n	80033ea <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80033de:	4b14      	ldr	r3, [pc, #80]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	4a13      	ldr	r2, [pc, #76]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 80033e4:	f023 0303 	bic.w	r3, r3, #3
 80033e8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	4a10      	ldr	r2, [pc, #64]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 80033f0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80033f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033f8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fa:	f7fe fbc1 	bl	8001b80 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003402:	f7fe fbbd 	bl	8001b80 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e009      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003414:	4b06      	ldr	r3, [pc, #24]	; (8003430 <HAL_RCC_OscConfig+0x7c4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1f0      	bne.n	8003402 <HAL_RCC_OscConfig+0x796>
 8003420:	e001      	b.n	8003426 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3720      	adds	r7, #32
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	40021000 	.word	0x40021000
 8003434:	f99d808c 	.word	0xf99d808c

08003438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0c8      	b.n	80035de <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800344c:	4b66      	ldr	r3, [pc, #408]	; (80035e8 <HAL_RCC_ClockConfig+0x1b0>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0307 	and.w	r3, r3, #7
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d910      	bls.n	800347c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800345a:	4b63      	ldr	r3, [pc, #396]	; (80035e8 <HAL_RCC_ClockConfig+0x1b0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 0207 	bic.w	r2, r3, #7
 8003462:	4961      	ldr	r1, [pc, #388]	; (80035e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	4313      	orrs	r3, r2
 8003468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800346a:	4b5f      	ldr	r3, [pc, #380]	; (80035e8 <HAL_RCC_ClockConfig+0x1b0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0307 	and.w	r3, r3, #7
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d001      	beq.n	800347c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0b0      	b.n	80035de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d04c      	beq.n	8003522 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d107      	bne.n	80034a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003490:	4b56      	ldr	r3, [pc, #344]	; (80035ec <HAL_RCC_ClockConfig+0x1b4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d121      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e09e      	b.n	80035de <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a8:	4b50      	ldr	r3, [pc, #320]	; (80035ec <HAL_RCC_ClockConfig+0x1b4>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d115      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e092      	b.n	80035de <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034c0:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <HAL_RCC_ClockConfig+0x1b4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d109      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e086      	b.n	80035de <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d0:	4b46      	ldr	r3, [pc, #280]	; (80035ec <HAL_RCC_ClockConfig+0x1b4>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e07e      	b.n	80035de <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034e0:	4b42      	ldr	r3, [pc, #264]	; (80035ec <HAL_RCC_ClockConfig+0x1b4>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f023 0203 	bic.w	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	493f      	ldr	r1, [pc, #252]	; (80035ec <HAL_RCC_ClockConfig+0x1b4>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034f2:	f7fe fb45 	bl	8001b80 <HAL_GetTick>
 80034f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034fa:	f7fe fb41 	bl	8001b80 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	; 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e066      	b.n	80035de <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003510:	4b36      	ldr	r3, [pc, #216]	; (80035ec <HAL_RCC_ClockConfig+0x1b4>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 020c 	and.w	r2, r3, #12
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	429a      	cmp	r2, r3
 8003520:	d1eb      	bne.n	80034fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352e:	4b2f      	ldr	r3, [pc, #188]	; (80035ec <HAL_RCC_ClockConfig+0x1b4>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	492c      	ldr	r1, [pc, #176]	; (80035ec <HAL_RCC_ClockConfig+0x1b4>)
 800353c:	4313      	orrs	r3, r2
 800353e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003540:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0307 	and.w	r3, r3, #7
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d210      	bcs.n	8003570 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354e:	4b26      	ldr	r3, [pc, #152]	; (80035e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 0207 	bic.w	r2, r3, #7
 8003556:	4924      	ldr	r1, [pc, #144]	; (80035e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355e:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <HAL_RCC_ClockConfig+0x1b0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0307 	and.w	r3, r3, #7
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	429a      	cmp	r2, r3
 800356a:	d001      	beq.n	8003570 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e036      	b.n	80035de <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d008      	beq.n	800358e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <HAL_RCC_ClockConfig+0x1b4>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4918      	ldr	r1, [pc, #96]	; (80035ec <HAL_RCC_ClockConfig+0x1b4>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800359a:	4b14      	ldr	r3, [pc, #80]	; (80035ec <HAL_RCC_ClockConfig+0x1b4>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4910      	ldr	r1, [pc, #64]	; (80035ec <HAL_RCC_ClockConfig+0x1b4>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035ae:	f000 f825 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 80035b2:	4602      	mov	r2, r0
 80035b4:	4b0d      	ldr	r3, [pc, #52]	; (80035ec <HAL_RCC_ClockConfig+0x1b4>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	091b      	lsrs	r3, r3, #4
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	490c      	ldr	r1, [pc, #48]	; (80035f0 <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	5ccb      	ldrb	r3, [r1, r3]
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ca:	4a0a      	ldr	r2, [pc, #40]	; (80035f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035ce:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <HAL_RCC_ClockConfig+0x1c0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fe fa84 	bl	8001ae0 <HAL_InitTick>
 80035d8:	4603      	mov	r3, r0
 80035da:	72fb      	strb	r3, [r7, #11]

  return status;
 80035dc:	7afb      	ldrb	r3, [r7, #11]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40022000 	.word	0x40022000
 80035ec:	40021000 	.word	0x40021000
 80035f0:	08008064 	.word	0x08008064
 80035f4:	20000000 	.word	0x20000000
 80035f8:	20000004 	.word	0x20000004

080035fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003602:	2300      	movs	r3, #0
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800360a:	4b3e      	ldr	r3, [pc, #248]	; (8003704 <HAL_RCC_GetSysClockFreq+0x108>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003614:	4b3b      	ldr	r3, [pc, #236]	; (8003704 <HAL_RCC_GetSysClockFreq+0x108>)
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f003 0303 	and.w	r3, r3, #3
 800361c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x34>
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	2b0c      	cmp	r3, #12
 8003628:	d121      	bne.n	800366e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d11e      	bne.n	800366e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003630:	4b34      	ldr	r3, [pc, #208]	; (8003704 <HAL_RCC_GetSysClockFreq+0x108>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800363c:	4b31      	ldr	r3, [pc, #196]	; (8003704 <HAL_RCC_GetSysClockFreq+0x108>)
 800363e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003642:	0a1b      	lsrs	r3, r3, #8
 8003644:	f003 030f 	and.w	r3, r3, #15
 8003648:	61fb      	str	r3, [r7, #28]
 800364a:	e005      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800364c:	4b2d      	ldr	r3, [pc, #180]	; (8003704 <HAL_RCC_GetSysClockFreq+0x108>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	f003 030f 	and.w	r3, r3, #15
 8003656:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003658:	4a2b      	ldr	r2, [pc, #172]	; (8003708 <HAL_RCC_GetSysClockFreq+0x10c>)
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003660:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10d      	bne.n	8003684 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800366c:	e00a      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	2b04      	cmp	r3, #4
 8003672:	d102      	bne.n	800367a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003674:	4b25      	ldr	r3, [pc, #148]	; (800370c <HAL_RCC_GetSysClockFreq+0x110>)
 8003676:	61bb      	str	r3, [r7, #24]
 8003678:	e004      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d101      	bne.n	8003684 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003680:	4b23      	ldr	r3, [pc, #140]	; (8003710 <HAL_RCC_GetSysClockFreq+0x114>)
 8003682:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b0c      	cmp	r3, #12
 8003688:	d134      	bne.n	80036f4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800368a:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_RCC_GetSysClockFreq+0x108>)
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b02      	cmp	r3, #2
 8003698:	d003      	beq.n	80036a2 <HAL_RCC_GetSysClockFreq+0xa6>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b03      	cmp	r3, #3
 800369e:	d003      	beq.n	80036a8 <HAL_RCC_GetSysClockFreq+0xac>
 80036a0:	e005      	b.n	80036ae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036a2:	4b1a      	ldr	r3, [pc, #104]	; (800370c <HAL_RCC_GetSysClockFreq+0x110>)
 80036a4:	617b      	str	r3, [r7, #20]
      break;
 80036a6:	e005      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036a8:	4b19      	ldr	r3, [pc, #100]	; (8003710 <HAL_RCC_GetSysClockFreq+0x114>)
 80036aa:	617b      	str	r3, [r7, #20]
      break;
 80036ac:	e002      	b.n	80036b4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	617b      	str	r3, [r7, #20]
      break;
 80036b2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036b4:	4b13      	ldr	r3, [pc, #76]	; (8003704 <HAL_RCC_GetSysClockFreq+0x108>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	3301      	adds	r3, #1
 80036c0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_RCC_GetSysClockFreq+0x108>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	0a1b      	lsrs	r3, r3, #8
 80036c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	fb02 f203 	mul.w	r2, r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_RCC_GetSysClockFreq+0x108>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	0e5b      	lsrs	r3, r3, #25
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	3301      	adds	r3, #1
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80036f4:	69bb      	ldr	r3, [r7, #24]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3724      	adds	r7, #36	; 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000
 8003708:	0800807c 	.word	0x0800807c
 800370c:	00f42400 	.word	0x00f42400
 8003710:	007a1200 	.word	0x007a1200

08003714 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003718:	4b03      	ldr	r3, [pc, #12]	; (8003728 <HAL_RCC_GetHCLKFreq+0x14>)
 800371a:	681b      	ldr	r3, [r3, #0]
}
 800371c:	4618      	mov	r0, r3
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000000 	.word	0x20000000

0800372c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003730:	f7ff fff0 	bl	8003714 <HAL_RCC_GetHCLKFreq>
 8003734:	4602      	mov	r2, r0
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	0a1b      	lsrs	r3, r3, #8
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	4904      	ldr	r1, [pc, #16]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003742:	5ccb      	ldrb	r3, [r1, r3]
 8003744:	f003 031f 	and.w	r3, r3, #31
 8003748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800374c:	4618      	mov	r0, r3
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40021000 	.word	0x40021000
 8003754:	08008074 	.word	0x08008074

08003758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800375c:	f7ff ffda 	bl	8003714 <HAL_RCC_GetHCLKFreq>
 8003760:	4602      	mov	r2, r0
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	0adb      	lsrs	r3, r3, #11
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	4904      	ldr	r1, [pc, #16]	; (8003780 <HAL_RCC_GetPCLK2Freq+0x28>)
 800376e:	5ccb      	ldrb	r3, [r1, r3]
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40021000 	.word	0x40021000
 8003780:	08008074 	.word	0x08008074

08003784 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b086      	sub	sp, #24
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800378c:	2300      	movs	r3, #0
 800378e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003790:	4b2a      	ldr	r3, [pc, #168]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800379c:	f7ff fa02 	bl	8002ba4 <HAL_PWREx_GetVoltageRange>
 80037a0:	6178      	str	r0, [r7, #20]
 80037a2:	e014      	b.n	80037ce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037a4:	4b25      	ldr	r3, [pc, #148]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a8:	4a24      	ldr	r2, [pc, #144]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ae:	6593      	str	r3, [r2, #88]	; 0x58
 80037b0:	4b22      	ldr	r3, [pc, #136]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80037bc:	f7ff f9f2 	bl	8002ba4 <HAL_PWREx_GetVoltageRange>
 80037c0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80037c2:	4b1e      	ldr	r3, [pc, #120]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c6:	4a1d      	ldr	r2, [pc, #116]	; (800383c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037cc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d4:	d10b      	bne.n	80037ee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d919      	bls.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2ba0      	cmp	r3, #160	; 0xa0
 80037e0:	d902      	bls.n	80037e8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037e2:	2302      	movs	r3, #2
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	e013      	b.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037e8:	2301      	movs	r3, #1
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	e010      	b.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b80      	cmp	r3, #128	; 0x80
 80037f2:	d902      	bls.n	80037fa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80037f4:	2303      	movs	r3, #3
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	e00a      	b.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b80      	cmp	r3, #128	; 0x80
 80037fe:	d102      	bne.n	8003806 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003800:	2302      	movs	r3, #2
 8003802:	613b      	str	r3, [r7, #16]
 8003804:	e004      	b.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2b70      	cmp	r3, #112	; 0x70
 800380a:	d101      	bne.n	8003810 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800380c:	2301      	movs	r3, #1
 800380e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f023 0207 	bic.w	r2, r3, #7
 8003818:	4909      	ldr	r1, [pc, #36]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003820:	4b07      	ldr	r3, [pc, #28]	; (8003840 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	429a      	cmp	r2, r3
 800382c:	d001      	beq.n	8003832 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e000      	b.n	8003834 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3718      	adds	r7, #24
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000
 8003840:	40022000 	.word	0x40022000

08003844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800384c:	2300      	movs	r3, #0
 800384e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003850:	2300      	movs	r3, #0
 8003852:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800385c:	2b00      	cmp	r3, #0
 800385e:	d041      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003864:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003868:	d02a      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800386a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800386e:	d824      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003870:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003874:	d008      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003876:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800387a:	d81e      	bhi.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003884:	d010      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003886:	e018      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003888:	4b86      	ldr	r3, [pc, #536]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a85      	ldr	r2, [pc, #532]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800388e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003892:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003894:	e015      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	3304      	adds	r3, #4
 800389a:	2100      	movs	r1, #0
 800389c:	4618      	mov	r0, r3
 800389e:	f000 fabb 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 80038a2:	4603      	mov	r3, r0
 80038a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038a6:	e00c      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3320      	adds	r3, #32
 80038ac:	2100      	movs	r1, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	f000 fba6 	bl	8004000 <RCCEx_PLLSAI2_Config>
 80038b4:	4603      	mov	r3, r0
 80038b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80038b8:	e003      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	74fb      	strb	r3, [r7, #19]
      break;
 80038be:	e000      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80038c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10b      	bne.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038c8:	4b76      	ldr	r3, [pc, #472]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038d6:	4973      	ldr	r1, [pc, #460]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80038de:	e001      	b.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038e0:	7cfb      	ldrb	r3, [r7, #19]
 80038e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d041      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038f8:	d02a      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80038fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038fe:	d824      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003900:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003904:	d008      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003906:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800390a:	d81e      	bhi.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003910:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003914:	d010      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003916:	e018      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003918:	4b62      	ldr	r3, [pc, #392]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	4a61      	ldr	r2, [pc, #388]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003922:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003924:	e015      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fa73 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003936:	e00c      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	3320      	adds	r3, #32
 800393c:	2100      	movs	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f000 fb5e 	bl	8004000 <RCCEx_PLLSAI2_Config>
 8003944:	4603      	mov	r3, r0
 8003946:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003948:	e003      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	74fb      	strb	r3, [r7, #19]
      break;
 800394e:	e000      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003952:	7cfb      	ldrb	r3, [r7, #19]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003958:	4b52      	ldr	r3, [pc, #328]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003966:	494f      	ldr	r1, [pc, #316]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003968:	4313      	orrs	r3, r2
 800396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800396e:	e001      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80a0 	beq.w	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003982:	2300      	movs	r3, #0
 8003984:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003986:	4b47      	ldr	r3, [pc, #284]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003996:	2300      	movs	r3, #0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00d      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399c:	4b41      	ldr	r3, [pc, #260]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	4a40      	ldr	r2, [pc, #256]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a6:	6593      	str	r3, [r2, #88]	; 0x58
 80039a8:	4b3e      	ldr	r3, [pc, #248]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b4:	2301      	movs	r3, #1
 80039b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b8:	4b3b      	ldr	r3, [pc, #236]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a3a      	ldr	r2, [pc, #232]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039c4:	f7fe f8dc 	bl	8001b80 <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039ca:	e009      	b.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039cc:	f7fe f8d8 	bl	8001b80 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d902      	bls.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	74fb      	strb	r3, [r7, #19]
        break;
 80039de:	e005      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80039e0:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0ef      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80039ec:	7cfb      	ldrb	r3, [r7, #19]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d15c      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039f2:	4b2c      	ldr	r3, [pc, #176]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01f      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d019      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a10:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a1c:	4b21      	ldr	r3, [pc, #132]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a32:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a3c:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d016      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4e:	f7fe f897 	bl	8001b80 <HAL_GetTick>
 8003a52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a54:	e00b      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fe f893 	bl	8001b80 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d902      	bls.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	74fb      	strb	r3, [r7, #19]
            break;
 8003a6c:	e006      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6e:	4b0d      	ldr	r3, [pc, #52]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0ec      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a7c:	7cfb      	ldrb	r3, [r7, #19]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10c      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a92:	4904      	ldr	r1, [pc, #16]	; (8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a9a:	e009      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a9c:	7cfb      	ldrb	r3, [r7, #19]
 8003a9e:	74bb      	strb	r3, [r7, #18]
 8003aa0:	e006      	b.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ab0:	7c7b      	ldrb	r3, [r7, #17]
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d105      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab6:	4b9e      	ldr	r3, [pc, #632]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	4a9d      	ldr	r2, [pc, #628]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ace:	4b98      	ldr	r3, [pc, #608]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad4:	f023 0203 	bic.w	r2, r3, #3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	4994      	ldr	r1, [pc, #592]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003af0:	4b8f      	ldr	r3, [pc, #572]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af6:	f023 020c 	bic.w	r2, r3, #12
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afe:	498c      	ldr	r1, [pc, #560]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b12:	4b87      	ldr	r3, [pc, #540]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b18:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	4983      	ldr	r1, [pc, #524]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b34:	4b7e      	ldr	r3, [pc, #504]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	497b      	ldr	r1, [pc, #492]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0310 	and.w	r3, r3, #16
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003b56:	4b76      	ldr	r3, [pc, #472]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b64:	4972      	ldr	r1, [pc, #456]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b78:	4b6d      	ldr	r3, [pc, #436]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b86:	496a      	ldr	r1, [pc, #424]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b9a:	4b65      	ldr	r3, [pc, #404]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	4961      	ldr	r1, [pc, #388]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bbc:	4b5c      	ldr	r3, [pc, #368]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bca:	4959      	ldr	r1, [pc, #356]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bde:	4b54      	ldr	r3, [pc, #336]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bec:	4950      	ldr	r1, [pc, #320]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c00:	4b4b      	ldr	r3, [pc, #300]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c0e:	4948      	ldr	r1, [pc, #288]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c22:	4b43      	ldr	r3, [pc, #268]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	493f      	ldr	r1, [pc, #252]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d028      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c44:	4b3a      	ldr	r3, [pc, #232]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c52:	4937      	ldr	r1, [pc, #220]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c62:	d106      	bne.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c64:	4b32      	ldr	r3, [pc, #200]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4a31      	ldr	r2, [pc, #196]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c6e:	60d3      	str	r3, [r2, #12]
 8003c70:	e011      	b.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c7a:	d10c      	bne.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f8c8 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c8c:	7cfb      	ldrb	r3, [r7, #19]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c92:	7cfb      	ldrb	r3, [r7, #19]
 8003c94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d028      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ca2:	4b23      	ldr	r3, [pc, #140]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb0:	491f      	ldr	r1, [pc, #124]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc0:	d106      	bne.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc2:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	4a1a      	ldr	r2, [pc, #104]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ccc:	60d3      	str	r3, [r2, #12]
 8003cce:	e011      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	3304      	adds	r3, #4
 8003cde:	2101      	movs	r1, #1
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 f899 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cea:	7cfb      	ldrb	r3, [r7, #19]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003cf0:	7cfb      	ldrb	r3, [r7, #19]
 8003cf2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d02b      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d00:	4b0b      	ldr	r3, [pc, #44]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d0e:	4908      	ldr	r1, [pc, #32]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d1e:	d109      	bne.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d20:	4b03      	ldr	r3, [pc, #12]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4a02      	ldr	r2, [pc, #8]	; (8003d30 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d2a:	60d3      	str	r3, [r2, #12]
 8003d2c:	e014      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003d2e:	bf00      	nop
 8003d30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d3c:	d10c      	bne.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2101      	movs	r1, #1
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 f867 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d4e:	7cfb      	ldrb	r3, [r7, #19]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003d54:	7cfb      	ldrb	r3, [r7, #19]
 8003d56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d02f      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d64:	4b2b      	ldr	r3, [pc, #172]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d72:	4928      	ldr	r1, [pc, #160]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d82:	d10d      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3304      	adds	r3, #4
 8003d88:	2102      	movs	r1, #2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f844 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d94:	7cfb      	ldrb	r3, [r7, #19]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d014      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d9a:	7cfb      	ldrb	r3, [r7, #19]
 8003d9c:	74bb      	strb	r3, [r7, #18]
 8003d9e:	e011      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003da4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da8:	d10c      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3320      	adds	r3, #32
 8003dae:	2102      	movs	r1, #2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 f925 	bl	8004000 <RCCEx_PLLSAI2_Config>
 8003db6:	4603      	mov	r3, r0
 8003db8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dba:	7cfb      	ldrb	r3, [r7, #19]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003dc0:	7cfb      	ldrb	r3, [r7, #19]
 8003dc2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003dd0:	4b10      	ldr	r3, [pc, #64]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dde:	490d      	ldr	r1, [pc, #52]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e02:	4904      	ldr	r1, [pc, #16]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e0a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3718      	adds	r7, #24
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000

08003e18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e26:	4b75      	ldr	r3, [pc, #468]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d018      	beq.n	8003e64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e32:	4b72      	ldr	r3, [pc, #456]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0203 	and.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d10d      	bne.n	8003e5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
       ||
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e4a:	4b6c      	ldr	r3, [pc, #432]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
       ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d047      	beq.n	8003eee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
 8003e62:	e044      	b.n	8003eee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d018      	beq.n	8003e9e <RCCEx_PLLSAI1_Config+0x86>
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d825      	bhi.n	8003ebc <RCCEx_PLLSAI1_Config+0xa4>
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d002      	beq.n	8003e7a <RCCEx_PLLSAI1_Config+0x62>
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d009      	beq.n	8003e8c <RCCEx_PLLSAI1_Config+0x74>
 8003e78:	e020      	b.n	8003ebc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e7a:	4b60      	ldr	r3, [pc, #384]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d11d      	bne.n	8003ec2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8a:	e01a      	b.n	8003ec2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e8c:	4b5b      	ldr	r3, [pc, #364]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d116      	bne.n	8003ec6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e9c:	e013      	b.n	8003ec6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e9e:	4b57      	ldr	r3, [pc, #348]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10f      	bne.n	8003eca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eaa:	4b54      	ldr	r3, [pc, #336]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003eba:	e006      	b.n	8003eca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec0:	e004      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e002      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e000      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eca:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10d      	bne.n	8003eee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ed2:	4b4a      	ldr	r3, [pc, #296]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6819      	ldr	r1, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	4944      	ldr	r1, [pc, #272]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d17d      	bne.n	8003ff0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ef4:	4b41      	ldr	r3, [pc, #260]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a40      	ldr	r2, [pc, #256]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003efa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f00:	f7fd fe3e 	bl	8001b80 <HAL_GetTick>
 8003f04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f06:	e009      	b.n	8003f1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f08:	f7fd fe3a 	bl	8001b80 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d902      	bls.n	8003f1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	73fb      	strb	r3, [r7, #15]
        break;
 8003f1a:	e005      	b.n	8003f28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f1c:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ef      	bne.n	8003f08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d160      	bne.n	8003ff0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d111      	bne.n	8003f58 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f34:	4b31      	ldr	r3, [pc, #196]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6892      	ldr	r2, [r2, #8]
 8003f44:	0211      	lsls	r1, r2, #8
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68d2      	ldr	r2, [r2, #12]
 8003f4a:	0912      	lsrs	r2, r2, #4
 8003f4c:	0452      	lsls	r2, r2, #17
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	492a      	ldr	r1, [pc, #168]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	610b      	str	r3, [r1, #16]
 8003f56:	e027      	b.n	8003fa8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d112      	bne.n	8003f84 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f5e:	4b27      	ldr	r3, [pc, #156]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f66:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	6892      	ldr	r2, [r2, #8]
 8003f6e:	0211      	lsls	r1, r2, #8
 8003f70:	687a      	ldr	r2, [r7, #4]
 8003f72:	6912      	ldr	r2, [r2, #16]
 8003f74:	0852      	lsrs	r2, r2, #1
 8003f76:	3a01      	subs	r2, #1
 8003f78:	0552      	lsls	r2, r2, #21
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	491f      	ldr	r1, [pc, #124]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	610b      	str	r3, [r1, #16]
 8003f82:	e011      	b.n	8003fa8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f84:	4b1d      	ldr	r3, [pc, #116]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f8c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6892      	ldr	r2, [r2, #8]
 8003f94:	0211      	lsls	r1, r2, #8
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	6952      	ldr	r2, [r2, #20]
 8003f9a:	0852      	lsrs	r2, r2, #1
 8003f9c:	3a01      	subs	r2, #1
 8003f9e:	0652      	lsls	r2, r2, #25
 8003fa0:	430a      	orrs	r2, r1
 8003fa2:	4916      	ldr	r1, [pc, #88]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fa8:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a13      	ldr	r2, [pc, #76]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb4:	f7fd fde4 	bl	8001b80 <HAL_GetTick>
 8003fb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fba:	e009      	b.n	8003fd0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fbc:	f7fd fde0 	bl	8001b80 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d902      	bls.n	8003fd0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	73fb      	strb	r3, [r7, #15]
          break;
 8003fce:	e005      	b.n	8003fdc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d0ef      	beq.n	8003fbc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003fdc:	7bfb      	ldrb	r3, [r7, #15]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d106      	bne.n	8003ff0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fe2:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	4904      	ldr	r1, [pc, #16]	; (8003ffc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fec:	4313      	orrs	r3, r2
 8003fee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	40021000 	.word	0x40021000

08004000 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800400e:	4b6a      	ldr	r3, [pc, #424]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d018      	beq.n	800404c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800401a:	4b67      	ldr	r3, [pc, #412]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f003 0203 	and.w	r2, r3, #3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	429a      	cmp	r2, r3
 8004028:	d10d      	bne.n	8004046 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
       ||
 800402e:	2b00      	cmp	r3, #0
 8004030:	d009      	beq.n	8004046 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004032:	4b61      	ldr	r3, [pc, #388]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	091b      	lsrs	r3, r3, #4
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
       ||
 8004042:	429a      	cmp	r2, r3
 8004044:	d047      	beq.n	80040d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	73fb      	strb	r3, [r7, #15]
 800404a:	e044      	b.n	80040d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d018      	beq.n	8004086 <RCCEx_PLLSAI2_Config+0x86>
 8004054:	2b03      	cmp	r3, #3
 8004056:	d825      	bhi.n	80040a4 <RCCEx_PLLSAI2_Config+0xa4>
 8004058:	2b01      	cmp	r3, #1
 800405a:	d002      	beq.n	8004062 <RCCEx_PLLSAI2_Config+0x62>
 800405c:	2b02      	cmp	r3, #2
 800405e:	d009      	beq.n	8004074 <RCCEx_PLLSAI2_Config+0x74>
 8004060:	e020      	b.n	80040a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004062:	4b55      	ldr	r3, [pc, #340]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d11d      	bne.n	80040aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004072:	e01a      	b.n	80040aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004074:	4b50      	ldr	r3, [pc, #320]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407c:	2b00      	cmp	r3, #0
 800407e:	d116      	bne.n	80040ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004084:	e013      	b.n	80040ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004086:	4b4c      	ldr	r3, [pc, #304]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10f      	bne.n	80040b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004092:	4b49      	ldr	r3, [pc, #292]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040a2:	e006      	b.n	80040b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
      break;
 80040a8:	e004      	b.n	80040b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040aa:	bf00      	nop
 80040ac:	e002      	b.n	80040b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040ae:	bf00      	nop
 80040b0:	e000      	b.n	80040b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80040b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80040b4:	7bfb      	ldrb	r3, [r7, #15]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10d      	bne.n	80040d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80040ba:	4b3f      	ldr	r3, [pc, #252]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6819      	ldr	r1, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	430b      	orrs	r3, r1
 80040d0:	4939      	ldr	r1, [pc, #228]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d167      	bne.n	80041ac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80040dc:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a35      	ldr	r2, [pc, #212]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040e8:	f7fd fd4a 	bl	8001b80 <HAL_GetTick>
 80040ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80040ee:	e009      	b.n	8004104 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80040f0:	f7fd fd46 	bl	8001b80 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d902      	bls.n	8004104 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	73fb      	strb	r3, [r7, #15]
        break;
 8004102:	e005      	b.n	8004110 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004104:	4b2c      	ldr	r3, [pc, #176]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1ef      	bne.n	80040f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004110:	7bfb      	ldrb	r3, [r7, #15]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d14a      	bne.n	80041ac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d111      	bne.n	8004140 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800411c:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6892      	ldr	r2, [r2, #8]
 800412c:	0211      	lsls	r1, r2, #8
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68d2      	ldr	r2, [r2, #12]
 8004132:	0912      	lsrs	r2, r2, #4
 8004134:	0452      	lsls	r2, r2, #17
 8004136:	430a      	orrs	r2, r1
 8004138:	491f      	ldr	r1, [pc, #124]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800413a:	4313      	orrs	r3, r2
 800413c:	614b      	str	r3, [r1, #20]
 800413e:	e011      	b.n	8004164 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004140:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004148:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	6892      	ldr	r2, [r2, #8]
 8004150:	0211      	lsls	r1, r2, #8
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6912      	ldr	r2, [r2, #16]
 8004156:	0852      	lsrs	r2, r2, #1
 8004158:	3a01      	subs	r2, #1
 800415a:	0652      	lsls	r2, r2, #25
 800415c:	430a      	orrs	r2, r1
 800415e:	4916      	ldr	r1, [pc, #88]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004160:	4313      	orrs	r3, r2
 8004162:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004164:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a13      	ldr	r2, [pc, #76]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800416e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004170:	f7fd fd06 	bl	8001b80 <HAL_GetTick>
 8004174:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004176:	e009      	b.n	800418c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004178:	f7fd fd02 	bl	8001b80 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d902      	bls.n	800418c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	73fb      	strb	r3, [r7, #15]
          break;
 800418a:	e005      	b.n	8004198 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800418c:	4b0a      	ldr	r3, [pc, #40]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0ef      	beq.n	8004178 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004198:	7bfb      	ldrb	r3, [r7, #15]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d106      	bne.n	80041ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	4904      	ldr	r1, [pc, #16]	; (80041b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80041ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	40021000 	.word	0x40021000

080041bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e049      	b.n	8004262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7fd fb88 	bl	80018f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4619      	mov	r1, r3
 80041fa:	4610      	mov	r0, r2
 80041fc:	f000 f968 	bl	80044d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	d001      	beq.n	8004284 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e047      	b.n	8004314 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a23      	ldr	r2, [pc, #140]	; (8004320 <HAL_TIM_Base_Start+0xb4>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d01d      	beq.n	80042d2 <HAL_TIM_Base_Start+0x66>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800429e:	d018      	beq.n	80042d2 <HAL_TIM_Base_Start+0x66>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <HAL_TIM_Base_Start+0xb8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d013      	beq.n	80042d2 <HAL_TIM_Base_Start+0x66>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a1e      	ldr	r2, [pc, #120]	; (8004328 <HAL_TIM_Base_Start+0xbc>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d00e      	beq.n	80042d2 <HAL_TIM_Base_Start+0x66>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a1c      	ldr	r2, [pc, #112]	; (800432c <HAL_TIM_Base_Start+0xc0>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d009      	beq.n	80042d2 <HAL_TIM_Base_Start+0x66>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1b      	ldr	r2, [pc, #108]	; (8004330 <HAL_TIM_Base_Start+0xc4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d004      	beq.n	80042d2 <HAL_TIM_Base_Start+0x66>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a19      	ldr	r2, [pc, #100]	; (8004334 <HAL_TIM_Base_Start+0xc8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d115      	bne.n	80042fe <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	4b17      	ldr	r3, [pc, #92]	; (8004338 <HAL_TIM_Base_Start+0xcc>)
 80042da:	4013      	ands	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b06      	cmp	r3, #6
 80042e2:	d015      	beq.n	8004310 <HAL_TIM_Base_Start+0xa4>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ea:	d011      	beq.n	8004310 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042fc:	e008      	b.n	8004310 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
 800430e:	e000      	b.n	8004312 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004310:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3714      	adds	r7, #20
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	40012c00 	.word	0x40012c00
 8004324:	40000400 	.word	0x40000400
 8004328:	40000800 	.word	0x40000800
 800432c:	40000c00 	.word	0x40000c00
 8004330:	40013400 	.word	0x40013400
 8004334:	40014000 	.word	0x40014000
 8004338:	00010007 	.word	0x00010007

0800433c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004346:	2300      	movs	r3, #0
 8004348:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_TIM_ConfigClockSource+0x1c>
 8004354:	2302      	movs	r3, #2
 8004356:	e0b6      	b.n	80044c6 <HAL_TIM_ConfigClockSource+0x18a>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800437a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004382:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004394:	d03e      	beq.n	8004414 <HAL_TIM_ConfigClockSource+0xd8>
 8004396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800439a:	f200 8087 	bhi.w	80044ac <HAL_TIM_ConfigClockSource+0x170>
 800439e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043a2:	f000 8086 	beq.w	80044b2 <HAL_TIM_ConfigClockSource+0x176>
 80043a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043aa:	d87f      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x170>
 80043ac:	2b70      	cmp	r3, #112	; 0x70
 80043ae:	d01a      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0xaa>
 80043b0:	2b70      	cmp	r3, #112	; 0x70
 80043b2:	d87b      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x170>
 80043b4:	2b60      	cmp	r3, #96	; 0x60
 80043b6:	d050      	beq.n	800445a <HAL_TIM_ConfigClockSource+0x11e>
 80043b8:	2b60      	cmp	r3, #96	; 0x60
 80043ba:	d877      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x170>
 80043bc:	2b50      	cmp	r3, #80	; 0x50
 80043be:	d03c      	beq.n	800443a <HAL_TIM_ConfigClockSource+0xfe>
 80043c0:	2b50      	cmp	r3, #80	; 0x50
 80043c2:	d873      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x170>
 80043c4:	2b40      	cmp	r3, #64	; 0x40
 80043c6:	d058      	beq.n	800447a <HAL_TIM_ConfigClockSource+0x13e>
 80043c8:	2b40      	cmp	r3, #64	; 0x40
 80043ca:	d86f      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x170>
 80043cc:	2b30      	cmp	r3, #48	; 0x30
 80043ce:	d064      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x15e>
 80043d0:	2b30      	cmp	r3, #48	; 0x30
 80043d2:	d86b      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x170>
 80043d4:	2b20      	cmp	r3, #32
 80043d6:	d060      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x15e>
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d867      	bhi.n	80044ac <HAL_TIM_ConfigClockSource+0x170>
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d05c      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x15e>
 80043e0:	2b10      	cmp	r3, #16
 80043e2:	d05a      	beq.n	800449a <HAL_TIM_ConfigClockSource+0x15e>
 80043e4:	e062      	b.n	80044ac <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6899      	ldr	r1, [r3, #8]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f000 f97f 	bl	80046f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004408:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	609a      	str	r2, [r3, #8]
      break;
 8004412:	e04f      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	6899      	ldr	r1, [r3, #8]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f000 f968 	bl	80046f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004436:	609a      	str	r2, [r3, #8]
      break;
 8004438:	e03c      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6859      	ldr	r1, [r3, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	461a      	mov	r2, r3
 8004448:	f000 f8dc 	bl	8004604 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2150      	movs	r1, #80	; 0x50
 8004452:	4618      	mov	r0, r3
 8004454:	f000 f935 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004458:	e02c      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6818      	ldr	r0, [r3, #0]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	6859      	ldr	r1, [r3, #4]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	461a      	mov	r2, r3
 8004468:	f000 f8fb 	bl	8004662 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2160      	movs	r1, #96	; 0x60
 8004472:	4618      	mov	r0, r3
 8004474:	f000 f925 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004478:	e01c      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	6859      	ldr	r1, [r3, #4]
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	461a      	mov	r2, r3
 8004488:	f000 f8bc 	bl	8004604 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2140      	movs	r1, #64	; 0x40
 8004492:	4618      	mov	r0, r3
 8004494:	f000 f915 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004498:	e00c      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f000 f90c 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 80044aa:	e003      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	73fb      	strb	r3, [r7, #15]
      break;
 80044b0:	e000      	b.n	80044b4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80044b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
	...

080044d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a40      	ldr	r2, [pc, #256]	; (80045e4 <TIM_Base_SetConfig+0x114>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d013      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ee:	d00f      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a3d      	ldr	r2, [pc, #244]	; (80045e8 <TIM_Base_SetConfig+0x118>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00b      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a3c      	ldr	r2, [pc, #240]	; (80045ec <TIM_Base_SetConfig+0x11c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d007      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a3b      	ldr	r2, [pc, #236]	; (80045f0 <TIM_Base_SetConfig+0x120>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d003      	beq.n	8004510 <TIM_Base_SetConfig+0x40>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a3a      	ldr	r2, [pc, #232]	; (80045f4 <TIM_Base_SetConfig+0x124>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d108      	bne.n	8004522 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2f      	ldr	r2, [pc, #188]	; (80045e4 <TIM_Base_SetConfig+0x114>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01f      	beq.n	800456a <TIM_Base_SetConfig+0x9a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004530:	d01b      	beq.n	800456a <TIM_Base_SetConfig+0x9a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a2c      	ldr	r2, [pc, #176]	; (80045e8 <TIM_Base_SetConfig+0x118>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d017      	beq.n	800456a <TIM_Base_SetConfig+0x9a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a2b      	ldr	r2, [pc, #172]	; (80045ec <TIM_Base_SetConfig+0x11c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <TIM_Base_SetConfig+0x9a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2a      	ldr	r2, [pc, #168]	; (80045f0 <TIM_Base_SetConfig+0x120>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00f      	beq.n	800456a <TIM_Base_SetConfig+0x9a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a29      	ldr	r2, [pc, #164]	; (80045f4 <TIM_Base_SetConfig+0x124>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00b      	beq.n	800456a <TIM_Base_SetConfig+0x9a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a28      	ldr	r2, [pc, #160]	; (80045f8 <TIM_Base_SetConfig+0x128>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d007      	beq.n	800456a <TIM_Base_SetConfig+0x9a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a27      	ldr	r2, [pc, #156]	; (80045fc <TIM_Base_SetConfig+0x12c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d003      	beq.n	800456a <TIM_Base_SetConfig+0x9a>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a26      	ldr	r2, [pc, #152]	; (8004600 <TIM_Base_SetConfig+0x130>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d108      	bne.n	800457c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a10      	ldr	r2, [pc, #64]	; (80045e4 <TIM_Base_SetConfig+0x114>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00f      	beq.n	80045c8 <TIM_Base_SetConfig+0xf8>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a12      	ldr	r2, [pc, #72]	; (80045f4 <TIM_Base_SetConfig+0x124>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00b      	beq.n	80045c8 <TIM_Base_SetConfig+0xf8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a11      	ldr	r2, [pc, #68]	; (80045f8 <TIM_Base_SetConfig+0x128>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <TIM_Base_SetConfig+0xf8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a10      	ldr	r2, [pc, #64]	; (80045fc <TIM_Base_SetConfig+0x12c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_Base_SetConfig+0xf8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a0f      	ldr	r2, [pc, #60]	; (8004600 <TIM_Base_SetConfig+0x130>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d103      	bne.n	80045d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	615a      	str	r2, [r3, #20]
}
 80045d6:	bf00      	nop
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40012c00 	.word	0x40012c00
 80045e8:	40000400 	.word	0x40000400
 80045ec:	40000800 	.word	0x40000800
 80045f0:	40000c00 	.word	0x40000c00
 80045f4:	40013400 	.word	0x40013400
 80045f8:	40014000 	.word	0x40014000
 80045fc:	40014400 	.word	0x40014400
 8004600:	40014800 	.word	0x40014800

08004604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0201 	bic.w	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800462e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f023 030a 	bic.w	r3, r3, #10
 8004640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	621a      	str	r2, [r3, #32]
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004662:	b480      	push	{r7}
 8004664:	b087      	sub	sp, #28
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f023 0210 	bic.w	r2, r3, #16
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800468c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	031b      	lsls	r3, r3, #12
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800469e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b085      	sub	sp, #20
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	f043 0307 	orr.w	r3, r3, #7
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	609a      	str	r2, [r3, #8]
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	021a      	lsls	r2, r3, #8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	431a      	orrs	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4313      	orrs	r3, r2
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	bf00      	nop
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800474c:	2302      	movs	r3, #2
 800474e:	e068      	b.n	8004822 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a2e      	ldr	r2, [pc, #184]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d004      	beq.n	8004784 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2d      	ldr	r2, [pc, #180]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d108      	bne.n	8004796 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800478a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01d      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c2:	d018      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a1a      	ldr	r2, [pc, #104]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d00e      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a18      	ldr	r2, [pc, #96]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d009      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a13      	ldr	r2, [pc, #76]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d004      	beq.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a14      	ldr	r2, [pc, #80]	; (8004844 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d10c      	bne.n	8004810 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	4313      	orrs	r3, r2
 8004806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3714      	adds	r7, #20
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40012c00 	.word	0x40012c00
 8004834:	40013400 	.word	0x40013400
 8004838:	40000400 	.word	0x40000400
 800483c:	40000800 	.word	0x40000800
 8004840:	40000c00 	.word	0x40000c00
 8004844:	40014000 	.word	0x40014000

08004848 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e040      	b.n	80048dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800485e:	2b00      	cmp	r3, #0
 8004860:	d106      	bne.n	8004870 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7fd f892 	bl	8001994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2224      	movs	r2, #36	; 0x24
 8004874:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f8c0 	bl	8004a0c <UART_SetConfig>
 800488c:	4603      	mov	r3, r0
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e022      	b.n	80048dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	d002      	beq.n	80048a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 fb3e 	bl	8004f20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	689a      	ldr	r2, [r3, #8]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f042 0201 	orr.w	r2, r2, #1
 80048d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fbc5 	bl	8005064 <UART_CheckIdleState>
 80048da:	4603      	mov	r3, r0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b08a      	sub	sp, #40	; 0x28
 80048e8:	af02      	add	r7, sp, #8
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	603b      	str	r3, [r7, #0]
 80048f0:	4613      	mov	r3, r2
 80048f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	f040 8082 	bne.w	8004a02 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_UART_Transmit+0x26>
 8004904:	88fb      	ldrh	r3, [r7, #6]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e07a      	b.n	8004a04 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_UART_Transmit+0x38>
 8004918:	2302      	movs	r3, #2
 800491a:	e073      	b.n	8004a04 <HAL_UART_Transmit+0x120>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2221      	movs	r2, #33	; 0x21
 8004930:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004932:	f7fd f925 	bl	8001b80 <HAL_GetTick>
 8004936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	88fa      	ldrh	r2, [r7, #6]
 800493c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	88fa      	ldrh	r2, [r7, #6]
 8004944:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004950:	d108      	bne.n	8004964 <HAL_UART_Transmit+0x80>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d104      	bne.n	8004964 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800495a:	2300      	movs	r3, #0
 800495c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	61bb      	str	r3, [r7, #24]
 8004962:	e003      	b.n	800496c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004974:	e02d      	b.n	80049d2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2200      	movs	r2, #0
 800497e:	2180      	movs	r1, #128	; 0x80
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 fbb8 	bl	80050f6 <UART_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e039      	b.n	8004a04 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10b      	bne.n	80049ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	881a      	ldrh	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a2:	b292      	uxth	r2, r2
 80049a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	3302      	adds	r3, #2
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	e008      	b.n	80049c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	781a      	ldrb	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	b292      	uxth	r2, r2
 80049b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3301      	adds	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1cb      	bne.n	8004976 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2200      	movs	r2, #0
 80049e6:	2140      	movs	r1, #64	; 0x40
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 fb84 	bl	80050f6 <UART_WaitOnFlagUntilTimeout>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e005      	b.n	8004a04 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e000      	b.n	8004a04 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
  }
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}

08004a0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a0c:	b5b0      	push	{r4, r5, r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689a      	ldr	r2, [r3, #8]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	431a      	orrs	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	69db      	ldr	r3, [r3, #28]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	4bad      	ldr	r3, [pc, #692]	; (8004cec <UART_SetConfig+0x2e0>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	69f9      	ldr	r1, [r7, #28]
 8004a40:	430b      	orrs	r3, r1
 8004a42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	68da      	ldr	r2, [r3, #12]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	430a      	orrs	r2, r1
 8004a58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4aa2      	ldr	r2, [pc, #648]	; (8004cf0 <UART_SetConfig+0x2e4>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69fa      	ldr	r2, [r7, #28]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a99      	ldr	r2, [pc, #612]	; (8004cf4 <UART_SetConfig+0x2e8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d121      	bne.n	8004ad6 <UART_SetConfig+0xca>
 8004a92:	4b99      	ldr	r3, [pc, #612]	; (8004cf8 <UART_SetConfig+0x2ec>)
 8004a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a98:	f003 0303 	and.w	r3, r3, #3
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d817      	bhi.n	8004ad0 <UART_SetConfig+0xc4>
 8004aa0:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <UART_SetConfig+0x9c>)
 8004aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa6:	bf00      	nop
 8004aa8:	08004ab9 	.word	0x08004ab9
 8004aac:	08004ac5 	.word	0x08004ac5
 8004ab0:	08004abf 	.word	0x08004abf
 8004ab4:	08004acb 	.word	0x08004acb
 8004ab8:	2301      	movs	r3, #1
 8004aba:	76fb      	strb	r3, [r7, #27]
 8004abc:	e0e7      	b.n	8004c8e <UART_SetConfig+0x282>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	76fb      	strb	r3, [r7, #27]
 8004ac2:	e0e4      	b.n	8004c8e <UART_SetConfig+0x282>
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	76fb      	strb	r3, [r7, #27]
 8004ac8:	e0e1      	b.n	8004c8e <UART_SetConfig+0x282>
 8004aca:	2308      	movs	r3, #8
 8004acc:	76fb      	strb	r3, [r7, #27]
 8004ace:	e0de      	b.n	8004c8e <UART_SetConfig+0x282>
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	76fb      	strb	r3, [r7, #27]
 8004ad4:	e0db      	b.n	8004c8e <UART_SetConfig+0x282>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a88      	ldr	r2, [pc, #544]	; (8004cfc <UART_SetConfig+0x2f0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d132      	bne.n	8004b46 <UART_SetConfig+0x13a>
 8004ae0:	4b85      	ldr	r3, [pc, #532]	; (8004cf8 <UART_SetConfig+0x2ec>)
 8004ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae6:	f003 030c 	and.w	r3, r3, #12
 8004aea:	2b0c      	cmp	r3, #12
 8004aec:	d828      	bhi.n	8004b40 <UART_SetConfig+0x134>
 8004aee:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <UART_SetConfig+0xe8>)
 8004af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af4:	08004b29 	.word	0x08004b29
 8004af8:	08004b41 	.word	0x08004b41
 8004afc:	08004b41 	.word	0x08004b41
 8004b00:	08004b41 	.word	0x08004b41
 8004b04:	08004b35 	.word	0x08004b35
 8004b08:	08004b41 	.word	0x08004b41
 8004b0c:	08004b41 	.word	0x08004b41
 8004b10:	08004b41 	.word	0x08004b41
 8004b14:	08004b2f 	.word	0x08004b2f
 8004b18:	08004b41 	.word	0x08004b41
 8004b1c:	08004b41 	.word	0x08004b41
 8004b20:	08004b41 	.word	0x08004b41
 8004b24:	08004b3b 	.word	0x08004b3b
 8004b28:	2300      	movs	r3, #0
 8004b2a:	76fb      	strb	r3, [r7, #27]
 8004b2c:	e0af      	b.n	8004c8e <UART_SetConfig+0x282>
 8004b2e:	2302      	movs	r3, #2
 8004b30:	76fb      	strb	r3, [r7, #27]
 8004b32:	e0ac      	b.n	8004c8e <UART_SetConfig+0x282>
 8004b34:	2304      	movs	r3, #4
 8004b36:	76fb      	strb	r3, [r7, #27]
 8004b38:	e0a9      	b.n	8004c8e <UART_SetConfig+0x282>
 8004b3a:	2308      	movs	r3, #8
 8004b3c:	76fb      	strb	r3, [r7, #27]
 8004b3e:	e0a6      	b.n	8004c8e <UART_SetConfig+0x282>
 8004b40:	2310      	movs	r3, #16
 8004b42:	76fb      	strb	r3, [r7, #27]
 8004b44:	e0a3      	b.n	8004c8e <UART_SetConfig+0x282>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a6d      	ldr	r2, [pc, #436]	; (8004d00 <UART_SetConfig+0x2f4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d120      	bne.n	8004b92 <UART_SetConfig+0x186>
 8004b50:	4b69      	ldr	r3, [pc, #420]	; (8004cf8 <UART_SetConfig+0x2ec>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b56:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b5a:	2b30      	cmp	r3, #48	; 0x30
 8004b5c:	d013      	beq.n	8004b86 <UART_SetConfig+0x17a>
 8004b5e:	2b30      	cmp	r3, #48	; 0x30
 8004b60:	d814      	bhi.n	8004b8c <UART_SetConfig+0x180>
 8004b62:	2b20      	cmp	r3, #32
 8004b64:	d009      	beq.n	8004b7a <UART_SetConfig+0x16e>
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d810      	bhi.n	8004b8c <UART_SetConfig+0x180>
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <UART_SetConfig+0x168>
 8004b6e:	2b10      	cmp	r3, #16
 8004b70:	d006      	beq.n	8004b80 <UART_SetConfig+0x174>
 8004b72:	e00b      	b.n	8004b8c <UART_SetConfig+0x180>
 8004b74:	2300      	movs	r3, #0
 8004b76:	76fb      	strb	r3, [r7, #27]
 8004b78:	e089      	b.n	8004c8e <UART_SetConfig+0x282>
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	76fb      	strb	r3, [r7, #27]
 8004b7e:	e086      	b.n	8004c8e <UART_SetConfig+0x282>
 8004b80:	2304      	movs	r3, #4
 8004b82:	76fb      	strb	r3, [r7, #27]
 8004b84:	e083      	b.n	8004c8e <UART_SetConfig+0x282>
 8004b86:	2308      	movs	r3, #8
 8004b88:	76fb      	strb	r3, [r7, #27]
 8004b8a:	e080      	b.n	8004c8e <UART_SetConfig+0x282>
 8004b8c:	2310      	movs	r3, #16
 8004b8e:	76fb      	strb	r3, [r7, #27]
 8004b90:	e07d      	b.n	8004c8e <UART_SetConfig+0x282>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a5b      	ldr	r2, [pc, #364]	; (8004d04 <UART_SetConfig+0x2f8>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d120      	bne.n	8004bde <UART_SetConfig+0x1d2>
 8004b9c:	4b56      	ldr	r3, [pc, #344]	; (8004cf8 <UART_SetConfig+0x2ec>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ba6:	2bc0      	cmp	r3, #192	; 0xc0
 8004ba8:	d013      	beq.n	8004bd2 <UART_SetConfig+0x1c6>
 8004baa:	2bc0      	cmp	r3, #192	; 0xc0
 8004bac:	d814      	bhi.n	8004bd8 <UART_SetConfig+0x1cc>
 8004bae:	2b80      	cmp	r3, #128	; 0x80
 8004bb0:	d009      	beq.n	8004bc6 <UART_SetConfig+0x1ba>
 8004bb2:	2b80      	cmp	r3, #128	; 0x80
 8004bb4:	d810      	bhi.n	8004bd8 <UART_SetConfig+0x1cc>
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d002      	beq.n	8004bc0 <UART_SetConfig+0x1b4>
 8004bba:	2b40      	cmp	r3, #64	; 0x40
 8004bbc:	d006      	beq.n	8004bcc <UART_SetConfig+0x1c0>
 8004bbe:	e00b      	b.n	8004bd8 <UART_SetConfig+0x1cc>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	76fb      	strb	r3, [r7, #27]
 8004bc4:	e063      	b.n	8004c8e <UART_SetConfig+0x282>
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	76fb      	strb	r3, [r7, #27]
 8004bca:	e060      	b.n	8004c8e <UART_SetConfig+0x282>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	76fb      	strb	r3, [r7, #27]
 8004bd0:	e05d      	b.n	8004c8e <UART_SetConfig+0x282>
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	76fb      	strb	r3, [r7, #27]
 8004bd6:	e05a      	b.n	8004c8e <UART_SetConfig+0x282>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	76fb      	strb	r3, [r7, #27]
 8004bdc:	e057      	b.n	8004c8e <UART_SetConfig+0x282>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a49      	ldr	r2, [pc, #292]	; (8004d08 <UART_SetConfig+0x2fc>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d125      	bne.n	8004c34 <UART_SetConfig+0x228>
 8004be8:	4b43      	ldr	r3, [pc, #268]	; (8004cf8 <UART_SetConfig+0x2ec>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf6:	d017      	beq.n	8004c28 <UART_SetConfig+0x21c>
 8004bf8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfc:	d817      	bhi.n	8004c2e <UART_SetConfig+0x222>
 8004bfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c02:	d00b      	beq.n	8004c1c <UART_SetConfig+0x210>
 8004c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c08:	d811      	bhi.n	8004c2e <UART_SetConfig+0x222>
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d003      	beq.n	8004c16 <UART_SetConfig+0x20a>
 8004c0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c12:	d006      	beq.n	8004c22 <UART_SetConfig+0x216>
 8004c14:	e00b      	b.n	8004c2e <UART_SetConfig+0x222>
 8004c16:	2300      	movs	r3, #0
 8004c18:	76fb      	strb	r3, [r7, #27]
 8004c1a:	e038      	b.n	8004c8e <UART_SetConfig+0x282>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	76fb      	strb	r3, [r7, #27]
 8004c20:	e035      	b.n	8004c8e <UART_SetConfig+0x282>
 8004c22:	2304      	movs	r3, #4
 8004c24:	76fb      	strb	r3, [r7, #27]
 8004c26:	e032      	b.n	8004c8e <UART_SetConfig+0x282>
 8004c28:	2308      	movs	r3, #8
 8004c2a:	76fb      	strb	r3, [r7, #27]
 8004c2c:	e02f      	b.n	8004c8e <UART_SetConfig+0x282>
 8004c2e:	2310      	movs	r3, #16
 8004c30:	76fb      	strb	r3, [r7, #27]
 8004c32:	e02c      	b.n	8004c8e <UART_SetConfig+0x282>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a2d      	ldr	r2, [pc, #180]	; (8004cf0 <UART_SetConfig+0x2e4>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d125      	bne.n	8004c8a <UART_SetConfig+0x27e>
 8004c3e:	4b2e      	ldr	r3, [pc, #184]	; (8004cf8 <UART_SetConfig+0x2ec>)
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c4c:	d017      	beq.n	8004c7e <UART_SetConfig+0x272>
 8004c4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c52:	d817      	bhi.n	8004c84 <UART_SetConfig+0x278>
 8004c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c58:	d00b      	beq.n	8004c72 <UART_SetConfig+0x266>
 8004c5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c5e:	d811      	bhi.n	8004c84 <UART_SetConfig+0x278>
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <UART_SetConfig+0x260>
 8004c64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c68:	d006      	beq.n	8004c78 <UART_SetConfig+0x26c>
 8004c6a:	e00b      	b.n	8004c84 <UART_SetConfig+0x278>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	76fb      	strb	r3, [r7, #27]
 8004c70:	e00d      	b.n	8004c8e <UART_SetConfig+0x282>
 8004c72:	2302      	movs	r3, #2
 8004c74:	76fb      	strb	r3, [r7, #27]
 8004c76:	e00a      	b.n	8004c8e <UART_SetConfig+0x282>
 8004c78:	2304      	movs	r3, #4
 8004c7a:	76fb      	strb	r3, [r7, #27]
 8004c7c:	e007      	b.n	8004c8e <UART_SetConfig+0x282>
 8004c7e:	2308      	movs	r3, #8
 8004c80:	76fb      	strb	r3, [r7, #27]
 8004c82:	e004      	b.n	8004c8e <UART_SetConfig+0x282>
 8004c84:	2310      	movs	r3, #16
 8004c86:	76fb      	strb	r3, [r7, #27]
 8004c88:	e001      	b.n	8004c8e <UART_SetConfig+0x282>
 8004c8a:	2310      	movs	r3, #16
 8004c8c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <UART_SetConfig+0x2e4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	f040 8087 	bne.w	8004da8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c9a:	7efb      	ldrb	r3, [r7, #27]
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d837      	bhi.n	8004d10 <UART_SetConfig+0x304>
 8004ca0:	a201      	add	r2, pc, #4	; (adr r2, 8004ca8 <UART_SetConfig+0x29c>)
 8004ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca6:	bf00      	nop
 8004ca8:	08004ccd 	.word	0x08004ccd
 8004cac:	08004d11 	.word	0x08004d11
 8004cb0:	08004cd5 	.word	0x08004cd5
 8004cb4:	08004d11 	.word	0x08004d11
 8004cb8:	08004cdb 	.word	0x08004cdb
 8004cbc:	08004d11 	.word	0x08004d11
 8004cc0:	08004d11 	.word	0x08004d11
 8004cc4:	08004d11 	.word	0x08004d11
 8004cc8:	08004ce3 	.word	0x08004ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ccc:	f7fe fd2e 	bl	800372c <HAL_RCC_GetPCLK1Freq>
 8004cd0:	6178      	str	r0, [r7, #20]
        break;
 8004cd2:	e022      	b.n	8004d1a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cd4:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <UART_SetConfig+0x300>)
 8004cd6:	617b      	str	r3, [r7, #20]
        break;
 8004cd8:	e01f      	b.n	8004d1a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cda:	f7fe fc8f 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 8004cde:	6178      	str	r0, [r7, #20]
        break;
 8004ce0:	e01b      	b.n	8004d1a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce6:	617b      	str	r3, [r7, #20]
        break;
 8004ce8:	e017      	b.n	8004d1a <UART_SetConfig+0x30e>
 8004cea:	bf00      	nop
 8004cec:	efff69f3 	.word	0xefff69f3
 8004cf0:	40008000 	.word	0x40008000
 8004cf4:	40013800 	.word	0x40013800
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40004400 	.word	0x40004400
 8004d00:	40004800 	.word	0x40004800
 8004d04:	40004c00 	.word	0x40004c00
 8004d08:	40005000 	.word	0x40005000
 8004d0c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	76bb      	strb	r3, [r7, #26]
        break;
 8004d18:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80f1 	beq.w	8004f04 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	4613      	mov	r3, r2
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	4413      	add	r3, r2
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d305      	bcc.n	8004d3e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d902      	bls.n	8004d44 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	76bb      	strb	r3, [r7, #26]
 8004d42:	e0df      	b.n	8004f04 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f04f 0100 	mov.w	r1, #0
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	020b      	lsls	r3, r1, #8
 8004d56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004d5a:	0202      	lsls	r2, r0, #8
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	6849      	ldr	r1, [r1, #4]
 8004d60:	0849      	lsrs	r1, r1, #1
 8004d62:	4608      	mov	r0, r1
 8004d64:	f04f 0100 	mov.w	r1, #0
 8004d68:	1814      	adds	r4, r2, r0
 8004d6a:	eb43 0501 	adc.w	r5, r3, r1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f04f 0300 	mov.w	r3, #0
 8004d78:	4620      	mov	r0, r4
 8004d7a:	4629      	mov	r1, r5
 8004d7c:	f7fb ff14 	bl	8000ba8 <__aeabi_uldivmod>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4613      	mov	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d8e:	d308      	bcc.n	8004da2 <UART_SetConfig+0x396>
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d96:	d204      	bcs.n	8004da2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	60da      	str	r2, [r3, #12]
 8004da0:	e0b0      	b.n	8004f04 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	76bb      	strb	r3, [r7, #26]
 8004da6:	e0ad      	b.n	8004f04 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	69db      	ldr	r3, [r3, #28]
 8004dac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db0:	d15b      	bne.n	8004e6a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004db2:	7efb      	ldrb	r3, [r7, #27]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d828      	bhi.n	8004e0a <UART_SetConfig+0x3fe>
 8004db8:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <UART_SetConfig+0x3b4>)
 8004dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dbe:	bf00      	nop
 8004dc0:	08004de5 	.word	0x08004de5
 8004dc4:	08004ded 	.word	0x08004ded
 8004dc8:	08004df5 	.word	0x08004df5
 8004dcc:	08004e0b 	.word	0x08004e0b
 8004dd0:	08004dfb 	.word	0x08004dfb
 8004dd4:	08004e0b 	.word	0x08004e0b
 8004dd8:	08004e0b 	.word	0x08004e0b
 8004ddc:	08004e0b 	.word	0x08004e0b
 8004de0:	08004e03 	.word	0x08004e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de4:	f7fe fca2 	bl	800372c <HAL_RCC_GetPCLK1Freq>
 8004de8:	6178      	str	r0, [r7, #20]
        break;
 8004dea:	e013      	b.n	8004e14 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dec:	f7fe fcb4 	bl	8003758 <HAL_RCC_GetPCLK2Freq>
 8004df0:	6178      	str	r0, [r7, #20]
        break;
 8004df2:	e00f      	b.n	8004e14 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004df4:	4b49      	ldr	r3, [pc, #292]	; (8004f1c <UART_SetConfig+0x510>)
 8004df6:	617b      	str	r3, [r7, #20]
        break;
 8004df8:	e00c      	b.n	8004e14 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dfa:	f7fe fbff 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 8004dfe:	6178      	str	r0, [r7, #20]
        break;
 8004e00:	e008      	b.n	8004e14 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e06:	617b      	str	r3, [r7, #20]
        break;
 8004e08:	e004      	b.n	8004e14 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	76bb      	strb	r3, [r7, #26]
        break;
 8004e12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d074      	beq.n	8004f04 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	005a      	lsls	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	085b      	lsrs	r3, r3, #1
 8004e24:	441a      	add	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e2e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	2b0f      	cmp	r3, #15
 8004e34:	d916      	bls.n	8004e64 <UART_SetConfig+0x458>
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3c:	d212      	bcs.n	8004e64 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f023 030f 	bic.w	r3, r3, #15
 8004e46:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	085b      	lsrs	r3, r3, #1
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	89fb      	ldrh	r3, [r7, #14]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	89fa      	ldrh	r2, [r7, #14]
 8004e60:	60da      	str	r2, [r3, #12]
 8004e62:	e04f      	b.n	8004f04 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	76bb      	strb	r3, [r7, #26]
 8004e68:	e04c      	b.n	8004f04 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e6a:	7efb      	ldrb	r3, [r7, #27]
 8004e6c:	2b08      	cmp	r3, #8
 8004e6e:	d828      	bhi.n	8004ec2 <UART_SetConfig+0x4b6>
 8004e70:	a201      	add	r2, pc, #4	; (adr r2, 8004e78 <UART_SetConfig+0x46c>)
 8004e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e76:	bf00      	nop
 8004e78:	08004e9d 	.word	0x08004e9d
 8004e7c:	08004ea5 	.word	0x08004ea5
 8004e80:	08004ead 	.word	0x08004ead
 8004e84:	08004ec3 	.word	0x08004ec3
 8004e88:	08004eb3 	.word	0x08004eb3
 8004e8c:	08004ec3 	.word	0x08004ec3
 8004e90:	08004ec3 	.word	0x08004ec3
 8004e94:	08004ec3 	.word	0x08004ec3
 8004e98:	08004ebb 	.word	0x08004ebb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e9c:	f7fe fc46 	bl	800372c <HAL_RCC_GetPCLK1Freq>
 8004ea0:	6178      	str	r0, [r7, #20]
        break;
 8004ea2:	e013      	b.n	8004ecc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ea4:	f7fe fc58 	bl	8003758 <HAL_RCC_GetPCLK2Freq>
 8004ea8:	6178      	str	r0, [r7, #20]
        break;
 8004eaa:	e00f      	b.n	8004ecc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004eac:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <UART_SetConfig+0x510>)
 8004eae:	617b      	str	r3, [r7, #20]
        break;
 8004eb0:	e00c      	b.n	8004ecc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eb2:	f7fe fba3 	bl	80035fc <HAL_RCC_GetSysClockFreq>
 8004eb6:	6178      	str	r0, [r7, #20]
        break;
 8004eb8:	e008      	b.n	8004ecc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ebe:	617b      	str	r3, [r7, #20]
        break;
 8004ec0:	e004      	b.n	8004ecc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	76bb      	strb	r3, [r7, #26]
        break;
 8004eca:	bf00      	nop
    }

    if (pclk != 0U)
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d018      	beq.n	8004f04 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	085a      	lsrs	r2, r3, #1
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	441a      	add	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ee4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	2b0f      	cmp	r3, #15
 8004eea:	d909      	bls.n	8004f00 <UART_SetConfig+0x4f4>
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef2:	d205      	bcs.n	8004f00 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60da      	str	r2, [r3, #12]
 8004efe:	e001      	b.n	8004f04 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004f10:	7ebb      	ldrb	r3, [r7, #26]
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3720      	adds	r7, #32
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bdb0      	pop	{r4, r5, r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	00f42400 	.word	0x00f42400

08004f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f92:	f003 0308 	and.w	r3, r3, #8
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	430a      	orrs	r2, r1
 8004fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	f003 0310 	and.w	r3, r3, #16
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	f003 0320 	and.w	r3, r3, #32
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d01a      	beq.n	8005036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800501e:	d10a      	bne.n	8005036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00a      	beq.n	8005058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	430a      	orrs	r2, r1
 8005056:	605a      	str	r2, [r3, #4]
  }
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af02      	add	r7, sp, #8
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005074:	f7fc fd84 	bl	8001b80 <HAL_GetTick>
 8005078:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b08      	cmp	r3, #8
 8005086:	d10e      	bne.n	80050a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f82d 	bl	80050f6 <UART_WaitOnFlagUntilTimeout>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e023      	b.n	80050ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d10e      	bne.n	80050d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050b8:	9300      	str	r3, [sp, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f817 	bl	80050f6 <UART_WaitOnFlagUntilTimeout>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e00d      	b.n	80050ee <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b09c      	sub	sp, #112	; 0x70
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	603b      	str	r3, [r7, #0]
 8005102:	4613      	mov	r3, r2
 8005104:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005106:	e0a5      	b.n	8005254 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800510a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510e:	f000 80a1 	beq.w	8005254 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005112:	f7fc fd35 	bl	8001b80 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800511e:	429a      	cmp	r2, r3
 8005120:	d302      	bcc.n	8005128 <UART_WaitOnFlagUntilTimeout+0x32>
 8005122:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005124:	2b00      	cmp	r3, #0
 8005126:	d13e      	bne.n	80051a6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005138:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800513c:	667b      	str	r3, [r7, #100]	; 0x64
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005146:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005148:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800514c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800514e:	e841 2300 	strex	r3, r2, [r1]
 8005152:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005154:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1e6      	bne.n	8005128 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	3308      	adds	r3, #8
 8005160:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005164:	e853 3f00 	ldrex	r3, [r3]
 8005168:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	f023 0301 	bic.w	r3, r3, #1
 8005170:	663b      	str	r3, [r7, #96]	; 0x60
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3308      	adds	r3, #8
 8005178:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800517a:	64ba      	str	r2, [r7, #72]	; 0x48
 800517c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005180:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e5      	bne.n	800515a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2220      	movs	r2, #32
 8005192:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2220      	movs	r2, #32
 8005198:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e067      	b.n	8005276 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d04f      	beq.n	8005254 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051c2:	d147      	bne.n	8005254 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051cc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	461a      	mov	r2, r3
 80051ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ec:	637b      	str	r3, [r7, #52]	; 0x34
 80051ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e6      	bne.n	80051ce <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3308      	adds	r3, #8
 8005206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	613b      	str	r3, [r7, #16]
   return(result);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f023 0301 	bic.w	r3, r3, #1
 8005216:	66bb      	str	r3, [r7, #104]	; 0x68
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3308      	adds	r3, #8
 800521e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005220:	623a      	str	r2, [r7, #32]
 8005222:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	69f9      	ldr	r1, [r7, #28]
 8005226:	6a3a      	ldr	r2, [r7, #32]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	61bb      	str	r3, [r7, #24]
   return(result);
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e5      	bne.n	8005200 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2220      	movs	r2, #32
 800523e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e010      	b.n	8005276 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	69da      	ldr	r2, [r3, #28]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4013      	ands	r3, r2
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	429a      	cmp	r2, r3
 8005262:	bf0c      	ite	eq
 8005264:	2301      	moveq	r3, #1
 8005266:	2300      	movne	r3, #0
 8005268:	b2db      	uxtb	r3, r3
 800526a:	461a      	mov	r2, r3
 800526c:	79fb      	ldrb	r3, [r7, #7]
 800526e:	429a      	cmp	r2, r3
 8005270:	f43f af4a 	beq.w	8005108 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3770      	adds	r7, #112	; 0x70
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
	...

08005280 <__errno>:
 8005280:	4b01      	ldr	r3, [pc, #4]	; (8005288 <__errno+0x8>)
 8005282:	6818      	ldr	r0, [r3, #0]
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	2000000c 	.word	0x2000000c

0800528c <__libc_init_array>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	4d0d      	ldr	r5, [pc, #52]	; (80052c4 <__libc_init_array+0x38>)
 8005290:	4c0d      	ldr	r4, [pc, #52]	; (80052c8 <__libc_init_array+0x3c>)
 8005292:	1b64      	subs	r4, r4, r5
 8005294:	10a4      	asrs	r4, r4, #2
 8005296:	2600      	movs	r6, #0
 8005298:	42a6      	cmp	r6, r4
 800529a:	d109      	bne.n	80052b0 <__libc_init_array+0x24>
 800529c:	4d0b      	ldr	r5, [pc, #44]	; (80052cc <__libc_init_array+0x40>)
 800529e:	4c0c      	ldr	r4, [pc, #48]	; (80052d0 <__libc_init_array+0x44>)
 80052a0:	f002 feb4 	bl	800800c <_init>
 80052a4:	1b64      	subs	r4, r4, r5
 80052a6:	10a4      	asrs	r4, r4, #2
 80052a8:	2600      	movs	r6, #0
 80052aa:	42a6      	cmp	r6, r4
 80052ac:	d105      	bne.n	80052ba <__libc_init_array+0x2e>
 80052ae:	bd70      	pop	{r4, r5, r6, pc}
 80052b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b4:	4798      	blx	r3
 80052b6:	3601      	adds	r6, #1
 80052b8:	e7ee      	b.n	8005298 <__libc_init_array+0xc>
 80052ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80052be:	4798      	blx	r3
 80052c0:	3601      	adds	r6, #1
 80052c2:	e7f2      	b.n	80052aa <__libc_init_array+0x1e>
 80052c4:	08008494 	.word	0x08008494
 80052c8:	08008494 	.word	0x08008494
 80052cc:	08008494 	.word	0x08008494
 80052d0:	08008498 	.word	0x08008498

080052d4 <memset>:
 80052d4:	4402      	add	r2, r0
 80052d6:	4603      	mov	r3, r0
 80052d8:	4293      	cmp	r3, r2
 80052da:	d100      	bne.n	80052de <memset+0xa>
 80052dc:	4770      	bx	lr
 80052de:	f803 1b01 	strb.w	r1, [r3], #1
 80052e2:	e7f9      	b.n	80052d8 <memset+0x4>

080052e4 <__cvt>:
 80052e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052e8:	ec55 4b10 	vmov	r4, r5, d0
 80052ec:	2d00      	cmp	r5, #0
 80052ee:	460e      	mov	r6, r1
 80052f0:	4619      	mov	r1, r3
 80052f2:	462b      	mov	r3, r5
 80052f4:	bfbb      	ittet	lt
 80052f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80052fa:	461d      	movlt	r5, r3
 80052fc:	2300      	movge	r3, #0
 80052fe:	232d      	movlt	r3, #45	; 0x2d
 8005300:	700b      	strb	r3, [r1, #0]
 8005302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005304:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005308:	4691      	mov	r9, r2
 800530a:	f023 0820 	bic.w	r8, r3, #32
 800530e:	bfbc      	itt	lt
 8005310:	4622      	movlt	r2, r4
 8005312:	4614      	movlt	r4, r2
 8005314:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005318:	d005      	beq.n	8005326 <__cvt+0x42>
 800531a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800531e:	d100      	bne.n	8005322 <__cvt+0x3e>
 8005320:	3601      	adds	r6, #1
 8005322:	2102      	movs	r1, #2
 8005324:	e000      	b.n	8005328 <__cvt+0x44>
 8005326:	2103      	movs	r1, #3
 8005328:	ab03      	add	r3, sp, #12
 800532a:	9301      	str	r3, [sp, #4]
 800532c:	ab02      	add	r3, sp, #8
 800532e:	9300      	str	r3, [sp, #0]
 8005330:	ec45 4b10 	vmov	d0, r4, r5
 8005334:	4653      	mov	r3, sl
 8005336:	4632      	mov	r2, r6
 8005338:	f000 fcea 	bl	8005d10 <_dtoa_r>
 800533c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005340:	4607      	mov	r7, r0
 8005342:	d102      	bne.n	800534a <__cvt+0x66>
 8005344:	f019 0f01 	tst.w	r9, #1
 8005348:	d022      	beq.n	8005390 <__cvt+0xac>
 800534a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800534e:	eb07 0906 	add.w	r9, r7, r6
 8005352:	d110      	bne.n	8005376 <__cvt+0x92>
 8005354:	783b      	ldrb	r3, [r7, #0]
 8005356:	2b30      	cmp	r3, #48	; 0x30
 8005358:	d10a      	bne.n	8005370 <__cvt+0x8c>
 800535a:	2200      	movs	r2, #0
 800535c:	2300      	movs	r3, #0
 800535e:	4620      	mov	r0, r4
 8005360:	4629      	mov	r1, r5
 8005362:	f7fb fbb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005366:	b918      	cbnz	r0, 8005370 <__cvt+0x8c>
 8005368:	f1c6 0601 	rsb	r6, r6, #1
 800536c:	f8ca 6000 	str.w	r6, [sl]
 8005370:	f8da 3000 	ldr.w	r3, [sl]
 8005374:	4499      	add	r9, r3
 8005376:	2200      	movs	r2, #0
 8005378:	2300      	movs	r3, #0
 800537a:	4620      	mov	r0, r4
 800537c:	4629      	mov	r1, r5
 800537e:	f7fb fba3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005382:	b108      	cbz	r0, 8005388 <__cvt+0xa4>
 8005384:	f8cd 900c 	str.w	r9, [sp, #12]
 8005388:	2230      	movs	r2, #48	; 0x30
 800538a:	9b03      	ldr	r3, [sp, #12]
 800538c:	454b      	cmp	r3, r9
 800538e:	d307      	bcc.n	80053a0 <__cvt+0xbc>
 8005390:	9b03      	ldr	r3, [sp, #12]
 8005392:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005394:	1bdb      	subs	r3, r3, r7
 8005396:	4638      	mov	r0, r7
 8005398:	6013      	str	r3, [r2, #0]
 800539a:	b004      	add	sp, #16
 800539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a0:	1c59      	adds	r1, r3, #1
 80053a2:	9103      	str	r1, [sp, #12]
 80053a4:	701a      	strb	r2, [r3, #0]
 80053a6:	e7f0      	b.n	800538a <__cvt+0xa6>

080053a8 <__exponent>:
 80053a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053aa:	4603      	mov	r3, r0
 80053ac:	2900      	cmp	r1, #0
 80053ae:	bfb8      	it	lt
 80053b0:	4249      	neglt	r1, r1
 80053b2:	f803 2b02 	strb.w	r2, [r3], #2
 80053b6:	bfb4      	ite	lt
 80053b8:	222d      	movlt	r2, #45	; 0x2d
 80053ba:	222b      	movge	r2, #43	; 0x2b
 80053bc:	2909      	cmp	r1, #9
 80053be:	7042      	strb	r2, [r0, #1]
 80053c0:	dd2a      	ble.n	8005418 <__exponent+0x70>
 80053c2:	f10d 0407 	add.w	r4, sp, #7
 80053c6:	46a4      	mov	ip, r4
 80053c8:	270a      	movs	r7, #10
 80053ca:	46a6      	mov	lr, r4
 80053cc:	460a      	mov	r2, r1
 80053ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80053d2:	fb07 1516 	mls	r5, r7, r6, r1
 80053d6:	3530      	adds	r5, #48	; 0x30
 80053d8:	2a63      	cmp	r2, #99	; 0x63
 80053da:	f104 34ff 	add.w	r4, r4, #4294967295
 80053de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80053e2:	4631      	mov	r1, r6
 80053e4:	dcf1      	bgt.n	80053ca <__exponent+0x22>
 80053e6:	3130      	adds	r1, #48	; 0x30
 80053e8:	f1ae 0502 	sub.w	r5, lr, #2
 80053ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80053f0:	1c44      	adds	r4, r0, #1
 80053f2:	4629      	mov	r1, r5
 80053f4:	4561      	cmp	r1, ip
 80053f6:	d30a      	bcc.n	800540e <__exponent+0x66>
 80053f8:	f10d 0209 	add.w	r2, sp, #9
 80053fc:	eba2 020e 	sub.w	r2, r2, lr
 8005400:	4565      	cmp	r5, ip
 8005402:	bf88      	it	hi
 8005404:	2200      	movhi	r2, #0
 8005406:	4413      	add	r3, r2
 8005408:	1a18      	subs	r0, r3, r0
 800540a:	b003      	add	sp, #12
 800540c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800540e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005412:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005416:	e7ed      	b.n	80053f4 <__exponent+0x4c>
 8005418:	2330      	movs	r3, #48	; 0x30
 800541a:	3130      	adds	r1, #48	; 0x30
 800541c:	7083      	strb	r3, [r0, #2]
 800541e:	70c1      	strb	r1, [r0, #3]
 8005420:	1d03      	adds	r3, r0, #4
 8005422:	e7f1      	b.n	8005408 <__exponent+0x60>

08005424 <_printf_float>:
 8005424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005428:	ed2d 8b02 	vpush	{d8}
 800542c:	b08d      	sub	sp, #52	; 0x34
 800542e:	460c      	mov	r4, r1
 8005430:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005434:	4616      	mov	r6, r2
 8005436:	461f      	mov	r7, r3
 8005438:	4605      	mov	r5, r0
 800543a:	f001 fa55 	bl	80068e8 <_localeconv_r>
 800543e:	f8d0 a000 	ldr.w	sl, [r0]
 8005442:	4650      	mov	r0, sl
 8005444:	f7fa fec4 	bl	80001d0 <strlen>
 8005448:	2300      	movs	r3, #0
 800544a:	930a      	str	r3, [sp, #40]	; 0x28
 800544c:	6823      	ldr	r3, [r4, #0]
 800544e:	9305      	str	r3, [sp, #20]
 8005450:	f8d8 3000 	ldr.w	r3, [r8]
 8005454:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005458:	3307      	adds	r3, #7
 800545a:	f023 0307 	bic.w	r3, r3, #7
 800545e:	f103 0208 	add.w	r2, r3, #8
 8005462:	f8c8 2000 	str.w	r2, [r8]
 8005466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800546e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005472:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005476:	9307      	str	r3, [sp, #28]
 8005478:	f8cd 8018 	str.w	r8, [sp, #24]
 800547c:	ee08 0a10 	vmov	s16, r0
 8005480:	4b9f      	ldr	r3, [pc, #636]	; (8005700 <_printf_float+0x2dc>)
 8005482:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005486:	f04f 32ff 	mov.w	r2, #4294967295
 800548a:	f7fb fb4f 	bl	8000b2c <__aeabi_dcmpun>
 800548e:	bb88      	cbnz	r0, 80054f4 <_printf_float+0xd0>
 8005490:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005494:	4b9a      	ldr	r3, [pc, #616]	; (8005700 <_printf_float+0x2dc>)
 8005496:	f04f 32ff 	mov.w	r2, #4294967295
 800549a:	f7fb fb29 	bl	8000af0 <__aeabi_dcmple>
 800549e:	bb48      	cbnz	r0, 80054f4 <_printf_float+0xd0>
 80054a0:	2200      	movs	r2, #0
 80054a2:	2300      	movs	r3, #0
 80054a4:	4640      	mov	r0, r8
 80054a6:	4649      	mov	r1, r9
 80054a8:	f7fb fb18 	bl	8000adc <__aeabi_dcmplt>
 80054ac:	b110      	cbz	r0, 80054b4 <_printf_float+0x90>
 80054ae:	232d      	movs	r3, #45	; 0x2d
 80054b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054b4:	4b93      	ldr	r3, [pc, #588]	; (8005704 <_printf_float+0x2e0>)
 80054b6:	4894      	ldr	r0, [pc, #592]	; (8005708 <_printf_float+0x2e4>)
 80054b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80054bc:	bf94      	ite	ls
 80054be:	4698      	movls	r8, r3
 80054c0:	4680      	movhi	r8, r0
 80054c2:	2303      	movs	r3, #3
 80054c4:	6123      	str	r3, [r4, #16]
 80054c6:	9b05      	ldr	r3, [sp, #20]
 80054c8:	f023 0204 	bic.w	r2, r3, #4
 80054cc:	6022      	str	r2, [r4, #0]
 80054ce:	f04f 0900 	mov.w	r9, #0
 80054d2:	9700      	str	r7, [sp, #0]
 80054d4:	4633      	mov	r3, r6
 80054d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80054d8:	4621      	mov	r1, r4
 80054da:	4628      	mov	r0, r5
 80054dc:	f000 f9d8 	bl	8005890 <_printf_common>
 80054e0:	3001      	adds	r0, #1
 80054e2:	f040 8090 	bne.w	8005606 <_printf_float+0x1e2>
 80054e6:	f04f 30ff 	mov.w	r0, #4294967295
 80054ea:	b00d      	add	sp, #52	; 0x34
 80054ec:	ecbd 8b02 	vpop	{d8}
 80054f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f4:	4642      	mov	r2, r8
 80054f6:	464b      	mov	r3, r9
 80054f8:	4640      	mov	r0, r8
 80054fa:	4649      	mov	r1, r9
 80054fc:	f7fb fb16 	bl	8000b2c <__aeabi_dcmpun>
 8005500:	b140      	cbz	r0, 8005514 <_printf_float+0xf0>
 8005502:	464b      	mov	r3, r9
 8005504:	2b00      	cmp	r3, #0
 8005506:	bfbc      	itt	lt
 8005508:	232d      	movlt	r3, #45	; 0x2d
 800550a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800550e:	487f      	ldr	r0, [pc, #508]	; (800570c <_printf_float+0x2e8>)
 8005510:	4b7f      	ldr	r3, [pc, #508]	; (8005710 <_printf_float+0x2ec>)
 8005512:	e7d1      	b.n	80054b8 <_printf_float+0x94>
 8005514:	6863      	ldr	r3, [r4, #4]
 8005516:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800551a:	9206      	str	r2, [sp, #24]
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	d13f      	bne.n	80055a0 <_printf_float+0x17c>
 8005520:	2306      	movs	r3, #6
 8005522:	6063      	str	r3, [r4, #4]
 8005524:	9b05      	ldr	r3, [sp, #20]
 8005526:	6861      	ldr	r1, [r4, #4]
 8005528:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800552c:	2300      	movs	r3, #0
 800552e:	9303      	str	r3, [sp, #12]
 8005530:	ab0a      	add	r3, sp, #40	; 0x28
 8005532:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005536:	ab09      	add	r3, sp, #36	; 0x24
 8005538:	ec49 8b10 	vmov	d0, r8, r9
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	6022      	str	r2, [r4, #0]
 8005540:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005544:	4628      	mov	r0, r5
 8005546:	f7ff fecd 	bl	80052e4 <__cvt>
 800554a:	9b06      	ldr	r3, [sp, #24]
 800554c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800554e:	2b47      	cmp	r3, #71	; 0x47
 8005550:	4680      	mov	r8, r0
 8005552:	d108      	bne.n	8005566 <_printf_float+0x142>
 8005554:	1cc8      	adds	r0, r1, #3
 8005556:	db02      	blt.n	800555e <_printf_float+0x13a>
 8005558:	6863      	ldr	r3, [r4, #4]
 800555a:	4299      	cmp	r1, r3
 800555c:	dd41      	ble.n	80055e2 <_printf_float+0x1be>
 800555e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005562:	fa5f fb8b 	uxtb.w	fp, fp
 8005566:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800556a:	d820      	bhi.n	80055ae <_printf_float+0x18a>
 800556c:	3901      	subs	r1, #1
 800556e:	465a      	mov	r2, fp
 8005570:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005574:	9109      	str	r1, [sp, #36]	; 0x24
 8005576:	f7ff ff17 	bl	80053a8 <__exponent>
 800557a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800557c:	1813      	adds	r3, r2, r0
 800557e:	2a01      	cmp	r2, #1
 8005580:	4681      	mov	r9, r0
 8005582:	6123      	str	r3, [r4, #16]
 8005584:	dc02      	bgt.n	800558c <_printf_float+0x168>
 8005586:	6822      	ldr	r2, [r4, #0]
 8005588:	07d2      	lsls	r2, r2, #31
 800558a:	d501      	bpl.n	8005590 <_printf_float+0x16c>
 800558c:	3301      	adds	r3, #1
 800558e:	6123      	str	r3, [r4, #16]
 8005590:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005594:	2b00      	cmp	r3, #0
 8005596:	d09c      	beq.n	80054d2 <_printf_float+0xae>
 8005598:	232d      	movs	r3, #45	; 0x2d
 800559a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800559e:	e798      	b.n	80054d2 <_printf_float+0xae>
 80055a0:	9a06      	ldr	r2, [sp, #24]
 80055a2:	2a47      	cmp	r2, #71	; 0x47
 80055a4:	d1be      	bne.n	8005524 <_printf_float+0x100>
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1bc      	bne.n	8005524 <_printf_float+0x100>
 80055aa:	2301      	movs	r3, #1
 80055ac:	e7b9      	b.n	8005522 <_printf_float+0xfe>
 80055ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80055b2:	d118      	bne.n	80055e6 <_printf_float+0x1c2>
 80055b4:	2900      	cmp	r1, #0
 80055b6:	6863      	ldr	r3, [r4, #4]
 80055b8:	dd0b      	ble.n	80055d2 <_printf_float+0x1ae>
 80055ba:	6121      	str	r1, [r4, #16]
 80055bc:	b913      	cbnz	r3, 80055c4 <_printf_float+0x1a0>
 80055be:	6822      	ldr	r2, [r4, #0]
 80055c0:	07d0      	lsls	r0, r2, #31
 80055c2:	d502      	bpl.n	80055ca <_printf_float+0x1a6>
 80055c4:	3301      	adds	r3, #1
 80055c6:	440b      	add	r3, r1
 80055c8:	6123      	str	r3, [r4, #16]
 80055ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80055cc:	f04f 0900 	mov.w	r9, #0
 80055d0:	e7de      	b.n	8005590 <_printf_float+0x16c>
 80055d2:	b913      	cbnz	r3, 80055da <_printf_float+0x1b6>
 80055d4:	6822      	ldr	r2, [r4, #0]
 80055d6:	07d2      	lsls	r2, r2, #31
 80055d8:	d501      	bpl.n	80055de <_printf_float+0x1ba>
 80055da:	3302      	adds	r3, #2
 80055dc:	e7f4      	b.n	80055c8 <_printf_float+0x1a4>
 80055de:	2301      	movs	r3, #1
 80055e0:	e7f2      	b.n	80055c8 <_printf_float+0x1a4>
 80055e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80055e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e8:	4299      	cmp	r1, r3
 80055ea:	db05      	blt.n	80055f8 <_printf_float+0x1d4>
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	6121      	str	r1, [r4, #16]
 80055f0:	07d8      	lsls	r0, r3, #31
 80055f2:	d5ea      	bpl.n	80055ca <_printf_float+0x1a6>
 80055f4:	1c4b      	adds	r3, r1, #1
 80055f6:	e7e7      	b.n	80055c8 <_printf_float+0x1a4>
 80055f8:	2900      	cmp	r1, #0
 80055fa:	bfd4      	ite	le
 80055fc:	f1c1 0202 	rsble	r2, r1, #2
 8005600:	2201      	movgt	r2, #1
 8005602:	4413      	add	r3, r2
 8005604:	e7e0      	b.n	80055c8 <_printf_float+0x1a4>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	055a      	lsls	r2, r3, #21
 800560a:	d407      	bmi.n	800561c <_printf_float+0x1f8>
 800560c:	6923      	ldr	r3, [r4, #16]
 800560e:	4642      	mov	r2, r8
 8005610:	4631      	mov	r1, r6
 8005612:	4628      	mov	r0, r5
 8005614:	47b8      	blx	r7
 8005616:	3001      	adds	r0, #1
 8005618:	d12c      	bne.n	8005674 <_printf_float+0x250>
 800561a:	e764      	b.n	80054e6 <_printf_float+0xc2>
 800561c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005620:	f240 80e0 	bls.w	80057e4 <_printf_float+0x3c0>
 8005624:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005628:	2200      	movs	r2, #0
 800562a:	2300      	movs	r3, #0
 800562c:	f7fb fa4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005630:	2800      	cmp	r0, #0
 8005632:	d034      	beq.n	800569e <_printf_float+0x27a>
 8005634:	4a37      	ldr	r2, [pc, #220]	; (8005714 <_printf_float+0x2f0>)
 8005636:	2301      	movs	r3, #1
 8005638:	4631      	mov	r1, r6
 800563a:	4628      	mov	r0, r5
 800563c:	47b8      	blx	r7
 800563e:	3001      	adds	r0, #1
 8005640:	f43f af51 	beq.w	80054e6 <_printf_float+0xc2>
 8005644:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005648:	429a      	cmp	r2, r3
 800564a:	db02      	blt.n	8005652 <_printf_float+0x22e>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	07d8      	lsls	r0, r3, #31
 8005650:	d510      	bpl.n	8005674 <_printf_float+0x250>
 8005652:	ee18 3a10 	vmov	r3, s16
 8005656:	4652      	mov	r2, sl
 8005658:	4631      	mov	r1, r6
 800565a:	4628      	mov	r0, r5
 800565c:	47b8      	blx	r7
 800565e:	3001      	adds	r0, #1
 8005660:	f43f af41 	beq.w	80054e6 <_printf_float+0xc2>
 8005664:	f04f 0800 	mov.w	r8, #0
 8005668:	f104 091a 	add.w	r9, r4, #26
 800566c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800566e:	3b01      	subs	r3, #1
 8005670:	4543      	cmp	r3, r8
 8005672:	dc09      	bgt.n	8005688 <_printf_float+0x264>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	079b      	lsls	r3, r3, #30
 8005678:	f100 8105 	bmi.w	8005886 <_printf_float+0x462>
 800567c:	68e0      	ldr	r0, [r4, #12]
 800567e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005680:	4298      	cmp	r0, r3
 8005682:	bfb8      	it	lt
 8005684:	4618      	movlt	r0, r3
 8005686:	e730      	b.n	80054ea <_printf_float+0xc6>
 8005688:	2301      	movs	r3, #1
 800568a:	464a      	mov	r2, r9
 800568c:	4631      	mov	r1, r6
 800568e:	4628      	mov	r0, r5
 8005690:	47b8      	blx	r7
 8005692:	3001      	adds	r0, #1
 8005694:	f43f af27 	beq.w	80054e6 <_printf_float+0xc2>
 8005698:	f108 0801 	add.w	r8, r8, #1
 800569c:	e7e6      	b.n	800566c <_printf_float+0x248>
 800569e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	dc39      	bgt.n	8005718 <_printf_float+0x2f4>
 80056a4:	4a1b      	ldr	r2, [pc, #108]	; (8005714 <_printf_float+0x2f0>)
 80056a6:	2301      	movs	r3, #1
 80056a8:	4631      	mov	r1, r6
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	f43f af19 	beq.w	80054e6 <_printf_float+0xc2>
 80056b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056b8:	4313      	orrs	r3, r2
 80056ba:	d102      	bne.n	80056c2 <_printf_float+0x29e>
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	07d9      	lsls	r1, r3, #31
 80056c0:	d5d8      	bpl.n	8005674 <_printf_float+0x250>
 80056c2:	ee18 3a10 	vmov	r3, s16
 80056c6:	4652      	mov	r2, sl
 80056c8:	4631      	mov	r1, r6
 80056ca:	4628      	mov	r0, r5
 80056cc:	47b8      	blx	r7
 80056ce:	3001      	adds	r0, #1
 80056d0:	f43f af09 	beq.w	80054e6 <_printf_float+0xc2>
 80056d4:	f04f 0900 	mov.w	r9, #0
 80056d8:	f104 0a1a 	add.w	sl, r4, #26
 80056dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056de:	425b      	negs	r3, r3
 80056e0:	454b      	cmp	r3, r9
 80056e2:	dc01      	bgt.n	80056e8 <_printf_float+0x2c4>
 80056e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056e6:	e792      	b.n	800560e <_printf_float+0x1ea>
 80056e8:	2301      	movs	r3, #1
 80056ea:	4652      	mov	r2, sl
 80056ec:	4631      	mov	r1, r6
 80056ee:	4628      	mov	r0, r5
 80056f0:	47b8      	blx	r7
 80056f2:	3001      	adds	r0, #1
 80056f4:	f43f aef7 	beq.w	80054e6 <_printf_float+0xc2>
 80056f8:	f109 0901 	add.w	r9, r9, #1
 80056fc:	e7ee      	b.n	80056dc <_printf_float+0x2b8>
 80056fe:	bf00      	nop
 8005700:	7fefffff 	.word	0x7fefffff
 8005704:	080080b0 	.word	0x080080b0
 8005708:	080080b4 	.word	0x080080b4
 800570c:	080080bc 	.word	0x080080bc
 8005710:	080080b8 	.word	0x080080b8
 8005714:	080080c0 	.word	0x080080c0
 8005718:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800571a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800571c:	429a      	cmp	r2, r3
 800571e:	bfa8      	it	ge
 8005720:	461a      	movge	r2, r3
 8005722:	2a00      	cmp	r2, #0
 8005724:	4691      	mov	r9, r2
 8005726:	dc37      	bgt.n	8005798 <_printf_float+0x374>
 8005728:	f04f 0b00 	mov.w	fp, #0
 800572c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005730:	f104 021a 	add.w	r2, r4, #26
 8005734:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005736:	9305      	str	r3, [sp, #20]
 8005738:	eba3 0309 	sub.w	r3, r3, r9
 800573c:	455b      	cmp	r3, fp
 800573e:	dc33      	bgt.n	80057a8 <_printf_float+0x384>
 8005740:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005744:	429a      	cmp	r2, r3
 8005746:	db3b      	blt.n	80057c0 <_printf_float+0x39c>
 8005748:	6823      	ldr	r3, [r4, #0]
 800574a:	07da      	lsls	r2, r3, #31
 800574c:	d438      	bmi.n	80057c0 <_printf_float+0x39c>
 800574e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005750:	9b05      	ldr	r3, [sp, #20]
 8005752:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	eba2 0901 	sub.w	r9, r2, r1
 800575a:	4599      	cmp	r9, r3
 800575c:	bfa8      	it	ge
 800575e:	4699      	movge	r9, r3
 8005760:	f1b9 0f00 	cmp.w	r9, #0
 8005764:	dc35      	bgt.n	80057d2 <_printf_float+0x3ae>
 8005766:	f04f 0800 	mov.w	r8, #0
 800576a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800576e:	f104 0a1a 	add.w	sl, r4, #26
 8005772:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005776:	1a9b      	subs	r3, r3, r2
 8005778:	eba3 0309 	sub.w	r3, r3, r9
 800577c:	4543      	cmp	r3, r8
 800577e:	f77f af79 	ble.w	8005674 <_printf_float+0x250>
 8005782:	2301      	movs	r3, #1
 8005784:	4652      	mov	r2, sl
 8005786:	4631      	mov	r1, r6
 8005788:	4628      	mov	r0, r5
 800578a:	47b8      	blx	r7
 800578c:	3001      	adds	r0, #1
 800578e:	f43f aeaa 	beq.w	80054e6 <_printf_float+0xc2>
 8005792:	f108 0801 	add.w	r8, r8, #1
 8005796:	e7ec      	b.n	8005772 <_printf_float+0x34e>
 8005798:	4613      	mov	r3, r2
 800579a:	4631      	mov	r1, r6
 800579c:	4642      	mov	r2, r8
 800579e:	4628      	mov	r0, r5
 80057a0:	47b8      	blx	r7
 80057a2:	3001      	adds	r0, #1
 80057a4:	d1c0      	bne.n	8005728 <_printf_float+0x304>
 80057a6:	e69e      	b.n	80054e6 <_printf_float+0xc2>
 80057a8:	2301      	movs	r3, #1
 80057aa:	4631      	mov	r1, r6
 80057ac:	4628      	mov	r0, r5
 80057ae:	9205      	str	r2, [sp, #20]
 80057b0:	47b8      	blx	r7
 80057b2:	3001      	adds	r0, #1
 80057b4:	f43f ae97 	beq.w	80054e6 <_printf_float+0xc2>
 80057b8:	9a05      	ldr	r2, [sp, #20]
 80057ba:	f10b 0b01 	add.w	fp, fp, #1
 80057be:	e7b9      	b.n	8005734 <_printf_float+0x310>
 80057c0:	ee18 3a10 	vmov	r3, s16
 80057c4:	4652      	mov	r2, sl
 80057c6:	4631      	mov	r1, r6
 80057c8:	4628      	mov	r0, r5
 80057ca:	47b8      	blx	r7
 80057cc:	3001      	adds	r0, #1
 80057ce:	d1be      	bne.n	800574e <_printf_float+0x32a>
 80057d0:	e689      	b.n	80054e6 <_printf_float+0xc2>
 80057d2:	9a05      	ldr	r2, [sp, #20]
 80057d4:	464b      	mov	r3, r9
 80057d6:	4442      	add	r2, r8
 80057d8:	4631      	mov	r1, r6
 80057da:	4628      	mov	r0, r5
 80057dc:	47b8      	blx	r7
 80057de:	3001      	adds	r0, #1
 80057e0:	d1c1      	bne.n	8005766 <_printf_float+0x342>
 80057e2:	e680      	b.n	80054e6 <_printf_float+0xc2>
 80057e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057e6:	2a01      	cmp	r2, #1
 80057e8:	dc01      	bgt.n	80057ee <_printf_float+0x3ca>
 80057ea:	07db      	lsls	r3, r3, #31
 80057ec:	d538      	bpl.n	8005860 <_printf_float+0x43c>
 80057ee:	2301      	movs	r3, #1
 80057f0:	4642      	mov	r2, r8
 80057f2:	4631      	mov	r1, r6
 80057f4:	4628      	mov	r0, r5
 80057f6:	47b8      	blx	r7
 80057f8:	3001      	adds	r0, #1
 80057fa:	f43f ae74 	beq.w	80054e6 <_printf_float+0xc2>
 80057fe:	ee18 3a10 	vmov	r3, s16
 8005802:	4652      	mov	r2, sl
 8005804:	4631      	mov	r1, r6
 8005806:	4628      	mov	r0, r5
 8005808:	47b8      	blx	r7
 800580a:	3001      	adds	r0, #1
 800580c:	f43f ae6b 	beq.w	80054e6 <_printf_float+0xc2>
 8005810:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005814:	2200      	movs	r2, #0
 8005816:	2300      	movs	r3, #0
 8005818:	f7fb f956 	bl	8000ac8 <__aeabi_dcmpeq>
 800581c:	b9d8      	cbnz	r0, 8005856 <_printf_float+0x432>
 800581e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005820:	f108 0201 	add.w	r2, r8, #1
 8005824:	3b01      	subs	r3, #1
 8005826:	4631      	mov	r1, r6
 8005828:	4628      	mov	r0, r5
 800582a:	47b8      	blx	r7
 800582c:	3001      	adds	r0, #1
 800582e:	d10e      	bne.n	800584e <_printf_float+0x42a>
 8005830:	e659      	b.n	80054e6 <_printf_float+0xc2>
 8005832:	2301      	movs	r3, #1
 8005834:	4652      	mov	r2, sl
 8005836:	4631      	mov	r1, r6
 8005838:	4628      	mov	r0, r5
 800583a:	47b8      	blx	r7
 800583c:	3001      	adds	r0, #1
 800583e:	f43f ae52 	beq.w	80054e6 <_printf_float+0xc2>
 8005842:	f108 0801 	add.w	r8, r8, #1
 8005846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005848:	3b01      	subs	r3, #1
 800584a:	4543      	cmp	r3, r8
 800584c:	dcf1      	bgt.n	8005832 <_printf_float+0x40e>
 800584e:	464b      	mov	r3, r9
 8005850:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005854:	e6dc      	b.n	8005610 <_printf_float+0x1ec>
 8005856:	f04f 0800 	mov.w	r8, #0
 800585a:	f104 0a1a 	add.w	sl, r4, #26
 800585e:	e7f2      	b.n	8005846 <_printf_float+0x422>
 8005860:	2301      	movs	r3, #1
 8005862:	4642      	mov	r2, r8
 8005864:	e7df      	b.n	8005826 <_printf_float+0x402>
 8005866:	2301      	movs	r3, #1
 8005868:	464a      	mov	r2, r9
 800586a:	4631      	mov	r1, r6
 800586c:	4628      	mov	r0, r5
 800586e:	47b8      	blx	r7
 8005870:	3001      	adds	r0, #1
 8005872:	f43f ae38 	beq.w	80054e6 <_printf_float+0xc2>
 8005876:	f108 0801 	add.w	r8, r8, #1
 800587a:	68e3      	ldr	r3, [r4, #12]
 800587c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800587e:	1a5b      	subs	r3, r3, r1
 8005880:	4543      	cmp	r3, r8
 8005882:	dcf0      	bgt.n	8005866 <_printf_float+0x442>
 8005884:	e6fa      	b.n	800567c <_printf_float+0x258>
 8005886:	f04f 0800 	mov.w	r8, #0
 800588a:	f104 0919 	add.w	r9, r4, #25
 800588e:	e7f4      	b.n	800587a <_printf_float+0x456>

08005890 <_printf_common>:
 8005890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005894:	4616      	mov	r6, r2
 8005896:	4699      	mov	r9, r3
 8005898:	688a      	ldr	r2, [r1, #8]
 800589a:	690b      	ldr	r3, [r1, #16]
 800589c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80058a0:	4293      	cmp	r3, r2
 80058a2:	bfb8      	it	lt
 80058a4:	4613      	movlt	r3, r2
 80058a6:	6033      	str	r3, [r6, #0]
 80058a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80058ac:	4607      	mov	r7, r0
 80058ae:	460c      	mov	r4, r1
 80058b0:	b10a      	cbz	r2, 80058b6 <_printf_common+0x26>
 80058b2:	3301      	adds	r3, #1
 80058b4:	6033      	str	r3, [r6, #0]
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	0699      	lsls	r1, r3, #26
 80058ba:	bf42      	ittt	mi
 80058bc:	6833      	ldrmi	r3, [r6, #0]
 80058be:	3302      	addmi	r3, #2
 80058c0:	6033      	strmi	r3, [r6, #0]
 80058c2:	6825      	ldr	r5, [r4, #0]
 80058c4:	f015 0506 	ands.w	r5, r5, #6
 80058c8:	d106      	bne.n	80058d8 <_printf_common+0x48>
 80058ca:	f104 0a19 	add.w	sl, r4, #25
 80058ce:	68e3      	ldr	r3, [r4, #12]
 80058d0:	6832      	ldr	r2, [r6, #0]
 80058d2:	1a9b      	subs	r3, r3, r2
 80058d4:	42ab      	cmp	r3, r5
 80058d6:	dc26      	bgt.n	8005926 <_printf_common+0x96>
 80058d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80058dc:	1e13      	subs	r3, r2, #0
 80058de:	6822      	ldr	r2, [r4, #0]
 80058e0:	bf18      	it	ne
 80058e2:	2301      	movne	r3, #1
 80058e4:	0692      	lsls	r2, r2, #26
 80058e6:	d42b      	bmi.n	8005940 <_printf_common+0xb0>
 80058e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80058ec:	4649      	mov	r1, r9
 80058ee:	4638      	mov	r0, r7
 80058f0:	47c0      	blx	r8
 80058f2:	3001      	adds	r0, #1
 80058f4:	d01e      	beq.n	8005934 <_printf_common+0xa4>
 80058f6:	6823      	ldr	r3, [r4, #0]
 80058f8:	68e5      	ldr	r5, [r4, #12]
 80058fa:	6832      	ldr	r2, [r6, #0]
 80058fc:	f003 0306 	and.w	r3, r3, #6
 8005900:	2b04      	cmp	r3, #4
 8005902:	bf08      	it	eq
 8005904:	1aad      	subeq	r5, r5, r2
 8005906:	68a3      	ldr	r3, [r4, #8]
 8005908:	6922      	ldr	r2, [r4, #16]
 800590a:	bf0c      	ite	eq
 800590c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005910:	2500      	movne	r5, #0
 8005912:	4293      	cmp	r3, r2
 8005914:	bfc4      	itt	gt
 8005916:	1a9b      	subgt	r3, r3, r2
 8005918:	18ed      	addgt	r5, r5, r3
 800591a:	2600      	movs	r6, #0
 800591c:	341a      	adds	r4, #26
 800591e:	42b5      	cmp	r5, r6
 8005920:	d11a      	bne.n	8005958 <_printf_common+0xc8>
 8005922:	2000      	movs	r0, #0
 8005924:	e008      	b.n	8005938 <_printf_common+0xa8>
 8005926:	2301      	movs	r3, #1
 8005928:	4652      	mov	r2, sl
 800592a:	4649      	mov	r1, r9
 800592c:	4638      	mov	r0, r7
 800592e:	47c0      	blx	r8
 8005930:	3001      	adds	r0, #1
 8005932:	d103      	bne.n	800593c <_printf_common+0xac>
 8005934:	f04f 30ff 	mov.w	r0, #4294967295
 8005938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800593c:	3501      	adds	r5, #1
 800593e:	e7c6      	b.n	80058ce <_printf_common+0x3e>
 8005940:	18e1      	adds	r1, r4, r3
 8005942:	1c5a      	adds	r2, r3, #1
 8005944:	2030      	movs	r0, #48	; 0x30
 8005946:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800594a:	4422      	add	r2, r4
 800594c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005950:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005954:	3302      	adds	r3, #2
 8005956:	e7c7      	b.n	80058e8 <_printf_common+0x58>
 8005958:	2301      	movs	r3, #1
 800595a:	4622      	mov	r2, r4
 800595c:	4649      	mov	r1, r9
 800595e:	4638      	mov	r0, r7
 8005960:	47c0      	blx	r8
 8005962:	3001      	adds	r0, #1
 8005964:	d0e6      	beq.n	8005934 <_printf_common+0xa4>
 8005966:	3601      	adds	r6, #1
 8005968:	e7d9      	b.n	800591e <_printf_common+0x8e>
	...

0800596c <_printf_i>:
 800596c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005970:	460c      	mov	r4, r1
 8005972:	4691      	mov	r9, r2
 8005974:	7e27      	ldrb	r7, [r4, #24]
 8005976:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005978:	2f78      	cmp	r7, #120	; 0x78
 800597a:	4680      	mov	r8, r0
 800597c:	469a      	mov	sl, r3
 800597e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005982:	d807      	bhi.n	8005994 <_printf_i+0x28>
 8005984:	2f62      	cmp	r7, #98	; 0x62
 8005986:	d80a      	bhi.n	800599e <_printf_i+0x32>
 8005988:	2f00      	cmp	r7, #0
 800598a:	f000 80d8 	beq.w	8005b3e <_printf_i+0x1d2>
 800598e:	2f58      	cmp	r7, #88	; 0x58
 8005990:	f000 80a3 	beq.w	8005ada <_printf_i+0x16e>
 8005994:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005998:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800599c:	e03a      	b.n	8005a14 <_printf_i+0xa8>
 800599e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80059a2:	2b15      	cmp	r3, #21
 80059a4:	d8f6      	bhi.n	8005994 <_printf_i+0x28>
 80059a6:	a001      	add	r0, pc, #4	; (adr r0, 80059ac <_printf_i+0x40>)
 80059a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80059ac:	08005a05 	.word	0x08005a05
 80059b0:	08005a19 	.word	0x08005a19
 80059b4:	08005995 	.word	0x08005995
 80059b8:	08005995 	.word	0x08005995
 80059bc:	08005995 	.word	0x08005995
 80059c0:	08005995 	.word	0x08005995
 80059c4:	08005a19 	.word	0x08005a19
 80059c8:	08005995 	.word	0x08005995
 80059cc:	08005995 	.word	0x08005995
 80059d0:	08005995 	.word	0x08005995
 80059d4:	08005995 	.word	0x08005995
 80059d8:	08005b25 	.word	0x08005b25
 80059dc:	08005a49 	.word	0x08005a49
 80059e0:	08005b07 	.word	0x08005b07
 80059e4:	08005995 	.word	0x08005995
 80059e8:	08005995 	.word	0x08005995
 80059ec:	08005b47 	.word	0x08005b47
 80059f0:	08005995 	.word	0x08005995
 80059f4:	08005a49 	.word	0x08005a49
 80059f8:	08005995 	.word	0x08005995
 80059fc:	08005995 	.word	0x08005995
 8005a00:	08005b0f 	.word	0x08005b0f
 8005a04:	680b      	ldr	r3, [r1, #0]
 8005a06:	1d1a      	adds	r2, r3, #4
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	600a      	str	r2, [r1, #0]
 8005a0c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005a14:	2301      	movs	r3, #1
 8005a16:	e0a3      	b.n	8005b60 <_printf_i+0x1f4>
 8005a18:	6825      	ldr	r5, [r4, #0]
 8005a1a:	6808      	ldr	r0, [r1, #0]
 8005a1c:	062e      	lsls	r6, r5, #24
 8005a1e:	f100 0304 	add.w	r3, r0, #4
 8005a22:	d50a      	bpl.n	8005a3a <_printf_i+0xce>
 8005a24:	6805      	ldr	r5, [r0, #0]
 8005a26:	600b      	str	r3, [r1, #0]
 8005a28:	2d00      	cmp	r5, #0
 8005a2a:	da03      	bge.n	8005a34 <_printf_i+0xc8>
 8005a2c:	232d      	movs	r3, #45	; 0x2d
 8005a2e:	426d      	negs	r5, r5
 8005a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a34:	485e      	ldr	r0, [pc, #376]	; (8005bb0 <_printf_i+0x244>)
 8005a36:	230a      	movs	r3, #10
 8005a38:	e019      	b.n	8005a6e <_printf_i+0x102>
 8005a3a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005a3e:	6805      	ldr	r5, [r0, #0]
 8005a40:	600b      	str	r3, [r1, #0]
 8005a42:	bf18      	it	ne
 8005a44:	b22d      	sxthne	r5, r5
 8005a46:	e7ef      	b.n	8005a28 <_printf_i+0xbc>
 8005a48:	680b      	ldr	r3, [r1, #0]
 8005a4a:	6825      	ldr	r5, [r4, #0]
 8005a4c:	1d18      	adds	r0, r3, #4
 8005a4e:	6008      	str	r0, [r1, #0]
 8005a50:	0628      	lsls	r0, r5, #24
 8005a52:	d501      	bpl.n	8005a58 <_printf_i+0xec>
 8005a54:	681d      	ldr	r5, [r3, #0]
 8005a56:	e002      	b.n	8005a5e <_printf_i+0xf2>
 8005a58:	0669      	lsls	r1, r5, #25
 8005a5a:	d5fb      	bpl.n	8005a54 <_printf_i+0xe8>
 8005a5c:	881d      	ldrh	r5, [r3, #0]
 8005a5e:	4854      	ldr	r0, [pc, #336]	; (8005bb0 <_printf_i+0x244>)
 8005a60:	2f6f      	cmp	r7, #111	; 0x6f
 8005a62:	bf0c      	ite	eq
 8005a64:	2308      	moveq	r3, #8
 8005a66:	230a      	movne	r3, #10
 8005a68:	2100      	movs	r1, #0
 8005a6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005a6e:	6866      	ldr	r6, [r4, #4]
 8005a70:	60a6      	str	r6, [r4, #8]
 8005a72:	2e00      	cmp	r6, #0
 8005a74:	bfa2      	ittt	ge
 8005a76:	6821      	ldrge	r1, [r4, #0]
 8005a78:	f021 0104 	bicge.w	r1, r1, #4
 8005a7c:	6021      	strge	r1, [r4, #0]
 8005a7e:	b90d      	cbnz	r5, 8005a84 <_printf_i+0x118>
 8005a80:	2e00      	cmp	r6, #0
 8005a82:	d04d      	beq.n	8005b20 <_printf_i+0x1b4>
 8005a84:	4616      	mov	r6, r2
 8005a86:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a8a:	fb03 5711 	mls	r7, r3, r1, r5
 8005a8e:	5dc7      	ldrb	r7, [r0, r7]
 8005a90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a94:	462f      	mov	r7, r5
 8005a96:	42bb      	cmp	r3, r7
 8005a98:	460d      	mov	r5, r1
 8005a9a:	d9f4      	bls.n	8005a86 <_printf_i+0x11a>
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d10b      	bne.n	8005ab8 <_printf_i+0x14c>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	07df      	lsls	r7, r3, #31
 8005aa4:	d508      	bpl.n	8005ab8 <_printf_i+0x14c>
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	6861      	ldr	r1, [r4, #4]
 8005aaa:	4299      	cmp	r1, r3
 8005aac:	bfde      	ittt	le
 8005aae:	2330      	movle	r3, #48	; 0x30
 8005ab0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ab4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ab8:	1b92      	subs	r2, r2, r6
 8005aba:	6122      	str	r2, [r4, #16]
 8005abc:	f8cd a000 	str.w	sl, [sp]
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	aa03      	add	r2, sp, #12
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	f7ff fee2 	bl	8005890 <_printf_common>
 8005acc:	3001      	adds	r0, #1
 8005ace:	d14c      	bne.n	8005b6a <_printf_i+0x1fe>
 8005ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad4:	b004      	add	sp, #16
 8005ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ada:	4835      	ldr	r0, [pc, #212]	; (8005bb0 <_printf_i+0x244>)
 8005adc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005ae0:	6823      	ldr	r3, [r4, #0]
 8005ae2:	680e      	ldr	r6, [r1, #0]
 8005ae4:	061f      	lsls	r7, r3, #24
 8005ae6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005aea:	600e      	str	r6, [r1, #0]
 8005aec:	d514      	bpl.n	8005b18 <_printf_i+0x1ac>
 8005aee:	07d9      	lsls	r1, r3, #31
 8005af0:	bf44      	itt	mi
 8005af2:	f043 0320 	orrmi.w	r3, r3, #32
 8005af6:	6023      	strmi	r3, [r4, #0]
 8005af8:	b91d      	cbnz	r5, 8005b02 <_printf_i+0x196>
 8005afa:	6823      	ldr	r3, [r4, #0]
 8005afc:	f023 0320 	bic.w	r3, r3, #32
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	2310      	movs	r3, #16
 8005b04:	e7b0      	b.n	8005a68 <_printf_i+0xfc>
 8005b06:	6823      	ldr	r3, [r4, #0]
 8005b08:	f043 0320 	orr.w	r3, r3, #32
 8005b0c:	6023      	str	r3, [r4, #0]
 8005b0e:	2378      	movs	r3, #120	; 0x78
 8005b10:	4828      	ldr	r0, [pc, #160]	; (8005bb4 <_printf_i+0x248>)
 8005b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005b16:	e7e3      	b.n	8005ae0 <_printf_i+0x174>
 8005b18:	065e      	lsls	r6, r3, #25
 8005b1a:	bf48      	it	mi
 8005b1c:	b2ad      	uxthmi	r5, r5
 8005b1e:	e7e6      	b.n	8005aee <_printf_i+0x182>
 8005b20:	4616      	mov	r6, r2
 8005b22:	e7bb      	b.n	8005a9c <_printf_i+0x130>
 8005b24:	680b      	ldr	r3, [r1, #0]
 8005b26:	6826      	ldr	r6, [r4, #0]
 8005b28:	6960      	ldr	r0, [r4, #20]
 8005b2a:	1d1d      	adds	r5, r3, #4
 8005b2c:	600d      	str	r5, [r1, #0]
 8005b2e:	0635      	lsls	r5, r6, #24
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	d501      	bpl.n	8005b38 <_printf_i+0x1cc>
 8005b34:	6018      	str	r0, [r3, #0]
 8005b36:	e002      	b.n	8005b3e <_printf_i+0x1d2>
 8005b38:	0671      	lsls	r1, r6, #25
 8005b3a:	d5fb      	bpl.n	8005b34 <_printf_i+0x1c8>
 8005b3c:	8018      	strh	r0, [r3, #0]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6123      	str	r3, [r4, #16]
 8005b42:	4616      	mov	r6, r2
 8005b44:	e7ba      	b.n	8005abc <_printf_i+0x150>
 8005b46:	680b      	ldr	r3, [r1, #0]
 8005b48:	1d1a      	adds	r2, r3, #4
 8005b4a:	600a      	str	r2, [r1, #0]
 8005b4c:	681e      	ldr	r6, [r3, #0]
 8005b4e:	6862      	ldr	r2, [r4, #4]
 8005b50:	2100      	movs	r1, #0
 8005b52:	4630      	mov	r0, r6
 8005b54:	f7fa fb44 	bl	80001e0 <memchr>
 8005b58:	b108      	cbz	r0, 8005b5e <_printf_i+0x1f2>
 8005b5a:	1b80      	subs	r0, r0, r6
 8005b5c:	6060      	str	r0, [r4, #4]
 8005b5e:	6863      	ldr	r3, [r4, #4]
 8005b60:	6123      	str	r3, [r4, #16]
 8005b62:	2300      	movs	r3, #0
 8005b64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b68:	e7a8      	b.n	8005abc <_printf_i+0x150>
 8005b6a:	6923      	ldr	r3, [r4, #16]
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	4649      	mov	r1, r9
 8005b70:	4640      	mov	r0, r8
 8005b72:	47d0      	blx	sl
 8005b74:	3001      	adds	r0, #1
 8005b76:	d0ab      	beq.n	8005ad0 <_printf_i+0x164>
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	079b      	lsls	r3, r3, #30
 8005b7c:	d413      	bmi.n	8005ba6 <_printf_i+0x23a>
 8005b7e:	68e0      	ldr	r0, [r4, #12]
 8005b80:	9b03      	ldr	r3, [sp, #12]
 8005b82:	4298      	cmp	r0, r3
 8005b84:	bfb8      	it	lt
 8005b86:	4618      	movlt	r0, r3
 8005b88:	e7a4      	b.n	8005ad4 <_printf_i+0x168>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	4632      	mov	r2, r6
 8005b8e:	4649      	mov	r1, r9
 8005b90:	4640      	mov	r0, r8
 8005b92:	47d0      	blx	sl
 8005b94:	3001      	adds	r0, #1
 8005b96:	d09b      	beq.n	8005ad0 <_printf_i+0x164>
 8005b98:	3501      	adds	r5, #1
 8005b9a:	68e3      	ldr	r3, [r4, #12]
 8005b9c:	9903      	ldr	r1, [sp, #12]
 8005b9e:	1a5b      	subs	r3, r3, r1
 8005ba0:	42ab      	cmp	r3, r5
 8005ba2:	dcf2      	bgt.n	8005b8a <_printf_i+0x21e>
 8005ba4:	e7eb      	b.n	8005b7e <_printf_i+0x212>
 8005ba6:	2500      	movs	r5, #0
 8005ba8:	f104 0619 	add.w	r6, r4, #25
 8005bac:	e7f5      	b.n	8005b9a <_printf_i+0x22e>
 8005bae:	bf00      	nop
 8005bb0:	080080c2 	.word	0x080080c2
 8005bb4:	080080d3 	.word	0x080080d3

08005bb8 <siprintf>:
 8005bb8:	b40e      	push	{r1, r2, r3}
 8005bba:	b500      	push	{lr}
 8005bbc:	b09c      	sub	sp, #112	; 0x70
 8005bbe:	ab1d      	add	r3, sp, #116	; 0x74
 8005bc0:	9002      	str	r0, [sp, #8]
 8005bc2:	9006      	str	r0, [sp, #24]
 8005bc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bc8:	4809      	ldr	r0, [pc, #36]	; (8005bf0 <siprintf+0x38>)
 8005bca:	9107      	str	r1, [sp, #28]
 8005bcc:	9104      	str	r1, [sp, #16]
 8005bce:	4909      	ldr	r1, [pc, #36]	; (8005bf4 <siprintf+0x3c>)
 8005bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bd4:	9105      	str	r1, [sp, #20]
 8005bd6:	6800      	ldr	r0, [r0, #0]
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	a902      	add	r1, sp, #8
 8005bdc:	f001 fb32 	bl	8007244 <_svfiprintf_r>
 8005be0:	9b02      	ldr	r3, [sp, #8]
 8005be2:	2200      	movs	r2, #0
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	b01c      	add	sp, #112	; 0x70
 8005be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bec:	b003      	add	sp, #12
 8005bee:	4770      	bx	lr
 8005bf0:	2000000c 	.word	0x2000000c
 8005bf4:	ffff0208 	.word	0xffff0208

08005bf8 <quorem>:
 8005bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	6903      	ldr	r3, [r0, #16]
 8005bfe:	690c      	ldr	r4, [r1, #16]
 8005c00:	42a3      	cmp	r3, r4
 8005c02:	4607      	mov	r7, r0
 8005c04:	f2c0 8081 	blt.w	8005d0a <quorem+0x112>
 8005c08:	3c01      	subs	r4, #1
 8005c0a:	f101 0814 	add.w	r8, r1, #20
 8005c0e:	f100 0514 	add.w	r5, r0, #20
 8005c12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c16:	9301      	str	r3, [sp, #4]
 8005c18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c20:	3301      	adds	r3, #1
 8005c22:	429a      	cmp	r2, r3
 8005c24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c30:	d331      	bcc.n	8005c96 <quorem+0x9e>
 8005c32:	f04f 0e00 	mov.w	lr, #0
 8005c36:	4640      	mov	r0, r8
 8005c38:	46ac      	mov	ip, r5
 8005c3a:	46f2      	mov	sl, lr
 8005c3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c40:	b293      	uxth	r3, r2
 8005c42:	fb06 e303 	mla	r3, r6, r3, lr
 8005c46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	ebaa 0303 	sub.w	r3, sl, r3
 8005c50:	0c12      	lsrs	r2, r2, #16
 8005c52:	f8dc a000 	ldr.w	sl, [ip]
 8005c56:	fb06 e202 	mla	r2, r6, r2, lr
 8005c5a:	fa13 f38a 	uxtah	r3, r3, sl
 8005c5e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c62:	fa1f fa82 	uxth.w	sl, r2
 8005c66:	f8dc 2000 	ldr.w	r2, [ip]
 8005c6a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005c6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c78:	4581      	cmp	r9, r0
 8005c7a:	f84c 3b04 	str.w	r3, [ip], #4
 8005c7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005c82:	d2db      	bcs.n	8005c3c <quorem+0x44>
 8005c84:	f855 300b 	ldr.w	r3, [r5, fp]
 8005c88:	b92b      	cbnz	r3, 8005c96 <quorem+0x9e>
 8005c8a:	9b01      	ldr	r3, [sp, #4]
 8005c8c:	3b04      	subs	r3, #4
 8005c8e:	429d      	cmp	r5, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	d32e      	bcc.n	8005cf2 <quorem+0xfa>
 8005c94:	613c      	str	r4, [r7, #16]
 8005c96:	4638      	mov	r0, r7
 8005c98:	f001 f8be 	bl	8006e18 <__mcmp>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	db24      	blt.n	8005cea <quorem+0xf2>
 8005ca0:	3601      	adds	r6, #1
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	f04f 0c00 	mov.w	ip, #0
 8005ca8:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cac:	f8d0 e000 	ldr.w	lr, [r0]
 8005cb0:	b293      	uxth	r3, r2
 8005cb2:	ebac 0303 	sub.w	r3, ip, r3
 8005cb6:	0c12      	lsrs	r2, r2, #16
 8005cb8:	fa13 f38e 	uxtah	r3, r3, lr
 8005cbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005cc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cca:	45c1      	cmp	r9, r8
 8005ccc:	f840 3b04 	str.w	r3, [r0], #4
 8005cd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005cd4:	d2e8      	bcs.n	8005ca8 <quorem+0xb0>
 8005cd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cde:	b922      	cbnz	r2, 8005cea <quorem+0xf2>
 8005ce0:	3b04      	subs	r3, #4
 8005ce2:	429d      	cmp	r5, r3
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	d30a      	bcc.n	8005cfe <quorem+0x106>
 8005ce8:	613c      	str	r4, [r7, #16]
 8005cea:	4630      	mov	r0, r6
 8005cec:	b003      	add	sp, #12
 8005cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf2:	6812      	ldr	r2, [r2, #0]
 8005cf4:	3b04      	subs	r3, #4
 8005cf6:	2a00      	cmp	r2, #0
 8005cf8:	d1cc      	bne.n	8005c94 <quorem+0x9c>
 8005cfa:	3c01      	subs	r4, #1
 8005cfc:	e7c7      	b.n	8005c8e <quorem+0x96>
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	3b04      	subs	r3, #4
 8005d02:	2a00      	cmp	r2, #0
 8005d04:	d1f0      	bne.n	8005ce8 <quorem+0xf0>
 8005d06:	3c01      	subs	r4, #1
 8005d08:	e7eb      	b.n	8005ce2 <quorem+0xea>
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	e7ee      	b.n	8005cec <quorem+0xf4>
	...

08005d10 <_dtoa_r>:
 8005d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d14:	ed2d 8b02 	vpush	{d8}
 8005d18:	ec57 6b10 	vmov	r6, r7, d0
 8005d1c:	b095      	sub	sp, #84	; 0x54
 8005d1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005d20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005d24:	9105      	str	r1, [sp, #20]
 8005d26:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d30:	b975      	cbnz	r5, 8005d50 <_dtoa_r+0x40>
 8005d32:	2010      	movs	r0, #16
 8005d34:	f000 fddc 	bl	80068f0 <malloc>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	6260      	str	r0, [r4, #36]	; 0x24
 8005d3c:	b920      	cbnz	r0, 8005d48 <_dtoa_r+0x38>
 8005d3e:	4bb2      	ldr	r3, [pc, #712]	; (8006008 <_dtoa_r+0x2f8>)
 8005d40:	21ea      	movs	r1, #234	; 0xea
 8005d42:	48b2      	ldr	r0, [pc, #712]	; (800600c <_dtoa_r+0x2fc>)
 8005d44:	f001 fb8e 	bl	8007464 <__assert_func>
 8005d48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005d4c:	6005      	str	r5, [r0, #0]
 8005d4e:	60c5      	str	r5, [r0, #12]
 8005d50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d52:	6819      	ldr	r1, [r3, #0]
 8005d54:	b151      	cbz	r1, 8005d6c <_dtoa_r+0x5c>
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	604a      	str	r2, [r1, #4]
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	4093      	lsls	r3, r2
 8005d5e:	608b      	str	r3, [r1, #8]
 8005d60:	4620      	mov	r0, r4
 8005d62:	f000 fe1b 	bl	800699c <_Bfree>
 8005d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	1e3b      	subs	r3, r7, #0
 8005d6e:	bfb9      	ittee	lt
 8005d70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005d74:	9303      	strlt	r3, [sp, #12]
 8005d76:	2300      	movge	r3, #0
 8005d78:	f8c8 3000 	strge.w	r3, [r8]
 8005d7c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005d80:	4ba3      	ldr	r3, [pc, #652]	; (8006010 <_dtoa_r+0x300>)
 8005d82:	bfbc      	itt	lt
 8005d84:	2201      	movlt	r2, #1
 8005d86:	f8c8 2000 	strlt.w	r2, [r8]
 8005d8a:	ea33 0309 	bics.w	r3, r3, r9
 8005d8e:	d11b      	bne.n	8005dc8 <_dtoa_r+0xb8>
 8005d90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005d92:	f242 730f 	movw	r3, #9999	; 0x270f
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005d9c:	4333      	orrs	r3, r6
 8005d9e:	f000 857a 	beq.w	8006896 <_dtoa_r+0xb86>
 8005da2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005da4:	b963      	cbnz	r3, 8005dc0 <_dtoa_r+0xb0>
 8005da6:	4b9b      	ldr	r3, [pc, #620]	; (8006014 <_dtoa_r+0x304>)
 8005da8:	e024      	b.n	8005df4 <_dtoa_r+0xe4>
 8005daa:	4b9b      	ldr	r3, [pc, #620]	; (8006018 <_dtoa_r+0x308>)
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	3308      	adds	r3, #8
 8005db0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005db2:	6013      	str	r3, [r2, #0]
 8005db4:	9800      	ldr	r0, [sp, #0]
 8005db6:	b015      	add	sp, #84	; 0x54
 8005db8:	ecbd 8b02 	vpop	{d8}
 8005dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dc0:	4b94      	ldr	r3, [pc, #592]	; (8006014 <_dtoa_r+0x304>)
 8005dc2:	9300      	str	r3, [sp, #0]
 8005dc4:	3303      	adds	r3, #3
 8005dc6:	e7f3      	b.n	8005db0 <_dtoa_r+0xa0>
 8005dc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	ec51 0b17 	vmov	r0, r1, d7
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005dd8:	f7fa fe76 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ddc:	4680      	mov	r8, r0
 8005dde:	b158      	cbz	r0, 8005df8 <_dtoa_r+0xe8>
 8005de0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005de2:	2301      	movs	r3, #1
 8005de4:	6013      	str	r3, [r2, #0]
 8005de6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	f000 8551 	beq.w	8006890 <_dtoa_r+0xb80>
 8005dee:	488b      	ldr	r0, [pc, #556]	; (800601c <_dtoa_r+0x30c>)
 8005df0:	6018      	str	r0, [r3, #0]
 8005df2:	1e43      	subs	r3, r0, #1
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	e7dd      	b.n	8005db4 <_dtoa_r+0xa4>
 8005df8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8005dfc:	aa12      	add	r2, sp, #72	; 0x48
 8005dfe:	a913      	add	r1, sp, #76	; 0x4c
 8005e00:	4620      	mov	r0, r4
 8005e02:	f001 f8ad 	bl	8006f60 <__d2b>
 8005e06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005e0a:	4683      	mov	fp, r0
 8005e0c:	2d00      	cmp	r5, #0
 8005e0e:	d07c      	beq.n	8005f0a <_dtoa_r+0x1fa>
 8005e10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e12:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8005e16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e1a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8005e1e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005e22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005e26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005e2a:	4b7d      	ldr	r3, [pc, #500]	; (8006020 <_dtoa_r+0x310>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	4630      	mov	r0, r6
 8005e30:	4639      	mov	r1, r7
 8005e32:	f7fa fa29 	bl	8000288 <__aeabi_dsub>
 8005e36:	a36e      	add	r3, pc, #440	; (adr r3, 8005ff0 <_dtoa_r+0x2e0>)
 8005e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3c:	f7fa fbdc 	bl	80005f8 <__aeabi_dmul>
 8005e40:	a36d      	add	r3, pc, #436	; (adr r3, 8005ff8 <_dtoa_r+0x2e8>)
 8005e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e46:	f7fa fa21 	bl	800028c <__adddf3>
 8005e4a:	4606      	mov	r6, r0
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	460f      	mov	r7, r1
 8005e50:	f7fa fb68 	bl	8000524 <__aeabi_i2d>
 8005e54:	a36a      	add	r3, pc, #424	; (adr r3, 8006000 <_dtoa_r+0x2f0>)
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	f7fa fbcd 	bl	80005f8 <__aeabi_dmul>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4630      	mov	r0, r6
 8005e64:	4639      	mov	r1, r7
 8005e66:	f7fa fa11 	bl	800028c <__adddf3>
 8005e6a:	4606      	mov	r6, r0
 8005e6c:	460f      	mov	r7, r1
 8005e6e:	f7fa fe73 	bl	8000b58 <__aeabi_d2iz>
 8005e72:	2200      	movs	r2, #0
 8005e74:	4682      	mov	sl, r0
 8005e76:	2300      	movs	r3, #0
 8005e78:	4630      	mov	r0, r6
 8005e7a:	4639      	mov	r1, r7
 8005e7c:	f7fa fe2e 	bl	8000adc <__aeabi_dcmplt>
 8005e80:	b148      	cbz	r0, 8005e96 <_dtoa_r+0x186>
 8005e82:	4650      	mov	r0, sl
 8005e84:	f7fa fb4e 	bl	8000524 <__aeabi_i2d>
 8005e88:	4632      	mov	r2, r6
 8005e8a:	463b      	mov	r3, r7
 8005e8c:	f7fa fe1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e90:	b908      	cbnz	r0, 8005e96 <_dtoa_r+0x186>
 8005e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e96:	f1ba 0f16 	cmp.w	sl, #22
 8005e9a:	d854      	bhi.n	8005f46 <_dtoa_r+0x236>
 8005e9c:	4b61      	ldr	r3, [pc, #388]	; (8006024 <_dtoa_r+0x314>)
 8005e9e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005eaa:	f7fa fe17 	bl	8000adc <__aeabi_dcmplt>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d04b      	beq.n	8005f4a <_dtoa_r+0x23a>
 8005eb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	930e      	str	r3, [sp, #56]	; 0x38
 8005eba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005ebc:	1b5d      	subs	r5, r3, r5
 8005ebe:	1e6b      	subs	r3, r5, #1
 8005ec0:	9304      	str	r3, [sp, #16]
 8005ec2:	bf43      	ittte	mi
 8005ec4:	2300      	movmi	r3, #0
 8005ec6:	f1c5 0801 	rsbmi	r8, r5, #1
 8005eca:	9304      	strmi	r3, [sp, #16]
 8005ecc:	f04f 0800 	movpl.w	r8, #0
 8005ed0:	f1ba 0f00 	cmp.w	sl, #0
 8005ed4:	db3b      	blt.n	8005f4e <_dtoa_r+0x23e>
 8005ed6:	9b04      	ldr	r3, [sp, #16]
 8005ed8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005edc:	4453      	add	r3, sl
 8005ede:	9304      	str	r3, [sp, #16]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	9306      	str	r3, [sp, #24]
 8005ee4:	9b05      	ldr	r3, [sp, #20]
 8005ee6:	2b09      	cmp	r3, #9
 8005ee8:	d869      	bhi.n	8005fbe <_dtoa_r+0x2ae>
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	bfc4      	itt	gt
 8005eee:	3b04      	subgt	r3, #4
 8005ef0:	9305      	strgt	r3, [sp, #20]
 8005ef2:	9b05      	ldr	r3, [sp, #20]
 8005ef4:	f1a3 0302 	sub.w	r3, r3, #2
 8005ef8:	bfcc      	ite	gt
 8005efa:	2500      	movgt	r5, #0
 8005efc:	2501      	movle	r5, #1
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	d869      	bhi.n	8005fd6 <_dtoa_r+0x2c6>
 8005f02:	e8df f003 	tbb	[pc, r3]
 8005f06:	4e2c      	.short	0x4e2c
 8005f08:	5a4c      	.short	0x5a4c
 8005f0a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005f0e:	441d      	add	r5, r3
 8005f10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	bfc1      	itttt	gt
 8005f18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f1c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005f20:	fa09 f303 	lslgt.w	r3, r9, r3
 8005f24:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f28:	bfda      	itte	le
 8005f2a:	f1c3 0320 	rsble	r3, r3, #32
 8005f2e:	fa06 f003 	lslle.w	r0, r6, r3
 8005f32:	4318      	orrgt	r0, r3
 8005f34:	f7fa fae6 	bl	8000504 <__aeabi_ui2d>
 8005f38:	2301      	movs	r3, #1
 8005f3a:	4606      	mov	r6, r0
 8005f3c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005f40:	3d01      	subs	r5, #1
 8005f42:	9310      	str	r3, [sp, #64]	; 0x40
 8005f44:	e771      	b.n	8005e2a <_dtoa_r+0x11a>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e7b6      	b.n	8005eb8 <_dtoa_r+0x1a8>
 8005f4a:	900e      	str	r0, [sp, #56]	; 0x38
 8005f4c:	e7b5      	b.n	8005eba <_dtoa_r+0x1aa>
 8005f4e:	f1ca 0300 	rsb	r3, sl, #0
 8005f52:	9306      	str	r3, [sp, #24]
 8005f54:	2300      	movs	r3, #0
 8005f56:	eba8 080a 	sub.w	r8, r8, sl
 8005f5a:	930d      	str	r3, [sp, #52]	; 0x34
 8005f5c:	e7c2      	b.n	8005ee4 <_dtoa_r+0x1d4>
 8005f5e:	2300      	movs	r3, #0
 8005f60:	9308      	str	r3, [sp, #32]
 8005f62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	dc39      	bgt.n	8005fdc <_dtoa_r+0x2cc>
 8005f68:	f04f 0901 	mov.w	r9, #1
 8005f6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005f70:	464b      	mov	r3, r9
 8005f72:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005f76:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005f78:	2200      	movs	r2, #0
 8005f7a:	6042      	str	r2, [r0, #4]
 8005f7c:	2204      	movs	r2, #4
 8005f7e:	f102 0614 	add.w	r6, r2, #20
 8005f82:	429e      	cmp	r6, r3
 8005f84:	6841      	ldr	r1, [r0, #4]
 8005f86:	d92f      	bls.n	8005fe8 <_dtoa_r+0x2d8>
 8005f88:	4620      	mov	r0, r4
 8005f8a:	f000 fcc7 	bl	800691c <_Balloc>
 8005f8e:	9000      	str	r0, [sp, #0]
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d14b      	bne.n	800602c <_dtoa_r+0x31c>
 8005f94:	4b24      	ldr	r3, [pc, #144]	; (8006028 <_dtoa_r+0x318>)
 8005f96:	4602      	mov	r2, r0
 8005f98:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005f9c:	e6d1      	b.n	8005d42 <_dtoa_r+0x32>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e7de      	b.n	8005f60 <_dtoa_r+0x250>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	9308      	str	r3, [sp, #32]
 8005fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa8:	eb0a 0903 	add.w	r9, sl, r3
 8005fac:	f109 0301 	add.w	r3, r9, #1
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	9301      	str	r3, [sp, #4]
 8005fb4:	bfb8      	it	lt
 8005fb6:	2301      	movlt	r3, #1
 8005fb8:	e7dd      	b.n	8005f76 <_dtoa_r+0x266>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e7f2      	b.n	8005fa4 <_dtoa_r+0x294>
 8005fbe:	2501      	movs	r5, #1
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	9305      	str	r3, [sp, #20]
 8005fc4:	9508      	str	r5, [sp, #32]
 8005fc6:	f04f 39ff 	mov.w	r9, #4294967295
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fd0:	2312      	movs	r3, #18
 8005fd2:	9209      	str	r2, [sp, #36]	; 0x24
 8005fd4:	e7cf      	b.n	8005f76 <_dtoa_r+0x266>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	9308      	str	r3, [sp, #32]
 8005fda:	e7f4      	b.n	8005fc6 <_dtoa_r+0x2b6>
 8005fdc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005fe0:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fe4:	464b      	mov	r3, r9
 8005fe6:	e7c6      	b.n	8005f76 <_dtoa_r+0x266>
 8005fe8:	3101      	adds	r1, #1
 8005fea:	6041      	str	r1, [r0, #4]
 8005fec:	0052      	lsls	r2, r2, #1
 8005fee:	e7c6      	b.n	8005f7e <_dtoa_r+0x26e>
 8005ff0:	636f4361 	.word	0x636f4361
 8005ff4:	3fd287a7 	.word	0x3fd287a7
 8005ff8:	8b60c8b3 	.word	0x8b60c8b3
 8005ffc:	3fc68a28 	.word	0x3fc68a28
 8006000:	509f79fb 	.word	0x509f79fb
 8006004:	3fd34413 	.word	0x3fd34413
 8006008:	080080f1 	.word	0x080080f1
 800600c:	08008108 	.word	0x08008108
 8006010:	7ff00000 	.word	0x7ff00000
 8006014:	080080ed 	.word	0x080080ed
 8006018:	080080e4 	.word	0x080080e4
 800601c:	080080c1 	.word	0x080080c1
 8006020:	3ff80000 	.word	0x3ff80000
 8006024:	08008200 	.word	0x08008200
 8006028:	08008167 	.word	0x08008167
 800602c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800602e:	9a00      	ldr	r2, [sp, #0]
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	9b01      	ldr	r3, [sp, #4]
 8006034:	2b0e      	cmp	r3, #14
 8006036:	f200 80ad 	bhi.w	8006194 <_dtoa_r+0x484>
 800603a:	2d00      	cmp	r5, #0
 800603c:	f000 80aa 	beq.w	8006194 <_dtoa_r+0x484>
 8006040:	f1ba 0f00 	cmp.w	sl, #0
 8006044:	dd36      	ble.n	80060b4 <_dtoa_r+0x3a4>
 8006046:	4ac3      	ldr	r2, [pc, #780]	; (8006354 <_dtoa_r+0x644>)
 8006048:	f00a 030f 	and.w	r3, sl, #15
 800604c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006050:	ed93 7b00 	vldr	d7, [r3]
 8006054:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006058:	ea4f 172a 	mov.w	r7, sl, asr #4
 800605c:	eeb0 8a47 	vmov.f32	s16, s14
 8006060:	eef0 8a67 	vmov.f32	s17, s15
 8006064:	d016      	beq.n	8006094 <_dtoa_r+0x384>
 8006066:	4bbc      	ldr	r3, [pc, #752]	; (8006358 <_dtoa_r+0x648>)
 8006068:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800606c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006070:	f7fa fbec 	bl	800084c <__aeabi_ddiv>
 8006074:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006078:	f007 070f 	and.w	r7, r7, #15
 800607c:	2503      	movs	r5, #3
 800607e:	4eb6      	ldr	r6, [pc, #728]	; (8006358 <_dtoa_r+0x648>)
 8006080:	b957      	cbnz	r7, 8006098 <_dtoa_r+0x388>
 8006082:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006086:	ec53 2b18 	vmov	r2, r3, d8
 800608a:	f7fa fbdf 	bl	800084c <__aeabi_ddiv>
 800608e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006092:	e029      	b.n	80060e8 <_dtoa_r+0x3d8>
 8006094:	2502      	movs	r5, #2
 8006096:	e7f2      	b.n	800607e <_dtoa_r+0x36e>
 8006098:	07f9      	lsls	r1, r7, #31
 800609a:	d508      	bpl.n	80060ae <_dtoa_r+0x39e>
 800609c:	ec51 0b18 	vmov	r0, r1, d8
 80060a0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060a4:	f7fa faa8 	bl	80005f8 <__aeabi_dmul>
 80060a8:	ec41 0b18 	vmov	d8, r0, r1
 80060ac:	3501      	adds	r5, #1
 80060ae:	107f      	asrs	r7, r7, #1
 80060b0:	3608      	adds	r6, #8
 80060b2:	e7e5      	b.n	8006080 <_dtoa_r+0x370>
 80060b4:	f000 80a6 	beq.w	8006204 <_dtoa_r+0x4f4>
 80060b8:	f1ca 0600 	rsb	r6, sl, #0
 80060bc:	4ba5      	ldr	r3, [pc, #660]	; (8006354 <_dtoa_r+0x644>)
 80060be:	4fa6      	ldr	r7, [pc, #664]	; (8006358 <_dtoa_r+0x648>)
 80060c0:	f006 020f 	and.w	r2, r6, #15
 80060c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060cc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80060d0:	f7fa fa92 	bl	80005f8 <__aeabi_dmul>
 80060d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060d8:	1136      	asrs	r6, r6, #4
 80060da:	2300      	movs	r3, #0
 80060dc:	2502      	movs	r5, #2
 80060de:	2e00      	cmp	r6, #0
 80060e0:	f040 8085 	bne.w	80061ee <_dtoa_r+0x4de>
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1d2      	bne.n	800608e <_dtoa_r+0x37e>
 80060e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 808c 	beq.w	8006208 <_dtoa_r+0x4f8>
 80060f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80060f4:	4b99      	ldr	r3, [pc, #612]	; (800635c <_dtoa_r+0x64c>)
 80060f6:	2200      	movs	r2, #0
 80060f8:	4630      	mov	r0, r6
 80060fa:	4639      	mov	r1, r7
 80060fc:	f7fa fcee 	bl	8000adc <__aeabi_dcmplt>
 8006100:	2800      	cmp	r0, #0
 8006102:	f000 8081 	beq.w	8006208 <_dtoa_r+0x4f8>
 8006106:	9b01      	ldr	r3, [sp, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d07d      	beq.n	8006208 <_dtoa_r+0x4f8>
 800610c:	f1b9 0f00 	cmp.w	r9, #0
 8006110:	dd3c      	ble.n	800618c <_dtoa_r+0x47c>
 8006112:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006116:	9307      	str	r3, [sp, #28]
 8006118:	2200      	movs	r2, #0
 800611a:	4b91      	ldr	r3, [pc, #580]	; (8006360 <_dtoa_r+0x650>)
 800611c:	4630      	mov	r0, r6
 800611e:	4639      	mov	r1, r7
 8006120:	f7fa fa6a 	bl	80005f8 <__aeabi_dmul>
 8006124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006128:	3501      	adds	r5, #1
 800612a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800612e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006132:	4628      	mov	r0, r5
 8006134:	f7fa f9f6 	bl	8000524 <__aeabi_i2d>
 8006138:	4632      	mov	r2, r6
 800613a:	463b      	mov	r3, r7
 800613c:	f7fa fa5c 	bl	80005f8 <__aeabi_dmul>
 8006140:	4b88      	ldr	r3, [pc, #544]	; (8006364 <_dtoa_r+0x654>)
 8006142:	2200      	movs	r2, #0
 8006144:	f7fa f8a2 	bl	800028c <__adddf3>
 8006148:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800614c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006150:	9303      	str	r3, [sp, #12]
 8006152:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006154:	2b00      	cmp	r3, #0
 8006156:	d15c      	bne.n	8006212 <_dtoa_r+0x502>
 8006158:	4b83      	ldr	r3, [pc, #524]	; (8006368 <_dtoa_r+0x658>)
 800615a:	2200      	movs	r2, #0
 800615c:	4630      	mov	r0, r6
 800615e:	4639      	mov	r1, r7
 8006160:	f7fa f892 	bl	8000288 <__aeabi_dsub>
 8006164:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006168:	4606      	mov	r6, r0
 800616a:	460f      	mov	r7, r1
 800616c:	f7fa fcd4 	bl	8000b18 <__aeabi_dcmpgt>
 8006170:	2800      	cmp	r0, #0
 8006172:	f040 8296 	bne.w	80066a2 <_dtoa_r+0x992>
 8006176:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800617a:	4630      	mov	r0, r6
 800617c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006180:	4639      	mov	r1, r7
 8006182:	f7fa fcab 	bl	8000adc <__aeabi_dcmplt>
 8006186:	2800      	cmp	r0, #0
 8006188:	f040 8288 	bne.w	800669c <_dtoa_r+0x98c>
 800618c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006190:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006194:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006196:	2b00      	cmp	r3, #0
 8006198:	f2c0 8158 	blt.w	800644c <_dtoa_r+0x73c>
 800619c:	f1ba 0f0e 	cmp.w	sl, #14
 80061a0:	f300 8154 	bgt.w	800644c <_dtoa_r+0x73c>
 80061a4:	4b6b      	ldr	r3, [pc, #428]	; (8006354 <_dtoa_r+0x644>)
 80061a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80061aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f280 80e3 	bge.w	800637c <_dtoa_r+0x66c>
 80061b6:	9b01      	ldr	r3, [sp, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	f300 80df 	bgt.w	800637c <_dtoa_r+0x66c>
 80061be:	f040 826d 	bne.w	800669c <_dtoa_r+0x98c>
 80061c2:	4b69      	ldr	r3, [pc, #420]	; (8006368 <_dtoa_r+0x658>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	4640      	mov	r0, r8
 80061c8:	4649      	mov	r1, r9
 80061ca:	f7fa fa15 	bl	80005f8 <__aeabi_dmul>
 80061ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061d2:	f7fa fc97 	bl	8000b04 <__aeabi_dcmpge>
 80061d6:	9e01      	ldr	r6, [sp, #4]
 80061d8:	4637      	mov	r7, r6
 80061da:	2800      	cmp	r0, #0
 80061dc:	f040 8243 	bne.w	8006666 <_dtoa_r+0x956>
 80061e0:	9d00      	ldr	r5, [sp, #0]
 80061e2:	2331      	movs	r3, #49	; 0x31
 80061e4:	f805 3b01 	strb.w	r3, [r5], #1
 80061e8:	f10a 0a01 	add.w	sl, sl, #1
 80061ec:	e23f      	b.n	800666e <_dtoa_r+0x95e>
 80061ee:	07f2      	lsls	r2, r6, #31
 80061f0:	d505      	bpl.n	80061fe <_dtoa_r+0x4ee>
 80061f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061f6:	f7fa f9ff 	bl	80005f8 <__aeabi_dmul>
 80061fa:	3501      	adds	r5, #1
 80061fc:	2301      	movs	r3, #1
 80061fe:	1076      	asrs	r6, r6, #1
 8006200:	3708      	adds	r7, #8
 8006202:	e76c      	b.n	80060de <_dtoa_r+0x3ce>
 8006204:	2502      	movs	r5, #2
 8006206:	e76f      	b.n	80060e8 <_dtoa_r+0x3d8>
 8006208:	9b01      	ldr	r3, [sp, #4]
 800620a:	f8cd a01c 	str.w	sl, [sp, #28]
 800620e:	930c      	str	r3, [sp, #48]	; 0x30
 8006210:	e78d      	b.n	800612e <_dtoa_r+0x41e>
 8006212:	9900      	ldr	r1, [sp, #0]
 8006214:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006218:	4b4e      	ldr	r3, [pc, #312]	; (8006354 <_dtoa_r+0x644>)
 800621a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800621e:	4401      	add	r1, r0
 8006220:	9102      	str	r1, [sp, #8]
 8006222:	9908      	ldr	r1, [sp, #32]
 8006224:	eeb0 8a47 	vmov.f32	s16, s14
 8006228:	eef0 8a67 	vmov.f32	s17, s15
 800622c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006230:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006234:	2900      	cmp	r1, #0
 8006236:	d045      	beq.n	80062c4 <_dtoa_r+0x5b4>
 8006238:	494c      	ldr	r1, [pc, #304]	; (800636c <_dtoa_r+0x65c>)
 800623a:	2000      	movs	r0, #0
 800623c:	f7fa fb06 	bl	800084c <__aeabi_ddiv>
 8006240:	ec53 2b18 	vmov	r2, r3, d8
 8006244:	f7fa f820 	bl	8000288 <__aeabi_dsub>
 8006248:	9d00      	ldr	r5, [sp, #0]
 800624a:	ec41 0b18 	vmov	d8, r0, r1
 800624e:	4639      	mov	r1, r7
 8006250:	4630      	mov	r0, r6
 8006252:	f7fa fc81 	bl	8000b58 <__aeabi_d2iz>
 8006256:	900c      	str	r0, [sp, #48]	; 0x30
 8006258:	f7fa f964 	bl	8000524 <__aeabi_i2d>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4630      	mov	r0, r6
 8006262:	4639      	mov	r1, r7
 8006264:	f7fa f810 	bl	8000288 <__aeabi_dsub>
 8006268:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800626a:	3330      	adds	r3, #48	; 0x30
 800626c:	f805 3b01 	strb.w	r3, [r5], #1
 8006270:	ec53 2b18 	vmov	r2, r3, d8
 8006274:	4606      	mov	r6, r0
 8006276:	460f      	mov	r7, r1
 8006278:	f7fa fc30 	bl	8000adc <__aeabi_dcmplt>
 800627c:	2800      	cmp	r0, #0
 800627e:	d165      	bne.n	800634c <_dtoa_r+0x63c>
 8006280:	4632      	mov	r2, r6
 8006282:	463b      	mov	r3, r7
 8006284:	4935      	ldr	r1, [pc, #212]	; (800635c <_dtoa_r+0x64c>)
 8006286:	2000      	movs	r0, #0
 8006288:	f7f9 fffe 	bl	8000288 <__aeabi_dsub>
 800628c:	ec53 2b18 	vmov	r2, r3, d8
 8006290:	f7fa fc24 	bl	8000adc <__aeabi_dcmplt>
 8006294:	2800      	cmp	r0, #0
 8006296:	f040 80b9 	bne.w	800640c <_dtoa_r+0x6fc>
 800629a:	9b02      	ldr	r3, [sp, #8]
 800629c:	429d      	cmp	r5, r3
 800629e:	f43f af75 	beq.w	800618c <_dtoa_r+0x47c>
 80062a2:	4b2f      	ldr	r3, [pc, #188]	; (8006360 <_dtoa_r+0x650>)
 80062a4:	ec51 0b18 	vmov	r0, r1, d8
 80062a8:	2200      	movs	r2, #0
 80062aa:	f7fa f9a5 	bl	80005f8 <__aeabi_dmul>
 80062ae:	4b2c      	ldr	r3, [pc, #176]	; (8006360 <_dtoa_r+0x650>)
 80062b0:	ec41 0b18 	vmov	d8, r0, r1
 80062b4:	2200      	movs	r2, #0
 80062b6:	4630      	mov	r0, r6
 80062b8:	4639      	mov	r1, r7
 80062ba:	f7fa f99d 	bl	80005f8 <__aeabi_dmul>
 80062be:	4606      	mov	r6, r0
 80062c0:	460f      	mov	r7, r1
 80062c2:	e7c4      	b.n	800624e <_dtoa_r+0x53e>
 80062c4:	ec51 0b17 	vmov	r0, r1, d7
 80062c8:	f7fa f996 	bl	80005f8 <__aeabi_dmul>
 80062cc:	9b02      	ldr	r3, [sp, #8]
 80062ce:	9d00      	ldr	r5, [sp, #0]
 80062d0:	930c      	str	r3, [sp, #48]	; 0x30
 80062d2:	ec41 0b18 	vmov	d8, r0, r1
 80062d6:	4639      	mov	r1, r7
 80062d8:	4630      	mov	r0, r6
 80062da:	f7fa fc3d 	bl	8000b58 <__aeabi_d2iz>
 80062de:	9011      	str	r0, [sp, #68]	; 0x44
 80062e0:	f7fa f920 	bl	8000524 <__aeabi_i2d>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4630      	mov	r0, r6
 80062ea:	4639      	mov	r1, r7
 80062ec:	f7f9 ffcc 	bl	8000288 <__aeabi_dsub>
 80062f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062f2:	3330      	adds	r3, #48	; 0x30
 80062f4:	f805 3b01 	strb.w	r3, [r5], #1
 80062f8:	9b02      	ldr	r3, [sp, #8]
 80062fa:	429d      	cmp	r5, r3
 80062fc:	4606      	mov	r6, r0
 80062fe:	460f      	mov	r7, r1
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	d134      	bne.n	8006370 <_dtoa_r+0x660>
 8006306:	4b19      	ldr	r3, [pc, #100]	; (800636c <_dtoa_r+0x65c>)
 8006308:	ec51 0b18 	vmov	r0, r1, d8
 800630c:	f7f9 ffbe 	bl	800028c <__adddf3>
 8006310:	4602      	mov	r2, r0
 8006312:	460b      	mov	r3, r1
 8006314:	4630      	mov	r0, r6
 8006316:	4639      	mov	r1, r7
 8006318:	f7fa fbfe 	bl	8000b18 <__aeabi_dcmpgt>
 800631c:	2800      	cmp	r0, #0
 800631e:	d175      	bne.n	800640c <_dtoa_r+0x6fc>
 8006320:	ec53 2b18 	vmov	r2, r3, d8
 8006324:	4911      	ldr	r1, [pc, #68]	; (800636c <_dtoa_r+0x65c>)
 8006326:	2000      	movs	r0, #0
 8006328:	f7f9 ffae 	bl	8000288 <__aeabi_dsub>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4630      	mov	r0, r6
 8006332:	4639      	mov	r1, r7
 8006334:	f7fa fbd2 	bl	8000adc <__aeabi_dcmplt>
 8006338:	2800      	cmp	r0, #0
 800633a:	f43f af27 	beq.w	800618c <_dtoa_r+0x47c>
 800633e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006340:	1e6b      	subs	r3, r5, #1
 8006342:	930c      	str	r3, [sp, #48]	; 0x30
 8006344:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006348:	2b30      	cmp	r3, #48	; 0x30
 800634a:	d0f8      	beq.n	800633e <_dtoa_r+0x62e>
 800634c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006350:	e04a      	b.n	80063e8 <_dtoa_r+0x6d8>
 8006352:	bf00      	nop
 8006354:	08008200 	.word	0x08008200
 8006358:	080081d8 	.word	0x080081d8
 800635c:	3ff00000 	.word	0x3ff00000
 8006360:	40240000 	.word	0x40240000
 8006364:	401c0000 	.word	0x401c0000
 8006368:	40140000 	.word	0x40140000
 800636c:	3fe00000 	.word	0x3fe00000
 8006370:	4baf      	ldr	r3, [pc, #700]	; (8006630 <_dtoa_r+0x920>)
 8006372:	f7fa f941 	bl	80005f8 <__aeabi_dmul>
 8006376:	4606      	mov	r6, r0
 8006378:	460f      	mov	r7, r1
 800637a:	e7ac      	b.n	80062d6 <_dtoa_r+0x5c6>
 800637c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006380:	9d00      	ldr	r5, [sp, #0]
 8006382:	4642      	mov	r2, r8
 8006384:	464b      	mov	r3, r9
 8006386:	4630      	mov	r0, r6
 8006388:	4639      	mov	r1, r7
 800638a:	f7fa fa5f 	bl	800084c <__aeabi_ddiv>
 800638e:	f7fa fbe3 	bl	8000b58 <__aeabi_d2iz>
 8006392:	9002      	str	r0, [sp, #8]
 8006394:	f7fa f8c6 	bl	8000524 <__aeabi_i2d>
 8006398:	4642      	mov	r2, r8
 800639a:	464b      	mov	r3, r9
 800639c:	f7fa f92c 	bl	80005f8 <__aeabi_dmul>
 80063a0:	4602      	mov	r2, r0
 80063a2:	460b      	mov	r3, r1
 80063a4:	4630      	mov	r0, r6
 80063a6:	4639      	mov	r1, r7
 80063a8:	f7f9 ff6e 	bl	8000288 <__aeabi_dsub>
 80063ac:	9e02      	ldr	r6, [sp, #8]
 80063ae:	9f01      	ldr	r7, [sp, #4]
 80063b0:	3630      	adds	r6, #48	; 0x30
 80063b2:	f805 6b01 	strb.w	r6, [r5], #1
 80063b6:	9e00      	ldr	r6, [sp, #0]
 80063b8:	1bae      	subs	r6, r5, r6
 80063ba:	42b7      	cmp	r7, r6
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	d137      	bne.n	8006432 <_dtoa_r+0x722>
 80063c2:	f7f9 ff63 	bl	800028c <__adddf3>
 80063c6:	4642      	mov	r2, r8
 80063c8:	464b      	mov	r3, r9
 80063ca:	4606      	mov	r6, r0
 80063cc:	460f      	mov	r7, r1
 80063ce:	f7fa fba3 	bl	8000b18 <__aeabi_dcmpgt>
 80063d2:	b9c8      	cbnz	r0, 8006408 <_dtoa_r+0x6f8>
 80063d4:	4642      	mov	r2, r8
 80063d6:	464b      	mov	r3, r9
 80063d8:	4630      	mov	r0, r6
 80063da:	4639      	mov	r1, r7
 80063dc:	f7fa fb74 	bl	8000ac8 <__aeabi_dcmpeq>
 80063e0:	b110      	cbz	r0, 80063e8 <_dtoa_r+0x6d8>
 80063e2:	9b02      	ldr	r3, [sp, #8]
 80063e4:	07d9      	lsls	r1, r3, #31
 80063e6:	d40f      	bmi.n	8006408 <_dtoa_r+0x6f8>
 80063e8:	4620      	mov	r0, r4
 80063ea:	4659      	mov	r1, fp
 80063ec:	f000 fad6 	bl	800699c <_Bfree>
 80063f0:	2300      	movs	r3, #0
 80063f2:	702b      	strb	r3, [r5, #0]
 80063f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80063f6:	f10a 0001 	add.w	r0, sl, #1
 80063fa:	6018      	str	r0, [r3, #0]
 80063fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f43f acd8 	beq.w	8005db4 <_dtoa_r+0xa4>
 8006404:	601d      	str	r5, [r3, #0]
 8006406:	e4d5      	b.n	8005db4 <_dtoa_r+0xa4>
 8006408:	f8cd a01c 	str.w	sl, [sp, #28]
 800640c:	462b      	mov	r3, r5
 800640e:	461d      	mov	r5, r3
 8006410:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006414:	2a39      	cmp	r2, #57	; 0x39
 8006416:	d108      	bne.n	800642a <_dtoa_r+0x71a>
 8006418:	9a00      	ldr	r2, [sp, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d1f7      	bne.n	800640e <_dtoa_r+0x6fe>
 800641e:	9a07      	ldr	r2, [sp, #28]
 8006420:	9900      	ldr	r1, [sp, #0]
 8006422:	3201      	adds	r2, #1
 8006424:	9207      	str	r2, [sp, #28]
 8006426:	2230      	movs	r2, #48	; 0x30
 8006428:	700a      	strb	r2, [r1, #0]
 800642a:	781a      	ldrb	r2, [r3, #0]
 800642c:	3201      	adds	r2, #1
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	e78c      	b.n	800634c <_dtoa_r+0x63c>
 8006432:	4b7f      	ldr	r3, [pc, #508]	; (8006630 <_dtoa_r+0x920>)
 8006434:	2200      	movs	r2, #0
 8006436:	f7fa f8df 	bl	80005f8 <__aeabi_dmul>
 800643a:	2200      	movs	r2, #0
 800643c:	2300      	movs	r3, #0
 800643e:	4606      	mov	r6, r0
 8006440:	460f      	mov	r7, r1
 8006442:	f7fa fb41 	bl	8000ac8 <__aeabi_dcmpeq>
 8006446:	2800      	cmp	r0, #0
 8006448:	d09b      	beq.n	8006382 <_dtoa_r+0x672>
 800644a:	e7cd      	b.n	80063e8 <_dtoa_r+0x6d8>
 800644c:	9a08      	ldr	r2, [sp, #32]
 800644e:	2a00      	cmp	r2, #0
 8006450:	f000 80c4 	beq.w	80065dc <_dtoa_r+0x8cc>
 8006454:	9a05      	ldr	r2, [sp, #20]
 8006456:	2a01      	cmp	r2, #1
 8006458:	f300 80a8 	bgt.w	80065ac <_dtoa_r+0x89c>
 800645c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800645e:	2a00      	cmp	r2, #0
 8006460:	f000 80a0 	beq.w	80065a4 <_dtoa_r+0x894>
 8006464:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006468:	9e06      	ldr	r6, [sp, #24]
 800646a:	4645      	mov	r5, r8
 800646c:	9a04      	ldr	r2, [sp, #16]
 800646e:	2101      	movs	r1, #1
 8006470:	441a      	add	r2, r3
 8006472:	4620      	mov	r0, r4
 8006474:	4498      	add	r8, r3
 8006476:	9204      	str	r2, [sp, #16]
 8006478:	f000 fb4c 	bl	8006b14 <__i2b>
 800647c:	4607      	mov	r7, r0
 800647e:	2d00      	cmp	r5, #0
 8006480:	dd0b      	ble.n	800649a <_dtoa_r+0x78a>
 8006482:	9b04      	ldr	r3, [sp, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	dd08      	ble.n	800649a <_dtoa_r+0x78a>
 8006488:	42ab      	cmp	r3, r5
 800648a:	9a04      	ldr	r2, [sp, #16]
 800648c:	bfa8      	it	ge
 800648e:	462b      	movge	r3, r5
 8006490:	eba8 0803 	sub.w	r8, r8, r3
 8006494:	1aed      	subs	r5, r5, r3
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	9304      	str	r3, [sp, #16]
 800649a:	9b06      	ldr	r3, [sp, #24]
 800649c:	b1fb      	cbz	r3, 80064de <_dtoa_r+0x7ce>
 800649e:	9b08      	ldr	r3, [sp, #32]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 809f 	beq.w	80065e4 <_dtoa_r+0x8d4>
 80064a6:	2e00      	cmp	r6, #0
 80064a8:	dd11      	ble.n	80064ce <_dtoa_r+0x7be>
 80064aa:	4639      	mov	r1, r7
 80064ac:	4632      	mov	r2, r6
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 fbec 	bl	8006c8c <__pow5mult>
 80064b4:	465a      	mov	r2, fp
 80064b6:	4601      	mov	r1, r0
 80064b8:	4607      	mov	r7, r0
 80064ba:	4620      	mov	r0, r4
 80064bc:	f000 fb40 	bl	8006b40 <__multiply>
 80064c0:	4659      	mov	r1, fp
 80064c2:	9007      	str	r0, [sp, #28]
 80064c4:	4620      	mov	r0, r4
 80064c6:	f000 fa69 	bl	800699c <_Bfree>
 80064ca:	9b07      	ldr	r3, [sp, #28]
 80064cc:	469b      	mov	fp, r3
 80064ce:	9b06      	ldr	r3, [sp, #24]
 80064d0:	1b9a      	subs	r2, r3, r6
 80064d2:	d004      	beq.n	80064de <_dtoa_r+0x7ce>
 80064d4:	4659      	mov	r1, fp
 80064d6:	4620      	mov	r0, r4
 80064d8:	f000 fbd8 	bl	8006c8c <__pow5mult>
 80064dc:	4683      	mov	fp, r0
 80064de:	2101      	movs	r1, #1
 80064e0:	4620      	mov	r0, r4
 80064e2:	f000 fb17 	bl	8006b14 <__i2b>
 80064e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	4606      	mov	r6, r0
 80064ec:	dd7c      	ble.n	80065e8 <_dtoa_r+0x8d8>
 80064ee:	461a      	mov	r2, r3
 80064f0:	4601      	mov	r1, r0
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 fbca 	bl	8006c8c <__pow5mult>
 80064f8:	9b05      	ldr	r3, [sp, #20]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	4606      	mov	r6, r0
 80064fe:	dd76      	ble.n	80065ee <_dtoa_r+0x8de>
 8006500:	2300      	movs	r3, #0
 8006502:	9306      	str	r3, [sp, #24]
 8006504:	6933      	ldr	r3, [r6, #16]
 8006506:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800650a:	6918      	ldr	r0, [r3, #16]
 800650c:	f000 fab2 	bl	8006a74 <__hi0bits>
 8006510:	f1c0 0020 	rsb	r0, r0, #32
 8006514:	9b04      	ldr	r3, [sp, #16]
 8006516:	4418      	add	r0, r3
 8006518:	f010 001f 	ands.w	r0, r0, #31
 800651c:	f000 8086 	beq.w	800662c <_dtoa_r+0x91c>
 8006520:	f1c0 0320 	rsb	r3, r0, #32
 8006524:	2b04      	cmp	r3, #4
 8006526:	dd7f      	ble.n	8006628 <_dtoa_r+0x918>
 8006528:	f1c0 001c 	rsb	r0, r0, #28
 800652c:	9b04      	ldr	r3, [sp, #16]
 800652e:	4403      	add	r3, r0
 8006530:	4480      	add	r8, r0
 8006532:	4405      	add	r5, r0
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	f1b8 0f00 	cmp.w	r8, #0
 800653a:	dd05      	ble.n	8006548 <_dtoa_r+0x838>
 800653c:	4659      	mov	r1, fp
 800653e:	4642      	mov	r2, r8
 8006540:	4620      	mov	r0, r4
 8006542:	f000 fbfd 	bl	8006d40 <__lshift>
 8006546:	4683      	mov	fp, r0
 8006548:	9b04      	ldr	r3, [sp, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	dd05      	ble.n	800655a <_dtoa_r+0x84a>
 800654e:	4631      	mov	r1, r6
 8006550:	461a      	mov	r2, r3
 8006552:	4620      	mov	r0, r4
 8006554:	f000 fbf4 	bl	8006d40 <__lshift>
 8006558:	4606      	mov	r6, r0
 800655a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800655c:	2b00      	cmp	r3, #0
 800655e:	d069      	beq.n	8006634 <_dtoa_r+0x924>
 8006560:	4631      	mov	r1, r6
 8006562:	4658      	mov	r0, fp
 8006564:	f000 fc58 	bl	8006e18 <__mcmp>
 8006568:	2800      	cmp	r0, #0
 800656a:	da63      	bge.n	8006634 <_dtoa_r+0x924>
 800656c:	2300      	movs	r3, #0
 800656e:	4659      	mov	r1, fp
 8006570:	220a      	movs	r2, #10
 8006572:	4620      	mov	r0, r4
 8006574:	f000 fa34 	bl	80069e0 <__multadd>
 8006578:	9b08      	ldr	r3, [sp, #32]
 800657a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800657e:	4683      	mov	fp, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 818f 	beq.w	80068a4 <_dtoa_r+0xb94>
 8006586:	4639      	mov	r1, r7
 8006588:	2300      	movs	r3, #0
 800658a:	220a      	movs	r2, #10
 800658c:	4620      	mov	r0, r4
 800658e:	f000 fa27 	bl	80069e0 <__multadd>
 8006592:	f1b9 0f00 	cmp.w	r9, #0
 8006596:	4607      	mov	r7, r0
 8006598:	f300 808e 	bgt.w	80066b8 <_dtoa_r+0x9a8>
 800659c:	9b05      	ldr	r3, [sp, #20]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	dc50      	bgt.n	8006644 <_dtoa_r+0x934>
 80065a2:	e089      	b.n	80066b8 <_dtoa_r+0x9a8>
 80065a4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80065a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065aa:	e75d      	b.n	8006468 <_dtoa_r+0x758>
 80065ac:	9b01      	ldr	r3, [sp, #4]
 80065ae:	1e5e      	subs	r6, r3, #1
 80065b0:	9b06      	ldr	r3, [sp, #24]
 80065b2:	42b3      	cmp	r3, r6
 80065b4:	bfbf      	itttt	lt
 80065b6:	9b06      	ldrlt	r3, [sp, #24]
 80065b8:	9606      	strlt	r6, [sp, #24]
 80065ba:	1af2      	sublt	r2, r6, r3
 80065bc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80065be:	bfb6      	itet	lt
 80065c0:	189b      	addlt	r3, r3, r2
 80065c2:	1b9e      	subge	r6, r3, r6
 80065c4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80065c6:	9b01      	ldr	r3, [sp, #4]
 80065c8:	bfb8      	it	lt
 80065ca:	2600      	movlt	r6, #0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	bfb5      	itete	lt
 80065d0:	eba8 0503 	sublt.w	r5, r8, r3
 80065d4:	9b01      	ldrge	r3, [sp, #4]
 80065d6:	2300      	movlt	r3, #0
 80065d8:	4645      	movge	r5, r8
 80065da:	e747      	b.n	800646c <_dtoa_r+0x75c>
 80065dc:	9e06      	ldr	r6, [sp, #24]
 80065de:	9f08      	ldr	r7, [sp, #32]
 80065e0:	4645      	mov	r5, r8
 80065e2:	e74c      	b.n	800647e <_dtoa_r+0x76e>
 80065e4:	9a06      	ldr	r2, [sp, #24]
 80065e6:	e775      	b.n	80064d4 <_dtoa_r+0x7c4>
 80065e8:	9b05      	ldr	r3, [sp, #20]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	dc18      	bgt.n	8006620 <_dtoa_r+0x910>
 80065ee:	9b02      	ldr	r3, [sp, #8]
 80065f0:	b9b3      	cbnz	r3, 8006620 <_dtoa_r+0x910>
 80065f2:	9b03      	ldr	r3, [sp, #12]
 80065f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065f8:	b9a3      	cbnz	r3, 8006624 <_dtoa_r+0x914>
 80065fa:	9b03      	ldr	r3, [sp, #12]
 80065fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006600:	0d1b      	lsrs	r3, r3, #20
 8006602:	051b      	lsls	r3, r3, #20
 8006604:	b12b      	cbz	r3, 8006612 <_dtoa_r+0x902>
 8006606:	9b04      	ldr	r3, [sp, #16]
 8006608:	3301      	adds	r3, #1
 800660a:	9304      	str	r3, [sp, #16]
 800660c:	f108 0801 	add.w	r8, r8, #1
 8006610:	2301      	movs	r3, #1
 8006612:	9306      	str	r3, [sp, #24]
 8006614:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006616:	2b00      	cmp	r3, #0
 8006618:	f47f af74 	bne.w	8006504 <_dtoa_r+0x7f4>
 800661c:	2001      	movs	r0, #1
 800661e:	e779      	b.n	8006514 <_dtoa_r+0x804>
 8006620:	2300      	movs	r3, #0
 8006622:	e7f6      	b.n	8006612 <_dtoa_r+0x902>
 8006624:	9b02      	ldr	r3, [sp, #8]
 8006626:	e7f4      	b.n	8006612 <_dtoa_r+0x902>
 8006628:	d085      	beq.n	8006536 <_dtoa_r+0x826>
 800662a:	4618      	mov	r0, r3
 800662c:	301c      	adds	r0, #28
 800662e:	e77d      	b.n	800652c <_dtoa_r+0x81c>
 8006630:	40240000 	.word	0x40240000
 8006634:	9b01      	ldr	r3, [sp, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	dc38      	bgt.n	80066ac <_dtoa_r+0x99c>
 800663a:	9b05      	ldr	r3, [sp, #20]
 800663c:	2b02      	cmp	r3, #2
 800663e:	dd35      	ble.n	80066ac <_dtoa_r+0x99c>
 8006640:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8006644:	f1b9 0f00 	cmp.w	r9, #0
 8006648:	d10d      	bne.n	8006666 <_dtoa_r+0x956>
 800664a:	4631      	mov	r1, r6
 800664c:	464b      	mov	r3, r9
 800664e:	2205      	movs	r2, #5
 8006650:	4620      	mov	r0, r4
 8006652:	f000 f9c5 	bl	80069e0 <__multadd>
 8006656:	4601      	mov	r1, r0
 8006658:	4606      	mov	r6, r0
 800665a:	4658      	mov	r0, fp
 800665c:	f000 fbdc 	bl	8006e18 <__mcmp>
 8006660:	2800      	cmp	r0, #0
 8006662:	f73f adbd 	bgt.w	80061e0 <_dtoa_r+0x4d0>
 8006666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006668:	9d00      	ldr	r5, [sp, #0]
 800666a:	ea6f 0a03 	mvn.w	sl, r3
 800666e:	f04f 0800 	mov.w	r8, #0
 8006672:	4631      	mov	r1, r6
 8006674:	4620      	mov	r0, r4
 8006676:	f000 f991 	bl	800699c <_Bfree>
 800667a:	2f00      	cmp	r7, #0
 800667c:	f43f aeb4 	beq.w	80063e8 <_dtoa_r+0x6d8>
 8006680:	f1b8 0f00 	cmp.w	r8, #0
 8006684:	d005      	beq.n	8006692 <_dtoa_r+0x982>
 8006686:	45b8      	cmp	r8, r7
 8006688:	d003      	beq.n	8006692 <_dtoa_r+0x982>
 800668a:	4641      	mov	r1, r8
 800668c:	4620      	mov	r0, r4
 800668e:	f000 f985 	bl	800699c <_Bfree>
 8006692:	4639      	mov	r1, r7
 8006694:	4620      	mov	r0, r4
 8006696:	f000 f981 	bl	800699c <_Bfree>
 800669a:	e6a5      	b.n	80063e8 <_dtoa_r+0x6d8>
 800669c:	2600      	movs	r6, #0
 800669e:	4637      	mov	r7, r6
 80066a0:	e7e1      	b.n	8006666 <_dtoa_r+0x956>
 80066a2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80066a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80066a8:	4637      	mov	r7, r6
 80066aa:	e599      	b.n	80061e0 <_dtoa_r+0x4d0>
 80066ac:	9b08      	ldr	r3, [sp, #32]
 80066ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f000 80fd 	beq.w	80068b2 <_dtoa_r+0xba2>
 80066b8:	2d00      	cmp	r5, #0
 80066ba:	dd05      	ble.n	80066c8 <_dtoa_r+0x9b8>
 80066bc:	4639      	mov	r1, r7
 80066be:	462a      	mov	r2, r5
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 fb3d 	bl	8006d40 <__lshift>
 80066c6:	4607      	mov	r7, r0
 80066c8:	9b06      	ldr	r3, [sp, #24]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d05c      	beq.n	8006788 <_dtoa_r+0xa78>
 80066ce:	6879      	ldr	r1, [r7, #4]
 80066d0:	4620      	mov	r0, r4
 80066d2:	f000 f923 	bl	800691c <_Balloc>
 80066d6:	4605      	mov	r5, r0
 80066d8:	b928      	cbnz	r0, 80066e6 <_dtoa_r+0x9d6>
 80066da:	4b80      	ldr	r3, [pc, #512]	; (80068dc <_dtoa_r+0xbcc>)
 80066dc:	4602      	mov	r2, r0
 80066de:	f240 21ea 	movw	r1, #746	; 0x2ea
 80066e2:	f7ff bb2e 	b.w	8005d42 <_dtoa_r+0x32>
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	3202      	adds	r2, #2
 80066ea:	0092      	lsls	r2, r2, #2
 80066ec:	f107 010c 	add.w	r1, r7, #12
 80066f0:	300c      	adds	r0, #12
 80066f2:	f000 f905 	bl	8006900 <memcpy>
 80066f6:	2201      	movs	r2, #1
 80066f8:	4629      	mov	r1, r5
 80066fa:	4620      	mov	r0, r4
 80066fc:	f000 fb20 	bl	8006d40 <__lshift>
 8006700:	9b00      	ldr	r3, [sp, #0]
 8006702:	3301      	adds	r3, #1
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	9b00      	ldr	r3, [sp, #0]
 8006708:	444b      	add	r3, r9
 800670a:	9307      	str	r3, [sp, #28]
 800670c:	9b02      	ldr	r3, [sp, #8]
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	46b8      	mov	r8, r7
 8006714:	9306      	str	r3, [sp, #24]
 8006716:	4607      	mov	r7, r0
 8006718:	9b01      	ldr	r3, [sp, #4]
 800671a:	4631      	mov	r1, r6
 800671c:	3b01      	subs	r3, #1
 800671e:	4658      	mov	r0, fp
 8006720:	9302      	str	r3, [sp, #8]
 8006722:	f7ff fa69 	bl	8005bf8 <quorem>
 8006726:	4603      	mov	r3, r0
 8006728:	3330      	adds	r3, #48	; 0x30
 800672a:	9004      	str	r0, [sp, #16]
 800672c:	4641      	mov	r1, r8
 800672e:	4658      	mov	r0, fp
 8006730:	9308      	str	r3, [sp, #32]
 8006732:	f000 fb71 	bl	8006e18 <__mcmp>
 8006736:	463a      	mov	r2, r7
 8006738:	4681      	mov	r9, r0
 800673a:	4631      	mov	r1, r6
 800673c:	4620      	mov	r0, r4
 800673e:	f000 fb87 	bl	8006e50 <__mdiff>
 8006742:	68c2      	ldr	r2, [r0, #12]
 8006744:	9b08      	ldr	r3, [sp, #32]
 8006746:	4605      	mov	r5, r0
 8006748:	bb02      	cbnz	r2, 800678c <_dtoa_r+0xa7c>
 800674a:	4601      	mov	r1, r0
 800674c:	4658      	mov	r0, fp
 800674e:	f000 fb63 	bl	8006e18 <__mcmp>
 8006752:	9b08      	ldr	r3, [sp, #32]
 8006754:	4602      	mov	r2, r0
 8006756:	4629      	mov	r1, r5
 8006758:	4620      	mov	r0, r4
 800675a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800675e:	f000 f91d 	bl	800699c <_Bfree>
 8006762:	9b05      	ldr	r3, [sp, #20]
 8006764:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006766:	9d01      	ldr	r5, [sp, #4]
 8006768:	ea43 0102 	orr.w	r1, r3, r2
 800676c:	9b06      	ldr	r3, [sp, #24]
 800676e:	430b      	orrs	r3, r1
 8006770:	9b08      	ldr	r3, [sp, #32]
 8006772:	d10d      	bne.n	8006790 <_dtoa_r+0xa80>
 8006774:	2b39      	cmp	r3, #57	; 0x39
 8006776:	d029      	beq.n	80067cc <_dtoa_r+0xabc>
 8006778:	f1b9 0f00 	cmp.w	r9, #0
 800677c:	dd01      	ble.n	8006782 <_dtoa_r+0xa72>
 800677e:	9b04      	ldr	r3, [sp, #16]
 8006780:	3331      	adds	r3, #49	; 0x31
 8006782:	9a02      	ldr	r2, [sp, #8]
 8006784:	7013      	strb	r3, [r2, #0]
 8006786:	e774      	b.n	8006672 <_dtoa_r+0x962>
 8006788:	4638      	mov	r0, r7
 800678a:	e7b9      	b.n	8006700 <_dtoa_r+0x9f0>
 800678c:	2201      	movs	r2, #1
 800678e:	e7e2      	b.n	8006756 <_dtoa_r+0xa46>
 8006790:	f1b9 0f00 	cmp.w	r9, #0
 8006794:	db06      	blt.n	80067a4 <_dtoa_r+0xa94>
 8006796:	9905      	ldr	r1, [sp, #20]
 8006798:	ea41 0909 	orr.w	r9, r1, r9
 800679c:	9906      	ldr	r1, [sp, #24]
 800679e:	ea59 0101 	orrs.w	r1, r9, r1
 80067a2:	d120      	bne.n	80067e6 <_dtoa_r+0xad6>
 80067a4:	2a00      	cmp	r2, #0
 80067a6:	ddec      	ble.n	8006782 <_dtoa_r+0xa72>
 80067a8:	4659      	mov	r1, fp
 80067aa:	2201      	movs	r2, #1
 80067ac:	4620      	mov	r0, r4
 80067ae:	9301      	str	r3, [sp, #4]
 80067b0:	f000 fac6 	bl	8006d40 <__lshift>
 80067b4:	4631      	mov	r1, r6
 80067b6:	4683      	mov	fp, r0
 80067b8:	f000 fb2e 	bl	8006e18 <__mcmp>
 80067bc:	2800      	cmp	r0, #0
 80067be:	9b01      	ldr	r3, [sp, #4]
 80067c0:	dc02      	bgt.n	80067c8 <_dtoa_r+0xab8>
 80067c2:	d1de      	bne.n	8006782 <_dtoa_r+0xa72>
 80067c4:	07da      	lsls	r2, r3, #31
 80067c6:	d5dc      	bpl.n	8006782 <_dtoa_r+0xa72>
 80067c8:	2b39      	cmp	r3, #57	; 0x39
 80067ca:	d1d8      	bne.n	800677e <_dtoa_r+0xa6e>
 80067cc:	9a02      	ldr	r2, [sp, #8]
 80067ce:	2339      	movs	r3, #57	; 0x39
 80067d0:	7013      	strb	r3, [r2, #0]
 80067d2:	462b      	mov	r3, r5
 80067d4:	461d      	mov	r5, r3
 80067d6:	3b01      	subs	r3, #1
 80067d8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80067dc:	2a39      	cmp	r2, #57	; 0x39
 80067de:	d050      	beq.n	8006882 <_dtoa_r+0xb72>
 80067e0:	3201      	adds	r2, #1
 80067e2:	701a      	strb	r2, [r3, #0]
 80067e4:	e745      	b.n	8006672 <_dtoa_r+0x962>
 80067e6:	2a00      	cmp	r2, #0
 80067e8:	dd03      	ble.n	80067f2 <_dtoa_r+0xae2>
 80067ea:	2b39      	cmp	r3, #57	; 0x39
 80067ec:	d0ee      	beq.n	80067cc <_dtoa_r+0xabc>
 80067ee:	3301      	adds	r3, #1
 80067f0:	e7c7      	b.n	8006782 <_dtoa_r+0xa72>
 80067f2:	9a01      	ldr	r2, [sp, #4]
 80067f4:	9907      	ldr	r1, [sp, #28]
 80067f6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80067fa:	428a      	cmp	r2, r1
 80067fc:	d02a      	beq.n	8006854 <_dtoa_r+0xb44>
 80067fe:	4659      	mov	r1, fp
 8006800:	2300      	movs	r3, #0
 8006802:	220a      	movs	r2, #10
 8006804:	4620      	mov	r0, r4
 8006806:	f000 f8eb 	bl	80069e0 <__multadd>
 800680a:	45b8      	cmp	r8, r7
 800680c:	4683      	mov	fp, r0
 800680e:	f04f 0300 	mov.w	r3, #0
 8006812:	f04f 020a 	mov.w	r2, #10
 8006816:	4641      	mov	r1, r8
 8006818:	4620      	mov	r0, r4
 800681a:	d107      	bne.n	800682c <_dtoa_r+0xb1c>
 800681c:	f000 f8e0 	bl	80069e0 <__multadd>
 8006820:	4680      	mov	r8, r0
 8006822:	4607      	mov	r7, r0
 8006824:	9b01      	ldr	r3, [sp, #4]
 8006826:	3301      	adds	r3, #1
 8006828:	9301      	str	r3, [sp, #4]
 800682a:	e775      	b.n	8006718 <_dtoa_r+0xa08>
 800682c:	f000 f8d8 	bl	80069e0 <__multadd>
 8006830:	4639      	mov	r1, r7
 8006832:	4680      	mov	r8, r0
 8006834:	2300      	movs	r3, #0
 8006836:	220a      	movs	r2, #10
 8006838:	4620      	mov	r0, r4
 800683a:	f000 f8d1 	bl	80069e0 <__multadd>
 800683e:	4607      	mov	r7, r0
 8006840:	e7f0      	b.n	8006824 <_dtoa_r+0xb14>
 8006842:	f1b9 0f00 	cmp.w	r9, #0
 8006846:	9a00      	ldr	r2, [sp, #0]
 8006848:	bfcc      	ite	gt
 800684a:	464d      	movgt	r5, r9
 800684c:	2501      	movle	r5, #1
 800684e:	4415      	add	r5, r2
 8006850:	f04f 0800 	mov.w	r8, #0
 8006854:	4659      	mov	r1, fp
 8006856:	2201      	movs	r2, #1
 8006858:	4620      	mov	r0, r4
 800685a:	9301      	str	r3, [sp, #4]
 800685c:	f000 fa70 	bl	8006d40 <__lshift>
 8006860:	4631      	mov	r1, r6
 8006862:	4683      	mov	fp, r0
 8006864:	f000 fad8 	bl	8006e18 <__mcmp>
 8006868:	2800      	cmp	r0, #0
 800686a:	dcb2      	bgt.n	80067d2 <_dtoa_r+0xac2>
 800686c:	d102      	bne.n	8006874 <_dtoa_r+0xb64>
 800686e:	9b01      	ldr	r3, [sp, #4]
 8006870:	07db      	lsls	r3, r3, #31
 8006872:	d4ae      	bmi.n	80067d2 <_dtoa_r+0xac2>
 8006874:	462b      	mov	r3, r5
 8006876:	461d      	mov	r5, r3
 8006878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800687c:	2a30      	cmp	r2, #48	; 0x30
 800687e:	d0fa      	beq.n	8006876 <_dtoa_r+0xb66>
 8006880:	e6f7      	b.n	8006672 <_dtoa_r+0x962>
 8006882:	9a00      	ldr	r2, [sp, #0]
 8006884:	429a      	cmp	r2, r3
 8006886:	d1a5      	bne.n	80067d4 <_dtoa_r+0xac4>
 8006888:	f10a 0a01 	add.w	sl, sl, #1
 800688c:	2331      	movs	r3, #49	; 0x31
 800688e:	e779      	b.n	8006784 <_dtoa_r+0xa74>
 8006890:	4b13      	ldr	r3, [pc, #76]	; (80068e0 <_dtoa_r+0xbd0>)
 8006892:	f7ff baaf 	b.w	8005df4 <_dtoa_r+0xe4>
 8006896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006898:	2b00      	cmp	r3, #0
 800689a:	f47f aa86 	bne.w	8005daa <_dtoa_r+0x9a>
 800689e:	4b11      	ldr	r3, [pc, #68]	; (80068e4 <_dtoa_r+0xbd4>)
 80068a0:	f7ff baa8 	b.w	8005df4 <_dtoa_r+0xe4>
 80068a4:	f1b9 0f00 	cmp.w	r9, #0
 80068a8:	dc03      	bgt.n	80068b2 <_dtoa_r+0xba2>
 80068aa:	9b05      	ldr	r3, [sp, #20]
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	f73f aec9 	bgt.w	8006644 <_dtoa_r+0x934>
 80068b2:	9d00      	ldr	r5, [sp, #0]
 80068b4:	4631      	mov	r1, r6
 80068b6:	4658      	mov	r0, fp
 80068b8:	f7ff f99e 	bl	8005bf8 <quorem>
 80068bc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80068c0:	f805 3b01 	strb.w	r3, [r5], #1
 80068c4:	9a00      	ldr	r2, [sp, #0]
 80068c6:	1aaa      	subs	r2, r5, r2
 80068c8:	4591      	cmp	r9, r2
 80068ca:	ddba      	ble.n	8006842 <_dtoa_r+0xb32>
 80068cc:	4659      	mov	r1, fp
 80068ce:	2300      	movs	r3, #0
 80068d0:	220a      	movs	r2, #10
 80068d2:	4620      	mov	r0, r4
 80068d4:	f000 f884 	bl	80069e0 <__multadd>
 80068d8:	4683      	mov	fp, r0
 80068da:	e7eb      	b.n	80068b4 <_dtoa_r+0xba4>
 80068dc:	08008167 	.word	0x08008167
 80068e0:	080080c0 	.word	0x080080c0
 80068e4:	080080e4 	.word	0x080080e4

080068e8 <_localeconv_r>:
 80068e8:	4800      	ldr	r0, [pc, #0]	; (80068ec <_localeconv_r+0x4>)
 80068ea:	4770      	bx	lr
 80068ec:	20000160 	.word	0x20000160

080068f0 <malloc>:
 80068f0:	4b02      	ldr	r3, [pc, #8]	; (80068fc <malloc+0xc>)
 80068f2:	4601      	mov	r1, r0
 80068f4:	6818      	ldr	r0, [r3, #0]
 80068f6:	f000 bbef 	b.w	80070d8 <_malloc_r>
 80068fa:	bf00      	nop
 80068fc:	2000000c 	.word	0x2000000c

08006900 <memcpy>:
 8006900:	440a      	add	r2, r1
 8006902:	4291      	cmp	r1, r2
 8006904:	f100 33ff 	add.w	r3, r0, #4294967295
 8006908:	d100      	bne.n	800690c <memcpy+0xc>
 800690a:	4770      	bx	lr
 800690c:	b510      	push	{r4, lr}
 800690e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006916:	4291      	cmp	r1, r2
 8006918:	d1f9      	bne.n	800690e <memcpy+0xe>
 800691a:	bd10      	pop	{r4, pc}

0800691c <_Balloc>:
 800691c:	b570      	push	{r4, r5, r6, lr}
 800691e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006920:	4604      	mov	r4, r0
 8006922:	460d      	mov	r5, r1
 8006924:	b976      	cbnz	r6, 8006944 <_Balloc+0x28>
 8006926:	2010      	movs	r0, #16
 8006928:	f7ff ffe2 	bl	80068f0 <malloc>
 800692c:	4602      	mov	r2, r0
 800692e:	6260      	str	r0, [r4, #36]	; 0x24
 8006930:	b920      	cbnz	r0, 800693c <_Balloc+0x20>
 8006932:	4b18      	ldr	r3, [pc, #96]	; (8006994 <_Balloc+0x78>)
 8006934:	4818      	ldr	r0, [pc, #96]	; (8006998 <_Balloc+0x7c>)
 8006936:	2166      	movs	r1, #102	; 0x66
 8006938:	f000 fd94 	bl	8007464 <__assert_func>
 800693c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006940:	6006      	str	r6, [r0, #0]
 8006942:	60c6      	str	r6, [r0, #12]
 8006944:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006946:	68f3      	ldr	r3, [r6, #12]
 8006948:	b183      	cbz	r3, 800696c <_Balloc+0x50>
 800694a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006952:	b9b8      	cbnz	r0, 8006984 <_Balloc+0x68>
 8006954:	2101      	movs	r1, #1
 8006956:	fa01 f605 	lsl.w	r6, r1, r5
 800695a:	1d72      	adds	r2, r6, #5
 800695c:	0092      	lsls	r2, r2, #2
 800695e:	4620      	mov	r0, r4
 8006960:	f000 fb5a 	bl	8007018 <_calloc_r>
 8006964:	b160      	cbz	r0, 8006980 <_Balloc+0x64>
 8006966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800696a:	e00e      	b.n	800698a <_Balloc+0x6e>
 800696c:	2221      	movs	r2, #33	; 0x21
 800696e:	2104      	movs	r1, #4
 8006970:	4620      	mov	r0, r4
 8006972:	f000 fb51 	bl	8007018 <_calloc_r>
 8006976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006978:	60f0      	str	r0, [r6, #12]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1e4      	bne.n	800694a <_Balloc+0x2e>
 8006980:	2000      	movs	r0, #0
 8006982:	bd70      	pop	{r4, r5, r6, pc}
 8006984:	6802      	ldr	r2, [r0, #0]
 8006986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800698a:	2300      	movs	r3, #0
 800698c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006990:	e7f7      	b.n	8006982 <_Balloc+0x66>
 8006992:	bf00      	nop
 8006994:	080080f1 	.word	0x080080f1
 8006998:	08008178 	.word	0x08008178

0800699c <_Bfree>:
 800699c:	b570      	push	{r4, r5, r6, lr}
 800699e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80069a0:	4605      	mov	r5, r0
 80069a2:	460c      	mov	r4, r1
 80069a4:	b976      	cbnz	r6, 80069c4 <_Bfree+0x28>
 80069a6:	2010      	movs	r0, #16
 80069a8:	f7ff ffa2 	bl	80068f0 <malloc>
 80069ac:	4602      	mov	r2, r0
 80069ae:	6268      	str	r0, [r5, #36]	; 0x24
 80069b0:	b920      	cbnz	r0, 80069bc <_Bfree+0x20>
 80069b2:	4b09      	ldr	r3, [pc, #36]	; (80069d8 <_Bfree+0x3c>)
 80069b4:	4809      	ldr	r0, [pc, #36]	; (80069dc <_Bfree+0x40>)
 80069b6:	218a      	movs	r1, #138	; 0x8a
 80069b8:	f000 fd54 	bl	8007464 <__assert_func>
 80069bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069c0:	6006      	str	r6, [r0, #0]
 80069c2:	60c6      	str	r6, [r0, #12]
 80069c4:	b13c      	cbz	r4, 80069d6 <_Bfree+0x3a>
 80069c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80069c8:	6862      	ldr	r2, [r4, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069d0:	6021      	str	r1, [r4, #0]
 80069d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	080080f1 	.word	0x080080f1
 80069dc:	08008178 	.word	0x08008178

080069e0 <__multadd>:
 80069e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e4:	690e      	ldr	r6, [r1, #16]
 80069e6:	4607      	mov	r7, r0
 80069e8:	4698      	mov	r8, r3
 80069ea:	460c      	mov	r4, r1
 80069ec:	f101 0014 	add.w	r0, r1, #20
 80069f0:	2300      	movs	r3, #0
 80069f2:	6805      	ldr	r5, [r0, #0]
 80069f4:	b2a9      	uxth	r1, r5
 80069f6:	fb02 8101 	mla	r1, r2, r1, r8
 80069fa:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80069fe:	0c2d      	lsrs	r5, r5, #16
 8006a00:	fb02 c505 	mla	r5, r2, r5, ip
 8006a04:	b289      	uxth	r1, r1
 8006a06:	3301      	adds	r3, #1
 8006a08:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006a0c:	429e      	cmp	r6, r3
 8006a0e:	f840 1b04 	str.w	r1, [r0], #4
 8006a12:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006a16:	dcec      	bgt.n	80069f2 <__multadd+0x12>
 8006a18:	f1b8 0f00 	cmp.w	r8, #0
 8006a1c:	d022      	beq.n	8006a64 <__multadd+0x84>
 8006a1e:	68a3      	ldr	r3, [r4, #8]
 8006a20:	42b3      	cmp	r3, r6
 8006a22:	dc19      	bgt.n	8006a58 <__multadd+0x78>
 8006a24:	6861      	ldr	r1, [r4, #4]
 8006a26:	4638      	mov	r0, r7
 8006a28:	3101      	adds	r1, #1
 8006a2a:	f7ff ff77 	bl	800691c <_Balloc>
 8006a2e:	4605      	mov	r5, r0
 8006a30:	b928      	cbnz	r0, 8006a3e <__multadd+0x5e>
 8006a32:	4602      	mov	r2, r0
 8006a34:	4b0d      	ldr	r3, [pc, #52]	; (8006a6c <__multadd+0x8c>)
 8006a36:	480e      	ldr	r0, [pc, #56]	; (8006a70 <__multadd+0x90>)
 8006a38:	21b5      	movs	r1, #181	; 0xb5
 8006a3a:	f000 fd13 	bl	8007464 <__assert_func>
 8006a3e:	6922      	ldr	r2, [r4, #16]
 8006a40:	3202      	adds	r2, #2
 8006a42:	f104 010c 	add.w	r1, r4, #12
 8006a46:	0092      	lsls	r2, r2, #2
 8006a48:	300c      	adds	r0, #12
 8006a4a:	f7ff ff59 	bl	8006900 <memcpy>
 8006a4e:	4621      	mov	r1, r4
 8006a50:	4638      	mov	r0, r7
 8006a52:	f7ff ffa3 	bl	800699c <_Bfree>
 8006a56:	462c      	mov	r4, r5
 8006a58:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006a5c:	3601      	adds	r6, #1
 8006a5e:	f8c3 8014 	str.w	r8, [r3, #20]
 8006a62:	6126      	str	r6, [r4, #16]
 8006a64:	4620      	mov	r0, r4
 8006a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a6a:	bf00      	nop
 8006a6c:	08008167 	.word	0x08008167
 8006a70:	08008178 	.word	0x08008178

08006a74 <__hi0bits>:
 8006a74:	0c03      	lsrs	r3, r0, #16
 8006a76:	041b      	lsls	r3, r3, #16
 8006a78:	b9d3      	cbnz	r3, 8006ab0 <__hi0bits+0x3c>
 8006a7a:	0400      	lsls	r0, r0, #16
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a82:	bf04      	itt	eq
 8006a84:	0200      	lsleq	r0, r0, #8
 8006a86:	3308      	addeq	r3, #8
 8006a88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a8c:	bf04      	itt	eq
 8006a8e:	0100      	lsleq	r0, r0, #4
 8006a90:	3304      	addeq	r3, #4
 8006a92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a96:	bf04      	itt	eq
 8006a98:	0080      	lsleq	r0, r0, #2
 8006a9a:	3302      	addeq	r3, #2
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	db05      	blt.n	8006aac <__hi0bits+0x38>
 8006aa0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006aa4:	f103 0301 	add.w	r3, r3, #1
 8006aa8:	bf08      	it	eq
 8006aaa:	2320      	moveq	r3, #32
 8006aac:	4618      	mov	r0, r3
 8006aae:	4770      	bx	lr
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	e7e4      	b.n	8006a7e <__hi0bits+0xa>

08006ab4 <__lo0bits>:
 8006ab4:	6803      	ldr	r3, [r0, #0]
 8006ab6:	f013 0207 	ands.w	r2, r3, #7
 8006aba:	4601      	mov	r1, r0
 8006abc:	d00b      	beq.n	8006ad6 <__lo0bits+0x22>
 8006abe:	07da      	lsls	r2, r3, #31
 8006ac0:	d424      	bmi.n	8006b0c <__lo0bits+0x58>
 8006ac2:	0798      	lsls	r0, r3, #30
 8006ac4:	bf49      	itett	mi
 8006ac6:	085b      	lsrmi	r3, r3, #1
 8006ac8:	089b      	lsrpl	r3, r3, #2
 8006aca:	2001      	movmi	r0, #1
 8006acc:	600b      	strmi	r3, [r1, #0]
 8006ace:	bf5c      	itt	pl
 8006ad0:	600b      	strpl	r3, [r1, #0]
 8006ad2:	2002      	movpl	r0, #2
 8006ad4:	4770      	bx	lr
 8006ad6:	b298      	uxth	r0, r3
 8006ad8:	b9b0      	cbnz	r0, 8006b08 <__lo0bits+0x54>
 8006ada:	0c1b      	lsrs	r3, r3, #16
 8006adc:	2010      	movs	r0, #16
 8006ade:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ae2:	bf04      	itt	eq
 8006ae4:	0a1b      	lsreq	r3, r3, #8
 8006ae6:	3008      	addeq	r0, #8
 8006ae8:	071a      	lsls	r2, r3, #28
 8006aea:	bf04      	itt	eq
 8006aec:	091b      	lsreq	r3, r3, #4
 8006aee:	3004      	addeq	r0, #4
 8006af0:	079a      	lsls	r2, r3, #30
 8006af2:	bf04      	itt	eq
 8006af4:	089b      	lsreq	r3, r3, #2
 8006af6:	3002      	addeq	r0, #2
 8006af8:	07da      	lsls	r2, r3, #31
 8006afa:	d403      	bmi.n	8006b04 <__lo0bits+0x50>
 8006afc:	085b      	lsrs	r3, r3, #1
 8006afe:	f100 0001 	add.w	r0, r0, #1
 8006b02:	d005      	beq.n	8006b10 <__lo0bits+0x5c>
 8006b04:	600b      	str	r3, [r1, #0]
 8006b06:	4770      	bx	lr
 8006b08:	4610      	mov	r0, r2
 8006b0a:	e7e8      	b.n	8006ade <__lo0bits+0x2a>
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	4770      	bx	lr
 8006b10:	2020      	movs	r0, #32
 8006b12:	4770      	bx	lr

08006b14 <__i2b>:
 8006b14:	b510      	push	{r4, lr}
 8006b16:	460c      	mov	r4, r1
 8006b18:	2101      	movs	r1, #1
 8006b1a:	f7ff feff 	bl	800691c <_Balloc>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	b928      	cbnz	r0, 8006b2e <__i2b+0x1a>
 8006b22:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <__i2b+0x24>)
 8006b24:	4805      	ldr	r0, [pc, #20]	; (8006b3c <__i2b+0x28>)
 8006b26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006b2a:	f000 fc9b 	bl	8007464 <__assert_func>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	6144      	str	r4, [r0, #20]
 8006b32:	6103      	str	r3, [r0, #16]
 8006b34:	bd10      	pop	{r4, pc}
 8006b36:	bf00      	nop
 8006b38:	08008167 	.word	0x08008167
 8006b3c:	08008178 	.word	0x08008178

08006b40 <__multiply>:
 8006b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b44:	4614      	mov	r4, r2
 8006b46:	690a      	ldr	r2, [r1, #16]
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	bfb8      	it	lt
 8006b4e:	460b      	movlt	r3, r1
 8006b50:	460d      	mov	r5, r1
 8006b52:	bfbc      	itt	lt
 8006b54:	4625      	movlt	r5, r4
 8006b56:	461c      	movlt	r4, r3
 8006b58:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006b5c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006b60:	68ab      	ldr	r3, [r5, #8]
 8006b62:	6869      	ldr	r1, [r5, #4]
 8006b64:	eb0a 0709 	add.w	r7, sl, r9
 8006b68:	42bb      	cmp	r3, r7
 8006b6a:	b085      	sub	sp, #20
 8006b6c:	bfb8      	it	lt
 8006b6e:	3101      	addlt	r1, #1
 8006b70:	f7ff fed4 	bl	800691c <_Balloc>
 8006b74:	b930      	cbnz	r0, 8006b84 <__multiply+0x44>
 8006b76:	4602      	mov	r2, r0
 8006b78:	4b42      	ldr	r3, [pc, #264]	; (8006c84 <__multiply+0x144>)
 8006b7a:	4843      	ldr	r0, [pc, #268]	; (8006c88 <__multiply+0x148>)
 8006b7c:	f240 115d 	movw	r1, #349	; 0x15d
 8006b80:	f000 fc70 	bl	8007464 <__assert_func>
 8006b84:	f100 0614 	add.w	r6, r0, #20
 8006b88:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006b8c:	4633      	mov	r3, r6
 8006b8e:	2200      	movs	r2, #0
 8006b90:	4543      	cmp	r3, r8
 8006b92:	d31e      	bcc.n	8006bd2 <__multiply+0x92>
 8006b94:	f105 0c14 	add.w	ip, r5, #20
 8006b98:	f104 0314 	add.w	r3, r4, #20
 8006b9c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006ba0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8006ba4:	9202      	str	r2, [sp, #8]
 8006ba6:	ebac 0205 	sub.w	r2, ip, r5
 8006baa:	3a15      	subs	r2, #21
 8006bac:	f022 0203 	bic.w	r2, r2, #3
 8006bb0:	3204      	adds	r2, #4
 8006bb2:	f105 0115 	add.w	r1, r5, #21
 8006bb6:	458c      	cmp	ip, r1
 8006bb8:	bf38      	it	cc
 8006bba:	2204      	movcc	r2, #4
 8006bbc:	9201      	str	r2, [sp, #4]
 8006bbe:	9a02      	ldr	r2, [sp, #8]
 8006bc0:	9303      	str	r3, [sp, #12]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d808      	bhi.n	8006bd8 <__multiply+0x98>
 8006bc6:	2f00      	cmp	r7, #0
 8006bc8:	dc55      	bgt.n	8006c76 <__multiply+0x136>
 8006bca:	6107      	str	r7, [r0, #16]
 8006bcc:	b005      	add	sp, #20
 8006bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd2:	f843 2b04 	str.w	r2, [r3], #4
 8006bd6:	e7db      	b.n	8006b90 <__multiply+0x50>
 8006bd8:	f8b3 a000 	ldrh.w	sl, [r3]
 8006bdc:	f1ba 0f00 	cmp.w	sl, #0
 8006be0:	d020      	beq.n	8006c24 <__multiply+0xe4>
 8006be2:	f105 0e14 	add.w	lr, r5, #20
 8006be6:	46b1      	mov	r9, r6
 8006be8:	2200      	movs	r2, #0
 8006bea:	f85e 4b04 	ldr.w	r4, [lr], #4
 8006bee:	f8d9 b000 	ldr.w	fp, [r9]
 8006bf2:	b2a1      	uxth	r1, r4
 8006bf4:	fa1f fb8b 	uxth.w	fp, fp
 8006bf8:	fb0a b101 	mla	r1, sl, r1, fp
 8006bfc:	4411      	add	r1, r2
 8006bfe:	f8d9 2000 	ldr.w	r2, [r9]
 8006c02:	0c24      	lsrs	r4, r4, #16
 8006c04:	0c12      	lsrs	r2, r2, #16
 8006c06:	fb0a 2404 	mla	r4, sl, r4, r2
 8006c0a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8006c0e:	b289      	uxth	r1, r1
 8006c10:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8006c14:	45f4      	cmp	ip, lr
 8006c16:	f849 1b04 	str.w	r1, [r9], #4
 8006c1a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8006c1e:	d8e4      	bhi.n	8006bea <__multiply+0xaa>
 8006c20:	9901      	ldr	r1, [sp, #4]
 8006c22:	5072      	str	r2, [r6, r1]
 8006c24:	9a03      	ldr	r2, [sp, #12]
 8006c26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c2a:	3304      	adds	r3, #4
 8006c2c:	f1b9 0f00 	cmp.w	r9, #0
 8006c30:	d01f      	beq.n	8006c72 <__multiply+0x132>
 8006c32:	6834      	ldr	r4, [r6, #0]
 8006c34:	f105 0114 	add.w	r1, r5, #20
 8006c38:	46b6      	mov	lr, r6
 8006c3a:	f04f 0a00 	mov.w	sl, #0
 8006c3e:	880a      	ldrh	r2, [r1, #0]
 8006c40:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006c44:	fb09 b202 	mla	r2, r9, r2, fp
 8006c48:	4492      	add	sl, r2
 8006c4a:	b2a4      	uxth	r4, r4
 8006c4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006c50:	f84e 4b04 	str.w	r4, [lr], #4
 8006c54:	f851 4b04 	ldr.w	r4, [r1], #4
 8006c58:	f8be 2000 	ldrh.w	r2, [lr]
 8006c5c:	0c24      	lsrs	r4, r4, #16
 8006c5e:	fb09 2404 	mla	r4, r9, r4, r2
 8006c62:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8006c66:	458c      	cmp	ip, r1
 8006c68:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006c6c:	d8e7      	bhi.n	8006c3e <__multiply+0xfe>
 8006c6e:	9a01      	ldr	r2, [sp, #4]
 8006c70:	50b4      	str	r4, [r6, r2]
 8006c72:	3604      	adds	r6, #4
 8006c74:	e7a3      	b.n	8006bbe <__multiply+0x7e>
 8006c76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d1a5      	bne.n	8006bca <__multiply+0x8a>
 8006c7e:	3f01      	subs	r7, #1
 8006c80:	e7a1      	b.n	8006bc6 <__multiply+0x86>
 8006c82:	bf00      	nop
 8006c84:	08008167 	.word	0x08008167
 8006c88:	08008178 	.word	0x08008178

08006c8c <__pow5mult>:
 8006c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c90:	4615      	mov	r5, r2
 8006c92:	f012 0203 	ands.w	r2, r2, #3
 8006c96:	4606      	mov	r6, r0
 8006c98:	460f      	mov	r7, r1
 8006c9a:	d007      	beq.n	8006cac <__pow5mult+0x20>
 8006c9c:	4c25      	ldr	r4, [pc, #148]	; (8006d34 <__pow5mult+0xa8>)
 8006c9e:	3a01      	subs	r2, #1
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ca6:	f7ff fe9b 	bl	80069e0 <__multadd>
 8006caa:	4607      	mov	r7, r0
 8006cac:	10ad      	asrs	r5, r5, #2
 8006cae:	d03d      	beq.n	8006d2c <__pow5mult+0xa0>
 8006cb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006cb2:	b97c      	cbnz	r4, 8006cd4 <__pow5mult+0x48>
 8006cb4:	2010      	movs	r0, #16
 8006cb6:	f7ff fe1b 	bl	80068f0 <malloc>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	6270      	str	r0, [r6, #36]	; 0x24
 8006cbe:	b928      	cbnz	r0, 8006ccc <__pow5mult+0x40>
 8006cc0:	4b1d      	ldr	r3, [pc, #116]	; (8006d38 <__pow5mult+0xac>)
 8006cc2:	481e      	ldr	r0, [pc, #120]	; (8006d3c <__pow5mult+0xb0>)
 8006cc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006cc8:	f000 fbcc 	bl	8007464 <__assert_func>
 8006ccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cd0:	6004      	str	r4, [r0, #0]
 8006cd2:	60c4      	str	r4, [r0, #12]
 8006cd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006cd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cdc:	b94c      	cbnz	r4, 8006cf2 <__pow5mult+0x66>
 8006cde:	f240 2171 	movw	r1, #625	; 0x271
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f7ff ff16 	bl	8006b14 <__i2b>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cee:	4604      	mov	r4, r0
 8006cf0:	6003      	str	r3, [r0, #0]
 8006cf2:	f04f 0900 	mov.w	r9, #0
 8006cf6:	07eb      	lsls	r3, r5, #31
 8006cf8:	d50a      	bpl.n	8006d10 <__pow5mult+0x84>
 8006cfa:	4639      	mov	r1, r7
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f7ff ff1e 	bl	8006b40 <__multiply>
 8006d04:	4639      	mov	r1, r7
 8006d06:	4680      	mov	r8, r0
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7ff fe47 	bl	800699c <_Bfree>
 8006d0e:	4647      	mov	r7, r8
 8006d10:	106d      	asrs	r5, r5, #1
 8006d12:	d00b      	beq.n	8006d2c <__pow5mult+0xa0>
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	b938      	cbnz	r0, 8006d28 <__pow5mult+0x9c>
 8006d18:	4622      	mov	r2, r4
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	f7ff ff0f 	bl	8006b40 <__multiply>
 8006d22:	6020      	str	r0, [r4, #0]
 8006d24:	f8c0 9000 	str.w	r9, [r0]
 8006d28:	4604      	mov	r4, r0
 8006d2a:	e7e4      	b.n	8006cf6 <__pow5mult+0x6a>
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d32:	bf00      	nop
 8006d34:	080082c8 	.word	0x080082c8
 8006d38:	080080f1 	.word	0x080080f1
 8006d3c:	08008178 	.word	0x08008178

08006d40 <__lshift>:
 8006d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d44:	460c      	mov	r4, r1
 8006d46:	6849      	ldr	r1, [r1, #4]
 8006d48:	6923      	ldr	r3, [r4, #16]
 8006d4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d4e:	68a3      	ldr	r3, [r4, #8]
 8006d50:	4607      	mov	r7, r0
 8006d52:	4691      	mov	r9, r2
 8006d54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d58:	f108 0601 	add.w	r6, r8, #1
 8006d5c:	42b3      	cmp	r3, r6
 8006d5e:	db0b      	blt.n	8006d78 <__lshift+0x38>
 8006d60:	4638      	mov	r0, r7
 8006d62:	f7ff fddb 	bl	800691c <_Balloc>
 8006d66:	4605      	mov	r5, r0
 8006d68:	b948      	cbnz	r0, 8006d7e <__lshift+0x3e>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	4b28      	ldr	r3, [pc, #160]	; (8006e10 <__lshift+0xd0>)
 8006d6e:	4829      	ldr	r0, [pc, #164]	; (8006e14 <__lshift+0xd4>)
 8006d70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006d74:	f000 fb76 	bl	8007464 <__assert_func>
 8006d78:	3101      	adds	r1, #1
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	e7ee      	b.n	8006d5c <__lshift+0x1c>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	f100 0114 	add.w	r1, r0, #20
 8006d84:	f100 0210 	add.w	r2, r0, #16
 8006d88:	4618      	mov	r0, r3
 8006d8a:	4553      	cmp	r3, sl
 8006d8c:	db33      	blt.n	8006df6 <__lshift+0xb6>
 8006d8e:	6920      	ldr	r0, [r4, #16]
 8006d90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d94:	f104 0314 	add.w	r3, r4, #20
 8006d98:	f019 091f 	ands.w	r9, r9, #31
 8006d9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006da0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006da4:	d02b      	beq.n	8006dfe <__lshift+0xbe>
 8006da6:	f1c9 0e20 	rsb	lr, r9, #32
 8006daa:	468a      	mov	sl, r1
 8006dac:	2200      	movs	r2, #0
 8006dae:	6818      	ldr	r0, [r3, #0]
 8006db0:	fa00 f009 	lsl.w	r0, r0, r9
 8006db4:	4302      	orrs	r2, r0
 8006db6:	f84a 2b04 	str.w	r2, [sl], #4
 8006dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dbe:	459c      	cmp	ip, r3
 8006dc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006dc4:	d8f3      	bhi.n	8006dae <__lshift+0x6e>
 8006dc6:	ebac 0304 	sub.w	r3, ip, r4
 8006dca:	3b15      	subs	r3, #21
 8006dcc:	f023 0303 	bic.w	r3, r3, #3
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	f104 0015 	add.w	r0, r4, #21
 8006dd6:	4584      	cmp	ip, r0
 8006dd8:	bf38      	it	cc
 8006dda:	2304      	movcc	r3, #4
 8006ddc:	50ca      	str	r2, [r1, r3]
 8006dde:	b10a      	cbz	r2, 8006de4 <__lshift+0xa4>
 8006de0:	f108 0602 	add.w	r6, r8, #2
 8006de4:	3e01      	subs	r6, #1
 8006de6:	4638      	mov	r0, r7
 8006de8:	612e      	str	r6, [r5, #16]
 8006dea:	4621      	mov	r1, r4
 8006dec:	f7ff fdd6 	bl	800699c <_Bfree>
 8006df0:	4628      	mov	r0, r5
 8006df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006df6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	e7c5      	b.n	8006d8a <__lshift+0x4a>
 8006dfe:	3904      	subs	r1, #4
 8006e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e04:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e08:	459c      	cmp	ip, r3
 8006e0a:	d8f9      	bhi.n	8006e00 <__lshift+0xc0>
 8006e0c:	e7ea      	b.n	8006de4 <__lshift+0xa4>
 8006e0e:	bf00      	nop
 8006e10:	08008167 	.word	0x08008167
 8006e14:	08008178 	.word	0x08008178

08006e18 <__mcmp>:
 8006e18:	b530      	push	{r4, r5, lr}
 8006e1a:	6902      	ldr	r2, [r0, #16]
 8006e1c:	690c      	ldr	r4, [r1, #16]
 8006e1e:	1b12      	subs	r2, r2, r4
 8006e20:	d10e      	bne.n	8006e40 <__mcmp+0x28>
 8006e22:	f100 0314 	add.w	r3, r0, #20
 8006e26:	3114      	adds	r1, #20
 8006e28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e38:	42a5      	cmp	r5, r4
 8006e3a:	d003      	beq.n	8006e44 <__mcmp+0x2c>
 8006e3c:	d305      	bcc.n	8006e4a <__mcmp+0x32>
 8006e3e:	2201      	movs	r2, #1
 8006e40:	4610      	mov	r0, r2
 8006e42:	bd30      	pop	{r4, r5, pc}
 8006e44:	4283      	cmp	r3, r0
 8006e46:	d3f3      	bcc.n	8006e30 <__mcmp+0x18>
 8006e48:	e7fa      	b.n	8006e40 <__mcmp+0x28>
 8006e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4e:	e7f7      	b.n	8006e40 <__mcmp+0x28>

08006e50 <__mdiff>:
 8006e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e54:	460c      	mov	r4, r1
 8006e56:	4606      	mov	r6, r0
 8006e58:	4611      	mov	r1, r2
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	4617      	mov	r7, r2
 8006e5e:	f7ff ffdb 	bl	8006e18 <__mcmp>
 8006e62:	1e05      	subs	r5, r0, #0
 8006e64:	d110      	bne.n	8006e88 <__mdiff+0x38>
 8006e66:	4629      	mov	r1, r5
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7ff fd57 	bl	800691c <_Balloc>
 8006e6e:	b930      	cbnz	r0, 8006e7e <__mdiff+0x2e>
 8006e70:	4b39      	ldr	r3, [pc, #228]	; (8006f58 <__mdiff+0x108>)
 8006e72:	4602      	mov	r2, r0
 8006e74:	f240 2132 	movw	r1, #562	; 0x232
 8006e78:	4838      	ldr	r0, [pc, #224]	; (8006f5c <__mdiff+0x10c>)
 8006e7a:	f000 faf3 	bl	8007464 <__assert_func>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e88:	bfa4      	itt	ge
 8006e8a:	463b      	movge	r3, r7
 8006e8c:	4627      	movge	r7, r4
 8006e8e:	4630      	mov	r0, r6
 8006e90:	6879      	ldr	r1, [r7, #4]
 8006e92:	bfa6      	itte	ge
 8006e94:	461c      	movge	r4, r3
 8006e96:	2500      	movge	r5, #0
 8006e98:	2501      	movlt	r5, #1
 8006e9a:	f7ff fd3f 	bl	800691c <_Balloc>
 8006e9e:	b920      	cbnz	r0, 8006eaa <__mdiff+0x5a>
 8006ea0:	4b2d      	ldr	r3, [pc, #180]	; (8006f58 <__mdiff+0x108>)
 8006ea2:	4602      	mov	r2, r0
 8006ea4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006ea8:	e7e6      	b.n	8006e78 <__mdiff+0x28>
 8006eaa:	693e      	ldr	r6, [r7, #16]
 8006eac:	60c5      	str	r5, [r0, #12]
 8006eae:	6925      	ldr	r5, [r4, #16]
 8006eb0:	f107 0114 	add.w	r1, r7, #20
 8006eb4:	f104 0914 	add.w	r9, r4, #20
 8006eb8:	f100 0e14 	add.w	lr, r0, #20
 8006ebc:	f107 0210 	add.w	r2, r7, #16
 8006ec0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006ec4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006ec8:	46f2      	mov	sl, lr
 8006eca:	2700      	movs	r7, #0
 8006ecc:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ed0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ed4:	fa1f f883 	uxth.w	r8, r3
 8006ed8:	fa17 f78b 	uxtah	r7, r7, fp
 8006edc:	0c1b      	lsrs	r3, r3, #16
 8006ede:	eba7 0808 	sub.w	r8, r7, r8
 8006ee2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ee6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006eea:	fa1f f888 	uxth.w	r8, r8
 8006eee:	141f      	asrs	r7, r3, #16
 8006ef0:	454d      	cmp	r5, r9
 8006ef2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ef6:	f84a 3b04 	str.w	r3, [sl], #4
 8006efa:	d8e7      	bhi.n	8006ecc <__mdiff+0x7c>
 8006efc:	1b2b      	subs	r3, r5, r4
 8006efe:	3b15      	subs	r3, #21
 8006f00:	f023 0303 	bic.w	r3, r3, #3
 8006f04:	3304      	adds	r3, #4
 8006f06:	3415      	adds	r4, #21
 8006f08:	42a5      	cmp	r5, r4
 8006f0a:	bf38      	it	cc
 8006f0c:	2304      	movcc	r3, #4
 8006f0e:	4419      	add	r1, r3
 8006f10:	4473      	add	r3, lr
 8006f12:	469e      	mov	lr, r3
 8006f14:	460d      	mov	r5, r1
 8006f16:	4565      	cmp	r5, ip
 8006f18:	d30e      	bcc.n	8006f38 <__mdiff+0xe8>
 8006f1a:	f10c 0203 	add.w	r2, ip, #3
 8006f1e:	1a52      	subs	r2, r2, r1
 8006f20:	f022 0203 	bic.w	r2, r2, #3
 8006f24:	3903      	subs	r1, #3
 8006f26:	458c      	cmp	ip, r1
 8006f28:	bf38      	it	cc
 8006f2a:	2200      	movcc	r2, #0
 8006f2c:	441a      	add	r2, r3
 8006f2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006f32:	b17b      	cbz	r3, 8006f54 <__mdiff+0x104>
 8006f34:	6106      	str	r6, [r0, #16]
 8006f36:	e7a5      	b.n	8006e84 <__mdiff+0x34>
 8006f38:	f855 8b04 	ldr.w	r8, [r5], #4
 8006f3c:	fa17 f488 	uxtah	r4, r7, r8
 8006f40:	1422      	asrs	r2, r4, #16
 8006f42:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006f46:	b2a4      	uxth	r4, r4
 8006f48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006f4c:	f84e 4b04 	str.w	r4, [lr], #4
 8006f50:	1417      	asrs	r7, r2, #16
 8006f52:	e7e0      	b.n	8006f16 <__mdiff+0xc6>
 8006f54:	3e01      	subs	r6, #1
 8006f56:	e7ea      	b.n	8006f2e <__mdiff+0xde>
 8006f58:	08008167 	.word	0x08008167
 8006f5c:	08008178 	.word	0x08008178

08006f60 <__d2b>:
 8006f60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f64:	4689      	mov	r9, r1
 8006f66:	2101      	movs	r1, #1
 8006f68:	ec57 6b10 	vmov	r6, r7, d0
 8006f6c:	4690      	mov	r8, r2
 8006f6e:	f7ff fcd5 	bl	800691c <_Balloc>
 8006f72:	4604      	mov	r4, r0
 8006f74:	b930      	cbnz	r0, 8006f84 <__d2b+0x24>
 8006f76:	4602      	mov	r2, r0
 8006f78:	4b25      	ldr	r3, [pc, #148]	; (8007010 <__d2b+0xb0>)
 8006f7a:	4826      	ldr	r0, [pc, #152]	; (8007014 <__d2b+0xb4>)
 8006f7c:	f240 310a 	movw	r1, #778	; 0x30a
 8006f80:	f000 fa70 	bl	8007464 <__assert_func>
 8006f84:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006f88:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f8c:	bb35      	cbnz	r5, 8006fdc <__d2b+0x7c>
 8006f8e:	2e00      	cmp	r6, #0
 8006f90:	9301      	str	r3, [sp, #4]
 8006f92:	d028      	beq.n	8006fe6 <__d2b+0x86>
 8006f94:	4668      	mov	r0, sp
 8006f96:	9600      	str	r6, [sp, #0]
 8006f98:	f7ff fd8c 	bl	8006ab4 <__lo0bits>
 8006f9c:	9900      	ldr	r1, [sp, #0]
 8006f9e:	b300      	cbz	r0, 8006fe2 <__d2b+0x82>
 8006fa0:	9a01      	ldr	r2, [sp, #4]
 8006fa2:	f1c0 0320 	rsb	r3, r0, #32
 8006fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8006faa:	430b      	orrs	r3, r1
 8006fac:	40c2      	lsrs	r2, r0
 8006fae:	6163      	str	r3, [r4, #20]
 8006fb0:	9201      	str	r2, [sp, #4]
 8006fb2:	9b01      	ldr	r3, [sp, #4]
 8006fb4:	61a3      	str	r3, [r4, #24]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	bf14      	ite	ne
 8006fba:	2202      	movne	r2, #2
 8006fbc:	2201      	moveq	r2, #1
 8006fbe:	6122      	str	r2, [r4, #16]
 8006fc0:	b1d5      	cbz	r5, 8006ff8 <__d2b+0x98>
 8006fc2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006fc6:	4405      	add	r5, r0
 8006fc8:	f8c9 5000 	str.w	r5, [r9]
 8006fcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fd0:	f8c8 0000 	str.w	r0, [r8]
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	b003      	add	sp, #12
 8006fd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fe0:	e7d5      	b.n	8006f8e <__d2b+0x2e>
 8006fe2:	6161      	str	r1, [r4, #20]
 8006fe4:	e7e5      	b.n	8006fb2 <__d2b+0x52>
 8006fe6:	a801      	add	r0, sp, #4
 8006fe8:	f7ff fd64 	bl	8006ab4 <__lo0bits>
 8006fec:	9b01      	ldr	r3, [sp, #4]
 8006fee:	6163      	str	r3, [r4, #20]
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	6122      	str	r2, [r4, #16]
 8006ff4:	3020      	adds	r0, #32
 8006ff6:	e7e3      	b.n	8006fc0 <__d2b+0x60>
 8006ff8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ffc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007000:	f8c9 0000 	str.w	r0, [r9]
 8007004:	6918      	ldr	r0, [r3, #16]
 8007006:	f7ff fd35 	bl	8006a74 <__hi0bits>
 800700a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800700e:	e7df      	b.n	8006fd0 <__d2b+0x70>
 8007010:	08008167 	.word	0x08008167
 8007014:	08008178 	.word	0x08008178

08007018 <_calloc_r>:
 8007018:	b513      	push	{r0, r1, r4, lr}
 800701a:	434a      	muls	r2, r1
 800701c:	4611      	mov	r1, r2
 800701e:	9201      	str	r2, [sp, #4]
 8007020:	f000 f85a 	bl	80070d8 <_malloc_r>
 8007024:	4604      	mov	r4, r0
 8007026:	b118      	cbz	r0, 8007030 <_calloc_r+0x18>
 8007028:	9a01      	ldr	r2, [sp, #4]
 800702a:	2100      	movs	r1, #0
 800702c:	f7fe f952 	bl	80052d4 <memset>
 8007030:	4620      	mov	r0, r4
 8007032:	b002      	add	sp, #8
 8007034:	bd10      	pop	{r4, pc}
	...

08007038 <_free_r>:
 8007038:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800703a:	2900      	cmp	r1, #0
 800703c:	d048      	beq.n	80070d0 <_free_r+0x98>
 800703e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007042:	9001      	str	r0, [sp, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	f1a1 0404 	sub.w	r4, r1, #4
 800704a:	bfb8      	it	lt
 800704c:	18e4      	addlt	r4, r4, r3
 800704e:	f000 fa65 	bl	800751c <__malloc_lock>
 8007052:	4a20      	ldr	r2, [pc, #128]	; (80070d4 <_free_r+0x9c>)
 8007054:	9801      	ldr	r0, [sp, #4]
 8007056:	6813      	ldr	r3, [r2, #0]
 8007058:	4615      	mov	r5, r2
 800705a:	b933      	cbnz	r3, 800706a <_free_r+0x32>
 800705c:	6063      	str	r3, [r4, #4]
 800705e:	6014      	str	r4, [r2, #0]
 8007060:	b003      	add	sp, #12
 8007062:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007066:	f000 ba5f 	b.w	8007528 <__malloc_unlock>
 800706a:	42a3      	cmp	r3, r4
 800706c:	d90b      	bls.n	8007086 <_free_r+0x4e>
 800706e:	6821      	ldr	r1, [r4, #0]
 8007070:	1862      	adds	r2, r4, r1
 8007072:	4293      	cmp	r3, r2
 8007074:	bf04      	itt	eq
 8007076:	681a      	ldreq	r2, [r3, #0]
 8007078:	685b      	ldreq	r3, [r3, #4]
 800707a:	6063      	str	r3, [r4, #4]
 800707c:	bf04      	itt	eq
 800707e:	1852      	addeq	r2, r2, r1
 8007080:	6022      	streq	r2, [r4, #0]
 8007082:	602c      	str	r4, [r5, #0]
 8007084:	e7ec      	b.n	8007060 <_free_r+0x28>
 8007086:	461a      	mov	r2, r3
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	b10b      	cbz	r3, 8007090 <_free_r+0x58>
 800708c:	42a3      	cmp	r3, r4
 800708e:	d9fa      	bls.n	8007086 <_free_r+0x4e>
 8007090:	6811      	ldr	r1, [r2, #0]
 8007092:	1855      	adds	r5, r2, r1
 8007094:	42a5      	cmp	r5, r4
 8007096:	d10b      	bne.n	80070b0 <_free_r+0x78>
 8007098:	6824      	ldr	r4, [r4, #0]
 800709a:	4421      	add	r1, r4
 800709c:	1854      	adds	r4, r2, r1
 800709e:	42a3      	cmp	r3, r4
 80070a0:	6011      	str	r1, [r2, #0]
 80070a2:	d1dd      	bne.n	8007060 <_free_r+0x28>
 80070a4:	681c      	ldr	r4, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	6053      	str	r3, [r2, #4]
 80070aa:	4421      	add	r1, r4
 80070ac:	6011      	str	r1, [r2, #0]
 80070ae:	e7d7      	b.n	8007060 <_free_r+0x28>
 80070b0:	d902      	bls.n	80070b8 <_free_r+0x80>
 80070b2:	230c      	movs	r3, #12
 80070b4:	6003      	str	r3, [r0, #0]
 80070b6:	e7d3      	b.n	8007060 <_free_r+0x28>
 80070b8:	6825      	ldr	r5, [r4, #0]
 80070ba:	1961      	adds	r1, r4, r5
 80070bc:	428b      	cmp	r3, r1
 80070be:	bf04      	itt	eq
 80070c0:	6819      	ldreq	r1, [r3, #0]
 80070c2:	685b      	ldreq	r3, [r3, #4]
 80070c4:	6063      	str	r3, [r4, #4]
 80070c6:	bf04      	itt	eq
 80070c8:	1949      	addeq	r1, r1, r5
 80070ca:	6021      	streq	r1, [r4, #0]
 80070cc:	6054      	str	r4, [r2, #4]
 80070ce:	e7c7      	b.n	8007060 <_free_r+0x28>
 80070d0:	b003      	add	sp, #12
 80070d2:	bd30      	pop	{r4, r5, pc}
 80070d4:	20000214 	.word	0x20000214

080070d8 <_malloc_r>:
 80070d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070da:	1ccd      	adds	r5, r1, #3
 80070dc:	f025 0503 	bic.w	r5, r5, #3
 80070e0:	3508      	adds	r5, #8
 80070e2:	2d0c      	cmp	r5, #12
 80070e4:	bf38      	it	cc
 80070e6:	250c      	movcc	r5, #12
 80070e8:	2d00      	cmp	r5, #0
 80070ea:	4606      	mov	r6, r0
 80070ec:	db01      	blt.n	80070f2 <_malloc_r+0x1a>
 80070ee:	42a9      	cmp	r1, r5
 80070f0:	d903      	bls.n	80070fa <_malloc_r+0x22>
 80070f2:	230c      	movs	r3, #12
 80070f4:	6033      	str	r3, [r6, #0]
 80070f6:	2000      	movs	r0, #0
 80070f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070fa:	f000 fa0f 	bl	800751c <__malloc_lock>
 80070fe:	4921      	ldr	r1, [pc, #132]	; (8007184 <_malloc_r+0xac>)
 8007100:	680a      	ldr	r2, [r1, #0]
 8007102:	4614      	mov	r4, r2
 8007104:	b99c      	cbnz	r4, 800712e <_malloc_r+0x56>
 8007106:	4f20      	ldr	r7, [pc, #128]	; (8007188 <_malloc_r+0xb0>)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	b923      	cbnz	r3, 8007116 <_malloc_r+0x3e>
 800710c:	4621      	mov	r1, r4
 800710e:	4630      	mov	r0, r6
 8007110:	f000 f998 	bl	8007444 <_sbrk_r>
 8007114:	6038      	str	r0, [r7, #0]
 8007116:	4629      	mov	r1, r5
 8007118:	4630      	mov	r0, r6
 800711a:	f000 f993 	bl	8007444 <_sbrk_r>
 800711e:	1c43      	adds	r3, r0, #1
 8007120:	d123      	bne.n	800716a <_malloc_r+0x92>
 8007122:	230c      	movs	r3, #12
 8007124:	6033      	str	r3, [r6, #0]
 8007126:	4630      	mov	r0, r6
 8007128:	f000 f9fe 	bl	8007528 <__malloc_unlock>
 800712c:	e7e3      	b.n	80070f6 <_malloc_r+0x1e>
 800712e:	6823      	ldr	r3, [r4, #0]
 8007130:	1b5b      	subs	r3, r3, r5
 8007132:	d417      	bmi.n	8007164 <_malloc_r+0x8c>
 8007134:	2b0b      	cmp	r3, #11
 8007136:	d903      	bls.n	8007140 <_malloc_r+0x68>
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	441c      	add	r4, r3
 800713c:	6025      	str	r5, [r4, #0]
 800713e:	e004      	b.n	800714a <_malloc_r+0x72>
 8007140:	6863      	ldr	r3, [r4, #4]
 8007142:	42a2      	cmp	r2, r4
 8007144:	bf0c      	ite	eq
 8007146:	600b      	streq	r3, [r1, #0]
 8007148:	6053      	strne	r3, [r2, #4]
 800714a:	4630      	mov	r0, r6
 800714c:	f000 f9ec 	bl	8007528 <__malloc_unlock>
 8007150:	f104 000b 	add.w	r0, r4, #11
 8007154:	1d23      	adds	r3, r4, #4
 8007156:	f020 0007 	bic.w	r0, r0, #7
 800715a:	1ac2      	subs	r2, r0, r3
 800715c:	d0cc      	beq.n	80070f8 <_malloc_r+0x20>
 800715e:	1a1b      	subs	r3, r3, r0
 8007160:	50a3      	str	r3, [r4, r2]
 8007162:	e7c9      	b.n	80070f8 <_malloc_r+0x20>
 8007164:	4622      	mov	r2, r4
 8007166:	6864      	ldr	r4, [r4, #4]
 8007168:	e7cc      	b.n	8007104 <_malloc_r+0x2c>
 800716a:	1cc4      	adds	r4, r0, #3
 800716c:	f024 0403 	bic.w	r4, r4, #3
 8007170:	42a0      	cmp	r0, r4
 8007172:	d0e3      	beq.n	800713c <_malloc_r+0x64>
 8007174:	1a21      	subs	r1, r4, r0
 8007176:	4630      	mov	r0, r6
 8007178:	f000 f964 	bl	8007444 <_sbrk_r>
 800717c:	3001      	adds	r0, #1
 800717e:	d1dd      	bne.n	800713c <_malloc_r+0x64>
 8007180:	e7cf      	b.n	8007122 <_malloc_r+0x4a>
 8007182:	bf00      	nop
 8007184:	20000214 	.word	0x20000214
 8007188:	20000218 	.word	0x20000218

0800718c <__ssputs_r>:
 800718c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007190:	688e      	ldr	r6, [r1, #8]
 8007192:	429e      	cmp	r6, r3
 8007194:	4682      	mov	sl, r0
 8007196:	460c      	mov	r4, r1
 8007198:	4690      	mov	r8, r2
 800719a:	461f      	mov	r7, r3
 800719c:	d838      	bhi.n	8007210 <__ssputs_r+0x84>
 800719e:	898a      	ldrh	r2, [r1, #12]
 80071a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071a4:	d032      	beq.n	800720c <__ssputs_r+0x80>
 80071a6:	6825      	ldr	r5, [r4, #0]
 80071a8:	6909      	ldr	r1, [r1, #16]
 80071aa:	eba5 0901 	sub.w	r9, r5, r1
 80071ae:	6965      	ldr	r5, [r4, #20]
 80071b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071b8:	3301      	adds	r3, #1
 80071ba:	444b      	add	r3, r9
 80071bc:	106d      	asrs	r5, r5, #1
 80071be:	429d      	cmp	r5, r3
 80071c0:	bf38      	it	cc
 80071c2:	461d      	movcc	r5, r3
 80071c4:	0553      	lsls	r3, r2, #21
 80071c6:	d531      	bpl.n	800722c <__ssputs_r+0xa0>
 80071c8:	4629      	mov	r1, r5
 80071ca:	f7ff ff85 	bl	80070d8 <_malloc_r>
 80071ce:	4606      	mov	r6, r0
 80071d0:	b950      	cbnz	r0, 80071e8 <__ssputs_r+0x5c>
 80071d2:	230c      	movs	r3, #12
 80071d4:	f8ca 3000 	str.w	r3, [sl]
 80071d8:	89a3      	ldrh	r3, [r4, #12]
 80071da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071de:	81a3      	strh	r3, [r4, #12]
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295
 80071e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e8:	6921      	ldr	r1, [r4, #16]
 80071ea:	464a      	mov	r2, r9
 80071ec:	f7ff fb88 	bl	8006900 <memcpy>
 80071f0:	89a3      	ldrh	r3, [r4, #12]
 80071f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071fa:	81a3      	strh	r3, [r4, #12]
 80071fc:	6126      	str	r6, [r4, #16]
 80071fe:	6165      	str	r5, [r4, #20]
 8007200:	444e      	add	r6, r9
 8007202:	eba5 0509 	sub.w	r5, r5, r9
 8007206:	6026      	str	r6, [r4, #0]
 8007208:	60a5      	str	r5, [r4, #8]
 800720a:	463e      	mov	r6, r7
 800720c:	42be      	cmp	r6, r7
 800720e:	d900      	bls.n	8007212 <__ssputs_r+0x86>
 8007210:	463e      	mov	r6, r7
 8007212:	4632      	mov	r2, r6
 8007214:	6820      	ldr	r0, [r4, #0]
 8007216:	4641      	mov	r1, r8
 8007218:	f000 f966 	bl	80074e8 <memmove>
 800721c:	68a3      	ldr	r3, [r4, #8]
 800721e:	6822      	ldr	r2, [r4, #0]
 8007220:	1b9b      	subs	r3, r3, r6
 8007222:	4432      	add	r2, r6
 8007224:	60a3      	str	r3, [r4, #8]
 8007226:	6022      	str	r2, [r4, #0]
 8007228:	2000      	movs	r0, #0
 800722a:	e7db      	b.n	80071e4 <__ssputs_r+0x58>
 800722c:	462a      	mov	r2, r5
 800722e:	f000 f981 	bl	8007534 <_realloc_r>
 8007232:	4606      	mov	r6, r0
 8007234:	2800      	cmp	r0, #0
 8007236:	d1e1      	bne.n	80071fc <__ssputs_r+0x70>
 8007238:	6921      	ldr	r1, [r4, #16]
 800723a:	4650      	mov	r0, sl
 800723c:	f7ff fefc 	bl	8007038 <_free_r>
 8007240:	e7c7      	b.n	80071d2 <__ssputs_r+0x46>
	...

08007244 <_svfiprintf_r>:
 8007244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007248:	4698      	mov	r8, r3
 800724a:	898b      	ldrh	r3, [r1, #12]
 800724c:	061b      	lsls	r3, r3, #24
 800724e:	b09d      	sub	sp, #116	; 0x74
 8007250:	4607      	mov	r7, r0
 8007252:	460d      	mov	r5, r1
 8007254:	4614      	mov	r4, r2
 8007256:	d50e      	bpl.n	8007276 <_svfiprintf_r+0x32>
 8007258:	690b      	ldr	r3, [r1, #16]
 800725a:	b963      	cbnz	r3, 8007276 <_svfiprintf_r+0x32>
 800725c:	2140      	movs	r1, #64	; 0x40
 800725e:	f7ff ff3b 	bl	80070d8 <_malloc_r>
 8007262:	6028      	str	r0, [r5, #0]
 8007264:	6128      	str	r0, [r5, #16]
 8007266:	b920      	cbnz	r0, 8007272 <_svfiprintf_r+0x2e>
 8007268:	230c      	movs	r3, #12
 800726a:	603b      	str	r3, [r7, #0]
 800726c:	f04f 30ff 	mov.w	r0, #4294967295
 8007270:	e0d1      	b.n	8007416 <_svfiprintf_r+0x1d2>
 8007272:	2340      	movs	r3, #64	; 0x40
 8007274:	616b      	str	r3, [r5, #20]
 8007276:	2300      	movs	r3, #0
 8007278:	9309      	str	r3, [sp, #36]	; 0x24
 800727a:	2320      	movs	r3, #32
 800727c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007280:	f8cd 800c 	str.w	r8, [sp, #12]
 8007284:	2330      	movs	r3, #48	; 0x30
 8007286:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007430 <_svfiprintf_r+0x1ec>
 800728a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800728e:	f04f 0901 	mov.w	r9, #1
 8007292:	4623      	mov	r3, r4
 8007294:	469a      	mov	sl, r3
 8007296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800729a:	b10a      	cbz	r2, 80072a0 <_svfiprintf_r+0x5c>
 800729c:	2a25      	cmp	r2, #37	; 0x25
 800729e:	d1f9      	bne.n	8007294 <_svfiprintf_r+0x50>
 80072a0:	ebba 0b04 	subs.w	fp, sl, r4
 80072a4:	d00b      	beq.n	80072be <_svfiprintf_r+0x7a>
 80072a6:	465b      	mov	r3, fp
 80072a8:	4622      	mov	r2, r4
 80072aa:	4629      	mov	r1, r5
 80072ac:	4638      	mov	r0, r7
 80072ae:	f7ff ff6d 	bl	800718c <__ssputs_r>
 80072b2:	3001      	adds	r0, #1
 80072b4:	f000 80aa 	beq.w	800740c <_svfiprintf_r+0x1c8>
 80072b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ba:	445a      	add	r2, fp
 80072bc:	9209      	str	r2, [sp, #36]	; 0x24
 80072be:	f89a 3000 	ldrb.w	r3, [sl]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 80a2 	beq.w	800740c <_svfiprintf_r+0x1c8>
 80072c8:	2300      	movs	r3, #0
 80072ca:	f04f 32ff 	mov.w	r2, #4294967295
 80072ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072d2:	f10a 0a01 	add.w	sl, sl, #1
 80072d6:	9304      	str	r3, [sp, #16]
 80072d8:	9307      	str	r3, [sp, #28]
 80072da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072de:	931a      	str	r3, [sp, #104]	; 0x68
 80072e0:	4654      	mov	r4, sl
 80072e2:	2205      	movs	r2, #5
 80072e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072e8:	4851      	ldr	r0, [pc, #324]	; (8007430 <_svfiprintf_r+0x1ec>)
 80072ea:	f7f8 ff79 	bl	80001e0 <memchr>
 80072ee:	9a04      	ldr	r2, [sp, #16]
 80072f0:	b9d8      	cbnz	r0, 800732a <_svfiprintf_r+0xe6>
 80072f2:	06d0      	lsls	r0, r2, #27
 80072f4:	bf44      	itt	mi
 80072f6:	2320      	movmi	r3, #32
 80072f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072fc:	0711      	lsls	r1, r2, #28
 80072fe:	bf44      	itt	mi
 8007300:	232b      	movmi	r3, #43	; 0x2b
 8007302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007306:	f89a 3000 	ldrb.w	r3, [sl]
 800730a:	2b2a      	cmp	r3, #42	; 0x2a
 800730c:	d015      	beq.n	800733a <_svfiprintf_r+0xf6>
 800730e:	9a07      	ldr	r2, [sp, #28]
 8007310:	4654      	mov	r4, sl
 8007312:	2000      	movs	r0, #0
 8007314:	f04f 0c0a 	mov.w	ip, #10
 8007318:	4621      	mov	r1, r4
 800731a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800731e:	3b30      	subs	r3, #48	; 0x30
 8007320:	2b09      	cmp	r3, #9
 8007322:	d94e      	bls.n	80073c2 <_svfiprintf_r+0x17e>
 8007324:	b1b0      	cbz	r0, 8007354 <_svfiprintf_r+0x110>
 8007326:	9207      	str	r2, [sp, #28]
 8007328:	e014      	b.n	8007354 <_svfiprintf_r+0x110>
 800732a:	eba0 0308 	sub.w	r3, r0, r8
 800732e:	fa09 f303 	lsl.w	r3, r9, r3
 8007332:	4313      	orrs	r3, r2
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	46a2      	mov	sl, r4
 8007338:	e7d2      	b.n	80072e0 <_svfiprintf_r+0x9c>
 800733a:	9b03      	ldr	r3, [sp, #12]
 800733c:	1d19      	adds	r1, r3, #4
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	9103      	str	r1, [sp, #12]
 8007342:	2b00      	cmp	r3, #0
 8007344:	bfbb      	ittet	lt
 8007346:	425b      	neglt	r3, r3
 8007348:	f042 0202 	orrlt.w	r2, r2, #2
 800734c:	9307      	strge	r3, [sp, #28]
 800734e:	9307      	strlt	r3, [sp, #28]
 8007350:	bfb8      	it	lt
 8007352:	9204      	strlt	r2, [sp, #16]
 8007354:	7823      	ldrb	r3, [r4, #0]
 8007356:	2b2e      	cmp	r3, #46	; 0x2e
 8007358:	d10c      	bne.n	8007374 <_svfiprintf_r+0x130>
 800735a:	7863      	ldrb	r3, [r4, #1]
 800735c:	2b2a      	cmp	r3, #42	; 0x2a
 800735e:	d135      	bne.n	80073cc <_svfiprintf_r+0x188>
 8007360:	9b03      	ldr	r3, [sp, #12]
 8007362:	1d1a      	adds	r2, r3, #4
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	9203      	str	r2, [sp, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	bfb8      	it	lt
 800736c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007370:	3402      	adds	r4, #2
 8007372:	9305      	str	r3, [sp, #20]
 8007374:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007440 <_svfiprintf_r+0x1fc>
 8007378:	7821      	ldrb	r1, [r4, #0]
 800737a:	2203      	movs	r2, #3
 800737c:	4650      	mov	r0, sl
 800737e:	f7f8 ff2f 	bl	80001e0 <memchr>
 8007382:	b140      	cbz	r0, 8007396 <_svfiprintf_r+0x152>
 8007384:	2340      	movs	r3, #64	; 0x40
 8007386:	eba0 000a 	sub.w	r0, r0, sl
 800738a:	fa03 f000 	lsl.w	r0, r3, r0
 800738e:	9b04      	ldr	r3, [sp, #16]
 8007390:	4303      	orrs	r3, r0
 8007392:	3401      	adds	r4, #1
 8007394:	9304      	str	r3, [sp, #16]
 8007396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800739a:	4826      	ldr	r0, [pc, #152]	; (8007434 <_svfiprintf_r+0x1f0>)
 800739c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073a0:	2206      	movs	r2, #6
 80073a2:	f7f8 ff1d 	bl	80001e0 <memchr>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d038      	beq.n	800741c <_svfiprintf_r+0x1d8>
 80073aa:	4b23      	ldr	r3, [pc, #140]	; (8007438 <_svfiprintf_r+0x1f4>)
 80073ac:	bb1b      	cbnz	r3, 80073f6 <_svfiprintf_r+0x1b2>
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	3307      	adds	r3, #7
 80073b2:	f023 0307 	bic.w	r3, r3, #7
 80073b6:	3308      	adds	r3, #8
 80073b8:	9303      	str	r3, [sp, #12]
 80073ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073bc:	4433      	add	r3, r6
 80073be:	9309      	str	r3, [sp, #36]	; 0x24
 80073c0:	e767      	b.n	8007292 <_svfiprintf_r+0x4e>
 80073c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80073c6:	460c      	mov	r4, r1
 80073c8:	2001      	movs	r0, #1
 80073ca:	e7a5      	b.n	8007318 <_svfiprintf_r+0xd4>
 80073cc:	2300      	movs	r3, #0
 80073ce:	3401      	adds	r4, #1
 80073d0:	9305      	str	r3, [sp, #20]
 80073d2:	4619      	mov	r1, r3
 80073d4:	f04f 0c0a 	mov.w	ip, #10
 80073d8:	4620      	mov	r0, r4
 80073da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073de:	3a30      	subs	r2, #48	; 0x30
 80073e0:	2a09      	cmp	r2, #9
 80073e2:	d903      	bls.n	80073ec <_svfiprintf_r+0x1a8>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d0c5      	beq.n	8007374 <_svfiprintf_r+0x130>
 80073e8:	9105      	str	r1, [sp, #20]
 80073ea:	e7c3      	b.n	8007374 <_svfiprintf_r+0x130>
 80073ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80073f0:	4604      	mov	r4, r0
 80073f2:	2301      	movs	r3, #1
 80073f4:	e7f0      	b.n	80073d8 <_svfiprintf_r+0x194>
 80073f6:	ab03      	add	r3, sp, #12
 80073f8:	9300      	str	r3, [sp, #0]
 80073fa:	462a      	mov	r2, r5
 80073fc:	4b0f      	ldr	r3, [pc, #60]	; (800743c <_svfiprintf_r+0x1f8>)
 80073fe:	a904      	add	r1, sp, #16
 8007400:	4638      	mov	r0, r7
 8007402:	f7fe f80f 	bl	8005424 <_printf_float>
 8007406:	1c42      	adds	r2, r0, #1
 8007408:	4606      	mov	r6, r0
 800740a:	d1d6      	bne.n	80073ba <_svfiprintf_r+0x176>
 800740c:	89ab      	ldrh	r3, [r5, #12]
 800740e:	065b      	lsls	r3, r3, #25
 8007410:	f53f af2c 	bmi.w	800726c <_svfiprintf_r+0x28>
 8007414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007416:	b01d      	add	sp, #116	; 0x74
 8007418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800741c:	ab03      	add	r3, sp, #12
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	462a      	mov	r2, r5
 8007422:	4b06      	ldr	r3, [pc, #24]	; (800743c <_svfiprintf_r+0x1f8>)
 8007424:	a904      	add	r1, sp, #16
 8007426:	4638      	mov	r0, r7
 8007428:	f7fe faa0 	bl	800596c <_printf_i>
 800742c:	e7eb      	b.n	8007406 <_svfiprintf_r+0x1c2>
 800742e:	bf00      	nop
 8007430:	080082d4 	.word	0x080082d4
 8007434:	080082de 	.word	0x080082de
 8007438:	08005425 	.word	0x08005425
 800743c:	0800718d 	.word	0x0800718d
 8007440:	080082da 	.word	0x080082da

08007444 <_sbrk_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	4d06      	ldr	r5, [pc, #24]	; (8007460 <_sbrk_r+0x1c>)
 8007448:	2300      	movs	r3, #0
 800744a:	4604      	mov	r4, r0
 800744c:	4608      	mov	r0, r1
 800744e:	602b      	str	r3, [r5, #0]
 8007450:	f7fa f9bc 	bl	80017cc <_sbrk>
 8007454:	1c43      	adds	r3, r0, #1
 8007456:	d102      	bne.n	800745e <_sbrk_r+0x1a>
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	b103      	cbz	r3, 800745e <_sbrk_r+0x1a>
 800745c:	6023      	str	r3, [r4, #0]
 800745e:	bd38      	pop	{r3, r4, r5, pc}
 8007460:	20000340 	.word	0x20000340

08007464 <__assert_func>:
 8007464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007466:	4614      	mov	r4, r2
 8007468:	461a      	mov	r2, r3
 800746a:	4b09      	ldr	r3, [pc, #36]	; (8007490 <__assert_func+0x2c>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4605      	mov	r5, r0
 8007470:	68d8      	ldr	r0, [r3, #12]
 8007472:	b14c      	cbz	r4, 8007488 <__assert_func+0x24>
 8007474:	4b07      	ldr	r3, [pc, #28]	; (8007494 <__assert_func+0x30>)
 8007476:	9100      	str	r1, [sp, #0]
 8007478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800747c:	4906      	ldr	r1, [pc, #24]	; (8007498 <__assert_func+0x34>)
 800747e:	462b      	mov	r3, r5
 8007480:	f000 f80e 	bl	80074a0 <fiprintf>
 8007484:	f000 faa4 	bl	80079d0 <abort>
 8007488:	4b04      	ldr	r3, [pc, #16]	; (800749c <__assert_func+0x38>)
 800748a:	461c      	mov	r4, r3
 800748c:	e7f3      	b.n	8007476 <__assert_func+0x12>
 800748e:	bf00      	nop
 8007490:	2000000c 	.word	0x2000000c
 8007494:	080082e5 	.word	0x080082e5
 8007498:	080082f2 	.word	0x080082f2
 800749c:	08008320 	.word	0x08008320

080074a0 <fiprintf>:
 80074a0:	b40e      	push	{r1, r2, r3}
 80074a2:	b503      	push	{r0, r1, lr}
 80074a4:	4601      	mov	r1, r0
 80074a6:	ab03      	add	r3, sp, #12
 80074a8:	4805      	ldr	r0, [pc, #20]	; (80074c0 <fiprintf+0x20>)
 80074aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ae:	6800      	ldr	r0, [r0, #0]
 80074b0:	9301      	str	r3, [sp, #4]
 80074b2:	f000 f88f 	bl	80075d4 <_vfiprintf_r>
 80074b6:	b002      	add	sp, #8
 80074b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074bc:	b003      	add	sp, #12
 80074be:	4770      	bx	lr
 80074c0:	2000000c 	.word	0x2000000c

080074c4 <__ascii_mbtowc>:
 80074c4:	b082      	sub	sp, #8
 80074c6:	b901      	cbnz	r1, 80074ca <__ascii_mbtowc+0x6>
 80074c8:	a901      	add	r1, sp, #4
 80074ca:	b142      	cbz	r2, 80074de <__ascii_mbtowc+0x1a>
 80074cc:	b14b      	cbz	r3, 80074e2 <__ascii_mbtowc+0x1e>
 80074ce:	7813      	ldrb	r3, [r2, #0]
 80074d0:	600b      	str	r3, [r1, #0]
 80074d2:	7812      	ldrb	r2, [r2, #0]
 80074d4:	1e10      	subs	r0, r2, #0
 80074d6:	bf18      	it	ne
 80074d8:	2001      	movne	r0, #1
 80074da:	b002      	add	sp, #8
 80074dc:	4770      	bx	lr
 80074de:	4610      	mov	r0, r2
 80074e0:	e7fb      	b.n	80074da <__ascii_mbtowc+0x16>
 80074e2:	f06f 0001 	mvn.w	r0, #1
 80074e6:	e7f8      	b.n	80074da <__ascii_mbtowc+0x16>

080074e8 <memmove>:
 80074e8:	4288      	cmp	r0, r1
 80074ea:	b510      	push	{r4, lr}
 80074ec:	eb01 0402 	add.w	r4, r1, r2
 80074f0:	d902      	bls.n	80074f8 <memmove+0x10>
 80074f2:	4284      	cmp	r4, r0
 80074f4:	4623      	mov	r3, r4
 80074f6:	d807      	bhi.n	8007508 <memmove+0x20>
 80074f8:	1e43      	subs	r3, r0, #1
 80074fa:	42a1      	cmp	r1, r4
 80074fc:	d008      	beq.n	8007510 <memmove+0x28>
 80074fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007502:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007506:	e7f8      	b.n	80074fa <memmove+0x12>
 8007508:	4402      	add	r2, r0
 800750a:	4601      	mov	r1, r0
 800750c:	428a      	cmp	r2, r1
 800750e:	d100      	bne.n	8007512 <memmove+0x2a>
 8007510:	bd10      	pop	{r4, pc}
 8007512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007516:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800751a:	e7f7      	b.n	800750c <memmove+0x24>

0800751c <__malloc_lock>:
 800751c:	4801      	ldr	r0, [pc, #4]	; (8007524 <__malloc_lock+0x8>)
 800751e:	f000 bc17 	b.w	8007d50 <__retarget_lock_acquire_recursive>
 8007522:	bf00      	nop
 8007524:	20000348 	.word	0x20000348

08007528 <__malloc_unlock>:
 8007528:	4801      	ldr	r0, [pc, #4]	; (8007530 <__malloc_unlock+0x8>)
 800752a:	f000 bc12 	b.w	8007d52 <__retarget_lock_release_recursive>
 800752e:	bf00      	nop
 8007530:	20000348 	.word	0x20000348

08007534 <_realloc_r>:
 8007534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007536:	4607      	mov	r7, r0
 8007538:	4614      	mov	r4, r2
 800753a:	460e      	mov	r6, r1
 800753c:	b921      	cbnz	r1, 8007548 <_realloc_r+0x14>
 800753e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007542:	4611      	mov	r1, r2
 8007544:	f7ff bdc8 	b.w	80070d8 <_malloc_r>
 8007548:	b922      	cbnz	r2, 8007554 <_realloc_r+0x20>
 800754a:	f7ff fd75 	bl	8007038 <_free_r>
 800754e:	4625      	mov	r5, r4
 8007550:	4628      	mov	r0, r5
 8007552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007554:	f000 fc62 	bl	8007e1c <_malloc_usable_size_r>
 8007558:	42a0      	cmp	r0, r4
 800755a:	d20f      	bcs.n	800757c <_realloc_r+0x48>
 800755c:	4621      	mov	r1, r4
 800755e:	4638      	mov	r0, r7
 8007560:	f7ff fdba 	bl	80070d8 <_malloc_r>
 8007564:	4605      	mov	r5, r0
 8007566:	2800      	cmp	r0, #0
 8007568:	d0f2      	beq.n	8007550 <_realloc_r+0x1c>
 800756a:	4631      	mov	r1, r6
 800756c:	4622      	mov	r2, r4
 800756e:	f7ff f9c7 	bl	8006900 <memcpy>
 8007572:	4631      	mov	r1, r6
 8007574:	4638      	mov	r0, r7
 8007576:	f7ff fd5f 	bl	8007038 <_free_r>
 800757a:	e7e9      	b.n	8007550 <_realloc_r+0x1c>
 800757c:	4635      	mov	r5, r6
 800757e:	e7e7      	b.n	8007550 <_realloc_r+0x1c>

08007580 <__sfputc_r>:
 8007580:	6893      	ldr	r3, [r2, #8]
 8007582:	3b01      	subs	r3, #1
 8007584:	2b00      	cmp	r3, #0
 8007586:	b410      	push	{r4}
 8007588:	6093      	str	r3, [r2, #8]
 800758a:	da08      	bge.n	800759e <__sfputc_r+0x1e>
 800758c:	6994      	ldr	r4, [r2, #24]
 800758e:	42a3      	cmp	r3, r4
 8007590:	db01      	blt.n	8007596 <__sfputc_r+0x16>
 8007592:	290a      	cmp	r1, #10
 8007594:	d103      	bne.n	800759e <__sfputc_r+0x1e>
 8007596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800759a:	f000 b94b 	b.w	8007834 <__swbuf_r>
 800759e:	6813      	ldr	r3, [r2, #0]
 80075a0:	1c58      	adds	r0, r3, #1
 80075a2:	6010      	str	r0, [r2, #0]
 80075a4:	7019      	strb	r1, [r3, #0]
 80075a6:	4608      	mov	r0, r1
 80075a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <__sfputs_r>:
 80075ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b0:	4606      	mov	r6, r0
 80075b2:	460f      	mov	r7, r1
 80075b4:	4614      	mov	r4, r2
 80075b6:	18d5      	adds	r5, r2, r3
 80075b8:	42ac      	cmp	r4, r5
 80075ba:	d101      	bne.n	80075c0 <__sfputs_r+0x12>
 80075bc:	2000      	movs	r0, #0
 80075be:	e007      	b.n	80075d0 <__sfputs_r+0x22>
 80075c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c4:	463a      	mov	r2, r7
 80075c6:	4630      	mov	r0, r6
 80075c8:	f7ff ffda 	bl	8007580 <__sfputc_r>
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d1f3      	bne.n	80075b8 <__sfputs_r+0xa>
 80075d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075d4 <_vfiprintf_r>:
 80075d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	460d      	mov	r5, r1
 80075da:	b09d      	sub	sp, #116	; 0x74
 80075dc:	4614      	mov	r4, r2
 80075de:	4698      	mov	r8, r3
 80075e0:	4606      	mov	r6, r0
 80075e2:	b118      	cbz	r0, 80075ec <_vfiprintf_r+0x18>
 80075e4:	6983      	ldr	r3, [r0, #24]
 80075e6:	b90b      	cbnz	r3, 80075ec <_vfiprintf_r+0x18>
 80075e8:	f000 fb14 	bl	8007c14 <__sinit>
 80075ec:	4b89      	ldr	r3, [pc, #548]	; (8007814 <_vfiprintf_r+0x240>)
 80075ee:	429d      	cmp	r5, r3
 80075f0:	d11b      	bne.n	800762a <_vfiprintf_r+0x56>
 80075f2:	6875      	ldr	r5, [r6, #4]
 80075f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075f6:	07d9      	lsls	r1, r3, #31
 80075f8:	d405      	bmi.n	8007606 <_vfiprintf_r+0x32>
 80075fa:	89ab      	ldrh	r3, [r5, #12]
 80075fc:	059a      	lsls	r2, r3, #22
 80075fe:	d402      	bmi.n	8007606 <_vfiprintf_r+0x32>
 8007600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007602:	f000 fba5 	bl	8007d50 <__retarget_lock_acquire_recursive>
 8007606:	89ab      	ldrh	r3, [r5, #12]
 8007608:	071b      	lsls	r3, r3, #28
 800760a:	d501      	bpl.n	8007610 <_vfiprintf_r+0x3c>
 800760c:	692b      	ldr	r3, [r5, #16]
 800760e:	b9eb      	cbnz	r3, 800764c <_vfiprintf_r+0x78>
 8007610:	4629      	mov	r1, r5
 8007612:	4630      	mov	r0, r6
 8007614:	f000 f96e 	bl	80078f4 <__swsetup_r>
 8007618:	b1c0      	cbz	r0, 800764c <_vfiprintf_r+0x78>
 800761a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800761c:	07dc      	lsls	r4, r3, #31
 800761e:	d50e      	bpl.n	800763e <_vfiprintf_r+0x6a>
 8007620:	f04f 30ff 	mov.w	r0, #4294967295
 8007624:	b01d      	add	sp, #116	; 0x74
 8007626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800762a:	4b7b      	ldr	r3, [pc, #492]	; (8007818 <_vfiprintf_r+0x244>)
 800762c:	429d      	cmp	r5, r3
 800762e:	d101      	bne.n	8007634 <_vfiprintf_r+0x60>
 8007630:	68b5      	ldr	r5, [r6, #8]
 8007632:	e7df      	b.n	80075f4 <_vfiprintf_r+0x20>
 8007634:	4b79      	ldr	r3, [pc, #484]	; (800781c <_vfiprintf_r+0x248>)
 8007636:	429d      	cmp	r5, r3
 8007638:	bf08      	it	eq
 800763a:	68f5      	ldreq	r5, [r6, #12]
 800763c:	e7da      	b.n	80075f4 <_vfiprintf_r+0x20>
 800763e:	89ab      	ldrh	r3, [r5, #12]
 8007640:	0598      	lsls	r0, r3, #22
 8007642:	d4ed      	bmi.n	8007620 <_vfiprintf_r+0x4c>
 8007644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007646:	f000 fb84 	bl	8007d52 <__retarget_lock_release_recursive>
 800764a:	e7e9      	b.n	8007620 <_vfiprintf_r+0x4c>
 800764c:	2300      	movs	r3, #0
 800764e:	9309      	str	r3, [sp, #36]	; 0x24
 8007650:	2320      	movs	r3, #32
 8007652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007656:	f8cd 800c 	str.w	r8, [sp, #12]
 800765a:	2330      	movs	r3, #48	; 0x30
 800765c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007820 <_vfiprintf_r+0x24c>
 8007660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007664:	f04f 0901 	mov.w	r9, #1
 8007668:	4623      	mov	r3, r4
 800766a:	469a      	mov	sl, r3
 800766c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007670:	b10a      	cbz	r2, 8007676 <_vfiprintf_r+0xa2>
 8007672:	2a25      	cmp	r2, #37	; 0x25
 8007674:	d1f9      	bne.n	800766a <_vfiprintf_r+0x96>
 8007676:	ebba 0b04 	subs.w	fp, sl, r4
 800767a:	d00b      	beq.n	8007694 <_vfiprintf_r+0xc0>
 800767c:	465b      	mov	r3, fp
 800767e:	4622      	mov	r2, r4
 8007680:	4629      	mov	r1, r5
 8007682:	4630      	mov	r0, r6
 8007684:	f7ff ff93 	bl	80075ae <__sfputs_r>
 8007688:	3001      	adds	r0, #1
 800768a:	f000 80aa 	beq.w	80077e2 <_vfiprintf_r+0x20e>
 800768e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007690:	445a      	add	r2, fp
 8007692:	9209      	str	r2, [sp, #36]	; 0x24
 8007694:	f89a 3000 	ldrb.w	r3, [sl]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 80a2 	beq.w	80077e2 <_vfiprintf_r+0x20e>
 800769e:	2300      	movs	r3, #0
 80076a0:	f04f 32ff 	mov.w	r2, #4294967295
 80076a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076a8:	f10a 0a01 	add.w	sl, sl, #1
 80076ac:	9304      	str	r3, [sp, #16]
 80076ae:	9307      	str	r3, [sp, #28]
 80076b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076b4:	931a      	str	r3, [sp, #104]	; 0x68
 80076b6:	4654      	mov	r4, sl
 80076b8:	2205      	movs	r2, #5
 80076ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076be:	4858      	ldr	r0, [pc, #352]	; (8007820 <_vfiprintf_r+0x24c>)
 80076c0:	f7f8 fd8e 	bl	80001e0 <memchr>
 80076c4:	9a04      	ldr	r2, [sp, #16]
 80076c6:	b9d8      	cbnz	r0, 8007700 <_vfiprintf_r+0x12c>
 80076c8:	06d1      	lsls	r1, r2, #27
 80076ca:	bf44      	itt	mi
 80076cc:	2320      	movmi	r3, #32
 80076ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076d2:	0713      	lsls	r3, r2, #28
 80076d4:	bf44      	itt	mi
 80076d6:	232b      	movmi	r3, #43	; 0x2b
 80076d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076dc:	f89a 3000 	ldrb.w	r3, [sl]
 80076e0:	2b2a      	cmp	r3, #42	; 0x2a
 80076e2:	d015      	beq.n	8007710 <_vfiprintf_r+0x13c>
 80076e4:	9a07      	ldr	r2, [sp, #28]
 80076e6:	4654      	mov	r4, sl
 80076e8:	2000      	movs	r0, #0
 80076ea:	f04f 0c0a 	mov.w	ip, #10
 80076ee:	4621      	mov	r1, r4
 80076f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076f4:	3b30      	subs	r3, #48	; 0x30
 80076f6:	2b09      	cmp	r3, #9
 80076f8:	d94e      	bls.n	8007798 <_vfiprintf_r+0x1c4>
 80076fa:	b1b0      	cbz	r0, 800772a <_vfiprintf_r+0x156>
 80076fc:	9207      	str	r2, [sp, #28]
 80076fe:	e014      	b.n	800772a <_vfiprintf_r+0x156>
 8007700:	eba0 0308 	sub.w	r3, r0, r8
 8007704:	fa09 f303 	lsl.w	r3, r9, r3
 8007708:	4313      	orrs	r3, r2
 800770a:	9304      	str	r3, [sp, #16]
 800770c:	46a2      	mov	sl, r4
 800770e:	e7d2      	b.n	80076b6 <_vfiprintf_r+0xe2>
 8007710:	9b03      	ldr	r3, [sp, #12]
 8007712:	1d19      	adds	r1, r3, #4
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	9103      	str	r1, [sp, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	bfbb      	ittet	lt
 800771c:	425b      	neglt	r3, r3
 800771e:	f042 0202 	orrlt.w	r2, r2, #2
 8007722:	9307      	strge	r3, [sp, #28]
 8007724:	9307      	strlt	r3, [sp, #28]
 8007726:	bfb8      	it	lt
 8007728:	9204      	strlt	r2, [sp, #16]
 800772a:	7823      	ldrb	r3, [r4, #0]
 800772c:	2b2e      	cmp	r3, #46	; 0x2e
 800772e:	d10c      	bne.n	800774a <_vfiprintf_r+0x176>
 8007730:	7863      	ldrb	r3, [r4, #1]
 8007732:	2b2a      	cmp	r3, #42	; 0x2a
 8007734:	d135      	bne.n	80077a2 <_vfiprintf_r+0x1ce>
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	1d1a      	adds	r2, r3, #4
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	9203      	str	r2, [sp, #12]
 800773e:	2b00      	cmp	r3, #0
 8007740:	bfb8      	it	lt
 8007742:	f04f 33ff 	movlt.w	r3, #4294967295
 8007746:	3402      	adds	r4, #2
 8007748:	9305      	str	r3, [sp, #20]
 800774a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007830 <_vfiprintf_r+0x25c>
 800774e:	7821      	ldrb	r1, [r4, #0]
 8007750:	2203      	movs	r2, #3
 8007752:	4650      	mov	r0, sl
 8007754:	f7f8 fd44 	bl	80001e0 <memchr>
 8007758:	b140      	cbz	r0, 800776c <_vfiprintf_r+0x198>
 800775a:	2340      	movs	r3, #64	; 0x40
 800775c:	eba0 000a 	sub.w	r0, r0, sl
 8007760:	fa03 f000 	lsl.w	r0, r3, r0
 8007764:	9b04      	ldr	r3, [sp, #16]
 8007766:	4303      	orrs	r3, r0
 8007768:	3401      	adds	r4, #1
 800776a:	9304      	str	r3, [sp, #16]
 800776c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007770:	482c      	ldr	r0, [pc, #176]	; (8007824 <_vfiprintf_r+0x250>)
 8007772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007776:	2206      	movs	r2, #6
 8007778:	f7f8 fd32 	bl	80001e0 <memchr>
 800777c:	2800      	cmp	r0, #0
 800777e:	d03f      	beq.n	8007800 <_vfiprintf_r+0x22c>
 8007780:	4b29      	ldr	r3, [pc, #164]	; (8007828 <_vfiprintf_r+0x254>)
 8007782:	bb1b      	cbnz	r3, 80077cc <_vfiprintf_r+0x1f8>
 8007784:	9b03      	ldr	r3, [sp, #12]
 8007786:	3307      	adds	r3, #7
 8007788:	f023 0307 	bic.w	r3, r3, #7
 800778c:	3308      	adds	r3, #8
 800778e:	9303      	str	r3, [sp, #12]
 8007790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007792:	443b      	add	r3, r7
 8007794:	9309      	str	r3, [sp, #36]	; 0x24
 8007796:	e767      	b.n	8007668 <_vfiprintf_r+0x94>
 8007798:	fb0c 3202 	mla	r2, ip, r2, r3
 800779c:	460c      	mov	r4, r1
 800779e:	2001      	movs	r0, #1
 80077a0:	e7a5      	b.n	80076ee <_vfiprintf_r+0x11a>
 80077a2:	2300      	movs	r3, #0
 80077a4:	3401      	adds	r4, #1
 80077a6:	9305      	str	r3, [sp, #20]
 80077a8:	4619      	mov	r1, r3
 80077aa:	f04f 0c0a 	mov.w	ip, #10
 80077ae:	4620      	mov	r0, r4
 80077b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077b4:	3a30      	subs	r2, #48	; 0x30
 80077b6:	2a09      	cmp	r2, #9
 80077b8:	d903      	bls.n	80077c2 <_vfiprintf_r+0x1ee>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d0c5      	beq.n	800774a <_vfiprintf_r+0x176>
 80077be:	9105      	str	r1, [sp, #20]
 80077c0:	e7c3      	b.n	800774a <_vfiprintf_r+0x176>
 80077c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80077c6:	4604      	mov	r4, r0
 80077c8:	2301      	movs	r3, #1
 80077ca:	e7f0      	b.n	80077ae <_vfiprintf_r+0x1da>
 80077cc:	ab03      	add	r3, sp, #12
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	462a      	mov	r2, r5
 80077d2:	4b16      	ldr	r3, [pc, #88]	; (800782c <_vfiprintf_r+0x258>)
 80077d4:	a904      	add	r1, sp, #16
 80077d6:	4630      	mov	r0, r6
 80077d8:	f7fd fe24 	bl	8005424 <_printf_float>
 80077dc:	4607      	mov	r7, r0
 80077de:	1c78      	adds	r0, r7, #1
 80077e0:	d1d6      	bne.n	8007790 <_vfiprintf_r+0x1bc>
 80077e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80077e4:	07d9      	lsls	r1, r3, #31
 80077e6:	d405      	bmi.n	80077f4 <_vfiprintf_r+0x220>
 80077e8:	89ab      	ldrh	r3, [r5, #12]
 80077ea:	059a      	lsls	r2, r3, #22
 80077ec:	d402      	bmi.n	80077f4 <_vfiprintf_r+0x220>
 80077ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077f0:	f000 faaf 	bl	8007d52 <__retarget_lock_release_recursive>
 80077f4:	89ab      	ldrh	r3, [r5, #12]
 80077f6:	065b      	lsls	r3, r3, #25
 80077f8:	f53f af12 	bmi.w	8007620 <_vfiprintf_r+0x4c>
 80077fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80077fe:	e711      	b.n	8007624 <_vfiprintf_r+0x50>
 8007800:	ab03      	add	r3, sp, #12
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	462a      	mov	r2, r5
 8007806:	4b09      	ldr	r3, [pc, #36]	; (800782c <_vfiprintf_r+0x258>)
 8007808:	a904      	add	r1, sp, #16
 800780a:	4630      	mov	r0, r6
 800780c:	f7fe f8ae 	bl	800596c <_printf_i>
 8007810:	e7e4      	b.n	80077dc <_vfiprintf_r+0x208>
 8007812:	bf00      	nop
 8007814:	0800844c 	.word	0x0800844c
 8007818:	0800846c 	.word	0x0800846c
 800781c:	0800842c 	.word	0x0800842c
 8007820:	080082d4 	.word	0x080082d4
 8007824:	080082de 	.word	0x080082de
 8007828:	08005425 	.word	0x08005425
 800782c:	080075af 	.word	0x080075af
 8007830:	080082da 	.word	0x080082da

08007834 <__swbuf_r>:
 8007834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007836:	460e      	mov	r6, r1
 8007838:	4614      	mov	r4, r2
 800783a:	4605      	mov	r5, r0
 800783c:	b118      	cbz	r0, 8007846 <__swbuf_r+0x12>
 800783e:	6983      	ldr	r3, [r0, #24]
 8007840:	b90b      	cbnz	r3, 8007846 <__swbuf_r+0x12>
 8007842:	f000 f9e7 	bl	8007c14 <__sinit>
 8007846:	4b21      	ldr	r3, [pc, #132]	; (80078cc <__swbuf_r+0x98>)
 8007848:	429c      	cmp	r4, r3
 800784a:	d12b      	bne.n	80078a4 <__swbuf_r+0x70>
 800784c:	686c      	ldr	r4, [r5, #4]
 800784e:	69a3      	ldr	r3, [r4, #24]
 8007850:	60a3      	str	r3, [r4, #8]
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	071a      	lsls	r2, r3, #28
 8007856:	d52f      	bpl.n	80078b8 <__swbuf_r+0x84>
 8007858:	6923      	ldr	r3, [r4, #16]
 800785a:	b36b      	cbz	r3, 80078b8 <__swbuf_r+0x84>
 800785c:	6923      	ldr	r3, [r4, #16]
 800785e:	6820      	ldr	r0, [r4, #0]
 8007860:	1ac0      	subs	r0, r0, r3
 8007862:	6963      	ldr	r3, [r4, #20]
 8007864:	b2f6      	uxtb	r6, r6
 8007866:	4283      	cmp	r3, r0
 8007868:	4637      	mov	r7, r6
 800786a:	dc04      	bgt.n	8007876 <__swbuf_r+0x42>
 800786c:	4621      	mov	r1, r4
 800786e:	4628      	mov	r0, r5
 8007870:	f000 f93c 	bl	8007aec <_fflush_r>
 8007874:	bb30      	cbnz	r0, 80078c4 <__swbuf_r+0x90>
 8007876:	68a3      	ldr	r3, [r4, #8]
 8007878:	3b01      	subs	r3, #1
 800787a:	60a3      	str	r3, [r4, #8]
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	6022      	str	r2, [r4, #0]
 8007882:	701e      	strb	r6, [r3, #0]
 8007884:	6963      	ldr	r3, [r4, #20]
 8007886:	3001      	adds	r0, #1
 8007888:	4283      	cmp	r3, r0
 800788a:	d004      	beq.n	8007896 <__swbuf_r+0x62>
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	07db      	lsls	r3, r3, #31
 8007890:	d506      	bpl.n	80078a0 <__swbuf_r+0x6c>
 8007892:	2e0a      	cmp	r6, #10
 8007894:	d104      	bne.n	80078a0 <__swbuf_r+0x6c>
 8007896:	4621      	mov	r1, r4
 8007898:	4628      	mov	r0, r5
 800789a:	f000 f927 	bl	8007aec <_fflush_r>
 800789e:	b988      	cbnz	r0, 80078c4 <__swbuf_r+0x90>
 80078a0:	4638      	mov	r0, r7
 80078a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078a4:	4b0a      	ldr	r3, [pc, #40]	; (80078d0 <__swbuf_r+0x9c>)
 80078a6:	429c      	cmp	r4, r3
 80078a8:	d101      	bne.n	80078ae <__swbuf_r+0x7a>
 80078aa:	68ac      	ldr	r4, [r5, #8]
 80078ac:	e7cf      	b.n	800784e <__swbuf_r+0x1a>
 80078ae:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <__swbuf_r+0xa0>)
 80078b0:	429c      	cmp	r4, r3
 80078b2:	bf08      	it	eq
 80078b4:	68ec      	ldreq	r4, [r5, #12]
 80078b6:	e7ca      	b.n	800784e <__swbuf_r+0x1a>
 80078b8:	4621      	mov	r1, r4
 80078ba:	4628      	mov	r0, r5
 80078bc:	f000 f81a 	bl	80078f4 <__swsetup_r>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d0cb      	beq.n	800785c <__swbuf_r+0x28>
 80078c4:	f04f 37ff 	mov.w	r7, #4294967295
 80078c8:	e7ea      	b.n	80078a0 <__swbuf_r+0x6c>
 80078ca:	bf00      	nop
 80078cc:	0800844c 	.word	0x0800844c
 80078d0:	0800846c 	.word	0x0800846c
 80078d4:	0800842c 	.word	0x0800842c

080078d8 <__ascii_wctomb>:
 80078d8:	b149      	cbz	r1, 80078ee <__ascii_wctomb+0x16>
 80078da:	2aff      	cmp	r2, #255	; 0xff
 80078dc:	bf85      	ittet	hi
 80078de:	238a      	movhi	r3, #138	; 0x8a
 80078e0:	6003      	strhi	r3, [r0, #0]
 80078e2:	700a      	strbls	r2, [r1, #0]
 80078e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80078e8:	bf98      	it	ls
 80078ea:	2001      	movls	r0, #1
 80078ec:	4770      	bx	lr
 80078ee:	4608      	mov	r0, r1
 80078f0:	4770      	bx	lr
	...

080078f4 <__swsetup_r>:
 80078f4:	4b32      	ldr	r3, [pc, #200]	; (80079c0 <__swsetup_r+0xcc>)
 80078f6:	b570      	push	{r4, r5, r6, lr}
 80078f8:	681d      	ldr	r5, [r3, #0]
 80078fa:	4606      	mov	r6, r0
 80078fc:	460c      	mov	r4, r1
 80078fe:	b125      	cbz	r5, 800790a <__swsetup_r+0x16>
 8007900:	69ab      	ldr	r3, [r5, #24]
 8007902:	b913      	cbnz	r3, 800790a <__swsetup_r+0x16>
 8007904:	4628      	mov	r0, r5
 8007906:	f000 f985 	bl	8007c14 <__sinit>
 800790a:	4b2e      	ldr	r3, [pc, #184]	; (80079c4 <__swsetup_r+0xd0>)
 800790c:	429c      	cmp	r4, r3
 800790e:	d10f      	bne.n	8007930 <__swsetup_r+0x3c>
 8007910:	686c      	ldr	r4, [r5, #4]
 8007912:	89a3      	ldrh	r3, [r4, #12]
 8007914:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007918:	0719      	lsls	r1, r3, #28
 800791a:	d42c      	bmi.n	8007976 <__swsetup_r+0x82>
 800791c:	06dd      	lsls	r5, r3, #27
 800791e:	d411      	bmi.n	8007944 <__swsetup_r+0x50>
 8007920:	2309      	movs	r3, #9
 8007922:	6033      	str	r3, [r6, #0]
 8007924:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007928:	81a3      	strh	r3, [r4, #12]
 800792a:	f04f 30ff 	mov.w	r0, #4294967295
 800792e:	e03e      	b.n	80079ae <__swsetup_r+0xba>
 8007930:	4b25      	ldr	r3, [pc, #148]	; (80079c8 <__swsetup_r+0xd4>)
 8007932:	429c      	cmp	r4, r3
 8007934:	d101      	bne.n	800793a <__swsetup_r+0x46>
 8007936:	68ac      	ldr	r4, [r5, #8]
 8007938:	e7eb      	b.n	8007912 <__swsetup_r+0x1e>
 800793a:	4b24      	ldr	r3, [pc, #144]	; (80079cc <__swsetup_r+0xd8>)
 800793c:	429c      	cmp	r4, r3
 800793e:	bf08      	it	eq
 8007940:	68ec      	ldreq	r4, [r5, #12]
 8007942:	e7e6      	b.n	8007912 <__swsetup_r+0x1e>
 8007944:	0758      	lsls	r0, r3, #29
 8007946:	d512      	bpl.n	800796e <__swsetup_r+0x7a>
 8007948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800794a:	b141      	cbz	r1, 800795e <__swsetup_r+0x6a>
 800794c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007950:	4299      	cmp	r1, r3
 8007952:	d002      	beq.n	800795a <__swsetup_r+0x66>
 8007954:	4630      	mov	r0, r6
 8007956:	f7ff fb6f 	bl	8007038 <_free_r>
 800795a:	2300      	movs	r3, #0
 800795c:	6363      	str	r3, [r4, #52]	; 0x34
 800795e:	89a3      	ldrh	r3, [r4, #12]
 8007960:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007964:	81a3      	strh	r3, [r4, #12]
 8007966:	2300      	movs	r3, #0
 8007968:	6063      	str	r3, [r4, #4]
 800796a:	6923      	ldr	r3, [r4, #16]
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	f043 0308 	orr.w	r3, r3, #8
 8007974:	81a3      	strh	r3, [r4, #12]
 8007976:	6923      	ldr	r3, [r4, #16]
 8007978:	b94b      	cbnz	r3, 800798e <__swsetup_r+0x9a>
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007984:	d003      	beq.n	800798e <__swsetup_r+0x9a>
 8007986:	4621      	mov	r1, r4
 8007988:	4630      	mov	r0, r6
 800798a:	f000 fa07 	bl	8007d9c <__smakebuf_r>
 800798e:	89a0      	ldrh	r0, [r4, #12]
 8007990:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007994:	f010 0301 	ands.w	r3, r0, #1
 8007998:	d00a      	beq.n	80079b0 <__swsetup_r+0xbc>
 800799a:	2300      	movs	r3, #0
 800799c:	60a3      	str	r3, [r4, #8]
 800799e:	6963      	ldr	r3, [r4, #20]
 80079a0:	425b      	negs	r3, r3
 80079a2:	61a3      	str	r3, [r4, #24]
 80079a4:	6923      	ldr	r3, [r4, #16]
 80079a6:	b943      	cbnz	r3, 80079ba <__swsetup_r+0xc6>
 80079a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079ac:	d1ba      	bne.n	8007924 <__swsetup_r+0x30>
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	0781      	lsls	r1, r0, #30
 80079b2:	bf58      	it	pl
 80079b4:	6963      	ldrpl	r3, [r4, #20]
 80079b6:	60a3      	str	r3, [r4, #8]
 80079b8:	e7f4      	b.n	80079a4 <__swsetup_r+0xb0>
 80079ba:	2000      	movs	r0, #0
 80079bc:	e7f7      	b.n	80079ae <__swsetup_r+0xba>
 80079be:	bf00      	nop
 80079c0:	2000000c 	.word	0x2000000c
 80079c4:	0800844c 	.word	0x0800844c
 80079c8:	0800846c 	.word	0x0800846c
 80079cc:	0800842c 	.word	0x0800842c

080079d0 <abort>:
 80079d0:	b508      	push	{r3, lr}
 80079d2:	2006      	movs	r0, #6
 80079d4:	f000 fa52 	bl	8007e7c <raise>
 80079d8:	2001      	movs	r0, #1
 80079da:	f7f9 fe7f 	bl	80016dc <_exit>
	...

080079e0 <__sflush_r>:
 80079e0:	898a      	ldrh	r2, [r1, #12]
 80079e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e6:	4605      	mov	r5, r0
 80079e8:	0710      	lsls	r0, r2, #28
 80079ea:	460c      	mov	r4, r1
 80079ec:	d458      	bmi.n	8007aa0 <__sflush_r+0xc0>
 80079ee:	684b      	ldr	r3, [r1, #4]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	dc05      	bgt.n	8007a00 <__sflush_r+0x20>
 80079f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	dc02      	bgt.n	8007a00 <__sflush_r+0x20>
 80079fa:	2000      	movs	r0, #0
 80079fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a02:	2e00      	cmp	r6, #0
 8007a04:	d0f9      	beq.n	80079fa <__sflush_r+0x1a>
 8007a06:	2300      	movs	r3, #0
 8007a08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a0c:	682f      	ldr	r7, [r5, #0]
 8007a0e:	602b      	str	r3, [r5, #0]
 8007a10:	d032      	beq.n	8007a78 <__sflush_r+0x98>
 8007a12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	075a      	lsls	r2, r3, #29
 8007a18:	d505      	bpl.n	8007a26 <__sflush_r+0x46>
 8007a1a:	6863      	ldr	r3, [r4, #4]
 8007a1c:	1ac0      	subs	r0, r0, r3
 8007a1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a20:	b10b      	cbz	r3, 8007a26 <__sflush_r+0x46>
 8007a22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a24:	1ac0      	subs	r0, r0, r3
 8007a26:	2300      	movs	r3, #0
 8007a28:	4602      	mov	r2, r0
 8007a2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a2c:	6a21      	ldr	r1, [r4, #32]
 8007a2e:	4628      	mov	r0, r5
 8007a30:	47b0      	blx	r6
 8007a32:	1c43      	adds	r3, r0, #1
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	d106      	bne.n	8007a46 <__sflush_r+0x66>
 8007a38:	6829      	ldr	r1, [r5, #0]
 8007a3a:	291d      	cmp	r1, #29
 8007a3c:	d82c      	bhi.n	8007a98 <__sflush_r+0xb8>
 8007a3e:	4a2a      	ldr	r2, [pc, #168]	; (8007ae8 <__sflush_r+0x108>)
 8007a40:	40ca      	lsrs	r2, r1
 8007a42:	07d6      	lsls	r6, r2, #31
 8007a44:	d528      	bpl.n	8007a98 <__sflush_r+0xb8>
 8007a46:	2200      	movs	r2, #0
 8007a48:	6062      	str	r2, [r4, #4]
 8007a4a:	04d9      	lsls	r1, r3, #19
 8007a4c:	6922      	ldr	r2, [r4, #16]
 8007a4e:	6022      	str	r2, [r4, #0]
 8007a50:	d504      	bpl.n	8007a5c <__sflush_r+0x7c>
 8007a52:	1c42      	adds	r2, r0, #1
 8007a54:	d101      	bne.n	8007a5a <__sflush_r+0x7a>
 8007a56:	682b      	ldr	r3, [r5, #0]
 8007a58:	b903      	cbnz	r3, 8007a5c <__sflush_r+0x7c>
 8007a5a:	6560      	str	r0, [r4, #84]	; 0x54
 8007a5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a5e:	602f      	str	r7, [r5, #0]
 8007a60:	2900      	cmp	r1, #0
 8007a62:	d0ca      	beq.n	80079fa <__sflush_r+0x1a>
 8007a64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a68:	4299      	cmp	r1, r3
 8007a6a:	d002      	beq.n	8007a72 <__sflush_r+0x92>
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f7ff fae3 	bl	8007038 <_free_r>
 8007a72:	2000      	movs	r0, #0
 8007a74:	6360      	str	r0, [r4, #52]	; 0x34
 8007a76:	e7c1      	b.n	80079fc <__sflush_r+0x1c>
 8007a78:	6a21      	ldr	r1, [r4, #32]
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	4628      	mov	r0, r5
 8007a7e:	47b0      	blx	r6
 8007a80:	1c41      	adds	r1, r0, #1
 8007a82:	d1c7      	bne.n	8007a14 <__sflush_r+0x34>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d0c4      	beq.n	8007a14 <__sflush_r+0x34>
 8007a8a:	2b1d      	cmp	r3, #29
 8007a8c:	d001      	beq.n	8007a92 <__sflush_r+0xb2>
 8007a8e:	2b16      	cmp	r3, #22
 8007a90:	d101      	bne.n	8007a96 <__sflush_r+0xb6>
 8007a92:	602f      	str	r7, [r5, #0]
 8007a94:	e7b1      	b.n	80079fa <__sflush_r+0x1a>
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a9c:	81a3      	strh	r3, [r4, #12]
 8007a9e:	e7ad      	b.n	80079fc <__sflush_r+0x1c>
 8007aa0:	690f      	ldr	r7, [r1, #16]
 8007aa2:	2f00      	cmp	r7, #0
 8007aa4:	d0a9      	beq.n	80079fa <__sflush_r+0x1a>
 8007aa6:	0793      	lsls	r3, r2, #30
 8007aa8:	680e      	ldr	r6, [r1, #0]
 8007aaa:	bf08      	it	eq
 8007aac:	694b      	ldreq	r3, [r1, #20]
 8007aae:	600f      	str	r7, [r1, #0]
 8007ab0:	bf18      	it	ne
 8007ab2:	2300      	movne	r3, #0
 8007ab4:	eba6 0807 	sub.w	r8, r6, r7
 8007ab8:	608b      	str	r3, [r1, #8]
 8007aba:	f1b8 0f00 	cmp.w	r8, #0
 8007abe:	dd9c      	ble.n	80079fa <__sflush_r+0x1a>
 8007ac0:	6a21      	ldr	r1, [r4, #32]
 8007ac2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007ac4:	4643      	mov	r3, r8
 8007ac6:	463a      	mov	r2, r7
 8007ac8:	4628      	mov	r0, r5
 8007aca:	47b0      	blx	r6
 8007acc:	2800      	cmp	r0, #0
 8007ace:	dc06      	bgt.n	8007ade <__sflush_r+0xfe>
 8007ad0:	89a3      	ldrh	r3, [r4, #12]
 8007ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ad6:	81a3      	strh	r3, [r4, #12]
 8007ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8007adc:	e78e      	b.n	80079fc <__sflush_r+0x1c>
 8007ade:	4407      	add	r7, r0
 8007ae0:	eba8 0800 	sub.w	r8, r8, r0
 8007ae4:	e7e9      	b.n	8007aba <__sflush_r+0xda>
 8007ae6:	bf00      	nop
 8007ae8:	20400001 	.word	0x20400001

08007aec <_fflush_r>:
 8007aec:	b538      	push	{r3, r4, r5, lr}
 8007aee:	690b      	ldr	r3, [r1, #16]
 8007af0:	4605      	mov	r5, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	b913      	cbnz	r3, 8007afc <_fflush_r+0x10>
 8007af6:	2500      	movs	r5, #0
 8007af8:	4628      	mov	r0, r5
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	b118      	cbz	r0, 8007b06 <_fflush_r+0x1a>
 8007afe:	6983      	ldr	r3, [r0, #24]
 8007b00:	b90b      	cbnz	r3, 8007b06 <_fflush_r+0x1a>
 8007b02:	f000 f887 	bl	8007c14 <__sinit>
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <_fflush_r+0x6c>)
 8007b08:	429c      	cmp	r4, r3
 8007b0a:	d11b      	bne.n	8007b44 <_fflush_r+0x58>
 8007b0c:	686c      	ldr	r4, [r5, #4]
 8007b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0ef      	beq.n	8007af6 <_fflush_r+0xa>
 8007b16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b18:	07d0      	lsls	r0, r2, #31
 8007b1a:	d404      	bmi.n	8007b26 <_fflush_r+0x3a>
 8007b1c:	0599      	lsls	r1, r3, #22
 8007b1e:	d402      	bmi.n	8007b26 <_fflush_r+0x3a>
 8007b20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b22:	f000 f915 	bl	8007d50 <__retarget_lock_acquire_recursive>
 8007b26:	4628      	mov	r0, r5
 8007b28:	4621      	mov	r1, r4
 8007b2a:	f7ff ff59 	bl	80079e0 <__sflush_r>
 8007b2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b30:	07da      	lsls	r2, r3, #31
 8007b32:	4605      	mov	r5, r0
 8007b34:	d4e0      	bmi.n	8007af8 <_fflush_r+0xc>
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	059b      	lsls	r3, r3, #22
 8007b3a:	d4dd      	bmi.n	8007af8 <_fflush_r+0xc>
 8007b3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b3e:	f000 f908 	bl	8007d52 <__retarget_lock_release_recursive>
 8007b42:	e7d9      	b.n	8007af8 <_fflush_r+0xc>
 8007b44:	4b05      	ldr	r3, [pc, #20]	; (8007b5c <_fflush_r+0x70>)
 8007b46:	429c      	cmp	r4, r3
 8007b48:	d101      	bne.n	8007b4e <_fflush_r+0x62>
 8007b4a:	68ac      	ldr	r4, [r5, #8]
 8007b4c:	e7df      	b.n	8007b0e <_fflush_r+0x22>
 8007b4e:	4b04      	ldr	r3, [pc, #16]	; (8007b60 <_fflush_r+0x74>)
 8007b50:	429c      	cmp	r4, r3
 8007b52:	bf08      	it	eq
 8007b54:	68ec      	ldreq	r4, [r5, #12]
 8007b56:	e7da      	b.n	8007b0e <_fflush_r+0x22>
 8007b58:	0800844c 	.word	0x0800844c
 8007b5c:	0800846c 	.word	0x0800846c
 8007b60:	0800842c 	.word	0x0800842c

08007b64 <std>:
 8007b64:	2300      	movs	r3, #0
 8007b66:	b510      	push	{r4, lr}
 8007b68:	4604      	mov	r4, r0
 8007b6a:	e9c0 3300 	strd	r3, r3, [r0]
 8007b6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b72:	6083      	str	r3, [r0, #8]
 8007b74:	8181      	strh	r1, [r0, #12]
 8007b76:	6643      	str	r3, [r0, #100]	; 0x64
 8007b78:	81c2      	strh	r2, [r0, #14]
 8007b7a:	6183      	str	r3, [r0, #24]
 8007b7c:	4619      	mov	r1, r3
 8007b7e:	2208      	movs	r2, #8
 8007b80:	305c      	adds	r0, #92	; 0x5c
 8007b82:	f7fd fba7 	bl	80052d4 <memset>
 8007b86:	4b05      	ldr	r3, [pc, #20]	; (8007b9c <std+0x38>)
 8007b88:	6263      	str	r3, [r4, #36]	; 0x24
 8007b8a:	4b05      	ldr	r3, [pc, #20]	; (8007ba0 <std+0x3c>)
 8007b8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b8e:	4b05      	ldr	r3, [pc, #20]	; (8007ba4 <std+0x40>)
 8007b90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b92:	4b05      	ldr	r3, [pc, #20]	; (8007ba8 <std+0x44>)
 8007b94:	6224      	str	r4, [r4, #32]
 8007b96:	6323      	str	r3, [r4, #48]	; 0x30
 8007b98:	bd10      	pop	{r4, pc}
 8007b9a:	bf00      	nop
 8007b9c:	08007eb5 	.word	0x08007eb5
 8007ba0:	08007ed7 	.word	0x08007ed7
 8007ba4:	08007f0f 	.word	0x08007f0f
 8007ba8:	08007f33 	.word	0x08007f33

08007bac <_cleanup_r>:
 8007bac:	4901      	ldr	r1, [pc, #4]	; (8007bb4 <_cleanup_r+0x8>)
 8007bae:	f000 b8af 	b.w	8007d10 <_fwalk_reent>
 8007bb2:	bf00      	nop
 8007bb4:	08007aed 	.word	0x08007aed

08007bb8 <__sfmoreglue>:
 8007bb8:	b570      	push	{r4, r5, r6, lr}
 8007bba:	1e4a      	subs	r2, r1, #1
 8007bbc:	2568      	movs	r5, #104	; 0x68
 8007bbe:	4355      	muls	r5, r2
 8007bc0:	460e      	mov	r6, r1
 8007bc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bc6:	f7ff fa87 	bl	80070d8 <_malloc_r>
 8007bca:	4604      	mov	r4, r0
 8007bcc:	b140      	cbz	r0, 8007be0 <__sfmoreglue+0x28>
 8007bce:	2100      	movs	r1, #0
 8007bd0:	e9c0 1600 	strd	r1, r6, [r0]
 8007bd4:	300c      	adds	r0, #12
 8007bd6:	60a0      	str	r0, [r4, #8]
 8007bd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007bdc:	f7fd fb7a 	bl	80052d4 <memset>
 8007be0:	4620      	mov	r0, r4
 8007be2:	bd70      	pop	{r4, r5, r6, pc}

08007be4 <__sfp_lock_acquire>:
 8007be4:	4801      	ldr	r0, [pc, #4]	; (8007bec <__sfp_lock_acquire+0x8>)
 8007be6:	f000 b8b3 	b.w	8007d50 <__retarget_lock_acquire_recursive>
 8007bea:	bf00      	nop
 8007bec:	2000034c 	.word	0x2000034c

08007bf0 <__sfp_lock_release>:
 8007bf0:	4801      	ldr	r0, [pc, #4]	; (8007bf8 <__sfp_lock_release+0x8>)
 8007bf2:	f000 b8ae 	b.w	8007d52 <__retarget_lock_release_recursive>
 8007bf6:	bf00      	nop
 8007bf8:	2000034c 	.word	0x2000034c

08007bfc <__sinit_lock_acquire>:
 8007bfc:	4801      	ldr	r0, [pc, #4]	; (8007c04 <__sinit_lock_acquire+0x8>)
 8007bfe:	f000 b8a7 	b.w	8007d50 <__retarget_lock_acquire_recursive>
 8007c02:	bf00      	nop
 8007c04:	20000347 	.word	0x20000347

08007c08 <__sinit_lock_release>:
 8007c08:	4801      	ldr	r0, [pc, #4]	; (8007c10 <__sinit_lock_release+0x8>)
 8007c0a:	f000 b8a2 	b.w	8007d52 <__retarget_lock_release_recursive>
 8007c0e:	bf00      	nop
 8007c10:	20000347 	.word	0x20000347

08007c14 <__sinit>:
 8007c14:	b510      	push	{r4, lr}
 8007c16:	4604      	mov	r4, r0
 8007c18:	f7ff fff0 	bl	8007bfc <__sinit_lock_acquire>
 8007c1c:	69a3      	ldr	r3, [r4, #24]
 8007c1e:	b11b      	cbz	r3, 8007c28 <__sinit+0x14>
 8007c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c24:	f7ff bff0 	b.w	8007c08 <__sinit_lock_release>
 8007c28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c2c:	6523      	str	r3, [r4, #80]	; 0x50
 8007c2e:	4b13      	ldr	r3, [pc, #76]	; (8007c7c <__sinit+0x68>)
 8007c30:	4a13      	ldr	r2, [pc, #76]	; (8007c80 <__sinit+0x6c>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c36:	42a3      	cmp	r3, r4
 8007c38:	bf04      	itt	eq
 8007c3a:	2301      	moveq	r3, #1
 8007c3c:	61a3      	streq	r3, [r4, #24]
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 f820 	bl	8007c84 <__sfp>
 8007c44:	6060      	str	r0, [r4, #4]
 8007c46:	4620      	mov	r0, r4
 8007c48:	f000 f81c 	bl	8007c84 <__sfp>
 8007c4c:	60a0      	str	r0, [r4, #8]
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f000 f818 	bl	8007c84 <__sfp>
 8007c54:	2200      	movs	r2, #0
 8007c56:	60e0      	str	r0, [r4, #12]
 8007c58:	2104      	movs	r1, #4
 8007c5a:	6860      	ldr	r0, [r4, #4]
 8007c5c:	f7ff ff82 	bl	8007b64 <std>
 8007c60:	68a0      	ldr	r0, [r4, #8]
 8007c62:	2201      	movs	r2, #1
 8007c64:	2109      	movs	r1, #9
 8007c66:	f7ff ff7d 	bl	8007b64 <std>
 8007c6a:	68e0      	ldr	r0, [r4, #12]
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	2112      	movs	r1, #18
 8007c70:	f7ff ff78 	bl	8007b64 <std>
 8007c74:	2301      	movs	r3, #1
 8007c76:	61a3      	str	r3, [r4, #24]
 8007c78:	e7d2      	b.n	8007c20 <__sinit+0xc>
 8007c7a:	bf00      	nop
 8007c7c:	080080ac 	.word	0x080080ac
 8007c80:	08007bad 	.word	0x08007bad

08007c84 <__sfp>:
 8007c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c86:	4607      	mov	r7, r0
 8007c88:	f7ff ffac 	bl	8007be4 <__sfp_lock_acquire>
 8007c8c:	4b1e      	ldr	r3, [pc, #120]	; (8007d08 <__sfp+0x84>)
 8007c8e:	681e      	ldr	r6, [r3, #0]
 8007c90:	69b3      	ldr	r3, [r6, #24]
 8007c92:	b913      	cbnz	r3, 8007c9a <__sfp+0x16>
 8007c94:	4630      	mov	r0, r6
 8007c96:	f7ff ffbd 	bl	8007c14 <__sinit>
 8007c9a:	3648      	adds	r6, #72	; 0x48
 8007c9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	d503      	bpl.n	8007cac <__sfp+0x28>
 8007ca4:	6833      	ldr	r3, [r6, #0]
 8007ca6:	b30b      	cbz	r3, 8007cec <__sfp+0x68>
 8007ca8:	6836      	ldr	r6, [r6, #0]
 8007caa:	e7f7      	b.n	8007c9c <__sfp+0x18>
 8007cac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cb0:	b9d5      	cbnz	r5, 8007ce8 <__sfp+0x64>
 8007cb2:	4b16      	ldr	r3, [pc, #88]	; (8007d0c <__sfp+0x88>)
 8007cb4:	60e3      	str	r3, [r4, #12]
 8007cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cba:	6665      	str	r5, [r4, #100]	; 0x64
 8007cbc:	f000 f847 	bl	8007d4e <__retarget_lock_init_recursive>
 8007cc0:	f7ff ff96 	bl	8007bf0 <__sfp_lock_release>
 8007cc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007ccc:	6025      	str	r5, [r4, #0]
 8007cce:	61a5      	str	r5, [r4, #24]
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007cd8:	f7fd fafc 	bl	80052d4 <memset>
 8007cdc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007ce0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ce8:	3468      	adds	r4, #104	; 0x68
 8007cea:	e7d9      	b.n	8007ca0 <__sfp+0x1c>
 8007cec:	2104      	movs	r1, #4
 8007cee:	4638      	mov	r0, r7
 8007cf0:	f7ff ff62 	bl	8007bb8 <__sfmoreglue>
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	6030      	str	r0, [r6, #0]
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d1d5      	bne.n	8007ca8 <__sfp+0x24>
 8007cfc:	f7ff ff78 	bl	8007bf0 <__sfp_lock_release>
 8007d00:	230c      	movs	r3, #12
 8007d02:	603b      	str	r3, [r7, #0]
 8007d04:	e7ee      	b.n	8007ce4 <__sfp+0x60>
 8007d06:	bf00      	nop
 8007d08:	080080ac 	.word	0x080080ac
 8007d0c:	ffff0001 	.word	0xffff0001

08007d10 <_fwalk_reent>:
 8007d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d14:	4606      	mov	r6, r0
 8007d16:	4688      	mov	r8, r1
 8007d18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d1c:	2700      	movs	r7, #0
 8007d1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d22:	f1b9 0901 	subs.w	r9, r9, #1
 8007d26:	d505      	bpl.n	8007d34 <_fwalk_reent+0x24>
 8007d28:	6824      	ldr	r4, [r4, #0]
 8007d2a:	2c00      	cmp	r4, #0
 8007d2c:	d1f7      	bne.n	8007d1e <_fwalk_reent+0xe>
 8007d2e:	4638      	mov	r0, r7
 8007d30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d34:	89ab      	ldrh	r3, [r5, #12]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d907      	bls.n	8007d4a <_fwalk_reent+0x3a>
 8007d3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	d003      	beq.n	8007d4a <_fwalk_reent+0x3a>
 8007d42:	4629      	mov	r1, r5
 8007d44:	4630      	mov	r0, r6
 8007d46:	47c0      	blx	r8
 8007d48:	4307      	orrs	r7, r0
 8007d4a:	3568      	adds	r5, #104	; 0x68
 8007d4c:	e7e9      	b.n	8007d22 <_fwalk_reent+0x12>

08007d4e <__retarget_lock_init_recursive>:
 8007d4e:	4770      	bx	lr

08007d50 <__retarget_lock_acquire_recursive>:
 8007d50:	4770      	bx	lr

08007d52 <__retarget_lock_release_recursive>:
 8007d52:	4770      	bx	lr

08007d54 <__swhatbuf_r>:
 8007d54:	b570      	push	{r4, r5, r6, lr}
 8007d56:	460e      	mov	r6, r1
 8007d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d5c:	2900      	cmp	r1, #0
 8007d5e:	b096      	sub	sp, #88	; 0x58
 8007d60:	4614      	mov	r4, r2
 8007d62:	461d      	mov	r5, r3
 8007d64:	da07      	bge.n	8007d76 <__swhatbuf_r+0x22>
 8007d66:	2300      	movs	r3, #0
 8007d68:	602b      	str	r3, [r5, #0]
 8007d6a:	89b3      	ldrh	r3, [r6, #12]
 8007d6c:	061a      	lsls	r2, r3, #24
 8007d6e:	d410      	bmi.n	8007d92 <__swhatbuf_r+0x3e>
 8007d70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d74:	e00e      	b.n	8007d94 <__swhatbuf_r+0x40>
 8007d76:	466a      	mov	r2, sp
 8007d78:	f000 f902 	bl	8007f80 <_fstat_r>
 8007d7c:	2800      	cmp	r0, #0
 8007d7e:	dbf2      	blt.n	8007d66 <__swhatbuf_r+0x12>
 8007d80:	9a01      	ldr	r2, [sp, #4]
 8007d82:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d86:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d8a:	425a      	negs	r2, r3
 8007d8c:	415a      	adcs	r2, r3
 8007d8e:	602a      	str	r2, [r5, #0]
 8007d90:	e7ee      	b.n	8007d70 <__swhatbuf_r+0x1c>
 8007d92:	2340      	movs	r3, #64	; 0x40
 8007d94:	2000      	movs	r0, #0
 8007d96:	6023      	str	r3, [r4, #0]
 8007d98:	b016      	add	sp, #88	; 0x58
 8007d9a:	bd70      	pop	{r4, r5, r6, pc}

08007d9c <__smakebuf_r>:
 8007d9c:	898b      	ldrh	r3, [r1, #12]
 8007d9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007da0:	079d      	lsls	r5, r3, #30
 8007da2:	4606      	mov	r6, r0
 8007da4:	460c      	mov	r4, r1
 8007da6:	d507      	bpl.n	8007db8 <__smakebuf_r+0x1c>
 8007da8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	6123      	str	r3, [r4, #16]
 8007db0:	2301      	movs	r3, #1
 8007db2:	6163      	str	r3, [r4, #20]
 8007db4:	b002      	add	sp, #8
 8007db6:	bd70      	pop	{r4, r5, r6, pc}
 8007db8:	ab01      	add	r3, sp, #4
 8007dba:	466a      	mov	r2, sp
 8007dbc:	f7ff ffca 	bl	8007d54 <__swhatbuf_r>
 8007dc0:	9900      	ldr	r1, [sp, #0]
 8007dc2:	4605      	mov	r5, r0
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f7ff f987 	bl	80070d8 <_malloc_r>
 8007dca:	b948      	cbnz	r0, 8007de0 <__smakebuf_r+0x44>
 8007dcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dd0:	059a      	lsls	r2, r3, #22
 8007dd2:	d4ef      	bmi.n	8007db4 <__smakebuf_r+0x18>
 8007dd4:	f023 0303 	bic.w	r3, r3, #3
 8007dd8:	f043 0302 	orr.w	r3, r3, #2
 8007ddc:	81a3      	strh	r3, [r4, #12]
 8007dde:	e7e3      	b.n	8007da8 <__smakebuf_r+0xc>
 8007de0:	4b0d      	ldr	r3, [pc, #52]	; (8007e18 <__smakebuf_r+0x7c>)
 8007de2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007de4:	89a3      	ldrh	r3, [r4, #12]
 8007de6:	6020      	str	r0, [r4, #0]
 8007de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dec:	81a3      	strh	r3, [r4, #12]
 8007dee:	9b00      	ldr	r3, [sp, #0]
 8007df0:	6163      	str	r3, [r4, #20]
 8007df2:	9b01      	ldr	r3, [sp, #4]
 8007df4:	6120      	str	r0, [r4, #16]
 8007df6:	b15b      	cbz	r3, 8007e10 <__smakebuf_r+0x74>
 8007df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f000 f8d1 	bl	8007fa4 <_isatty_r>
 8007e02:	b128      	cbz	r0, 8007e10 <__smakebuf_r+0x74>
 8007e04:	89a3      	ldrh	r3, [r4, #12]
 8007e06:	f023 0303 	bic.w	r3, r3, #3
 8007e0a:	f043 0301 	orr.w	r3, r3, #1
 8007e0e:	81a3      	strh	r3, [r4, #12]
 8007e10:	89a0      	ldrh	r0, [r4, #12]
 8007e12:	4305      	orrs	r5, r0
 8007e14:	81a5      	strh	r5, [r4, #12]
 8007e16:	e7cd      	b.n	8007db4 <__smakebuf_r+0x18>
 8007e18:	08007bad 	.word	0x08007bad

08007e1c <_malloc_usable_size_r>:
 8007e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e20:	1f18      	subs	r0, r3, #4
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	bfbc      	itt	lt
 8007e26:	580b      	ldrlt	r3, [r1, r0]
 8007e28:	18c0      	addlt	r0, r0, r3
 8007e2a:	4770      	bx	lr

08007e2c <_raise_r>:
 8007e2c:	291f      	cmp	r1, #31
 8007e2e:	b538      	push	{r3, r4, r5, lr}
 8007e30:	4604      	mov	r4, r0
 8007e32:	460d      	mov	r5, r1
 8007e34:	d904      	bls.n	8007e40 <_raise_r+0x14>
 8007e36:	2316      	movs	r3, #22
 8007e38:	6003      	str	r3, [r0, #0]
 8007e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3e:	bd38      	pop	{r3, r4, r5, pc}
 8007e40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e42:	b112      	cbz	r2, 8007e4a <_raise_r+0x1e>
 8007e44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007e48:	b94b      	cbnz	r3, 8007e5e <_raise_r+0x32>
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	f000 f830 	bl	8007eb0 <_getpid_r>
 8007e50:	462a      	mov	r2, r5
 8007e52:	4601      	mov	r1, r0
 8007e54:	4620      	mov	r0, r4
 8007e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e5a:	f000 b817 	b.w	8007e8c <_kill_r>
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d00a      	beq.n	8007e78 <_raise_r+0x4c>
 8007e62:	1c59      	adds	r1, r3, #1
 8007e64:	d103      	bne.n	8007e6e <_raise_r+0x42>
 8007e66:	2316      	movs	r3, #22
 8007e68:	6003      	str	r3, [r0, #0]
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	e7e7      	b.n	8007e3e <_raise_r+0x12>
 8007e6e:	2400      	movs	r4, #0
 8007e70:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007e74:	4628      	mov	r0, r5
 8007e76:	4798      	blx	r3
 8007e78:	2000      	movs	r0, #0
 8007e7a:	e7e0      	b.n	8007e3e <_raise_r+0x12>

08007e7c <raise>:
 8007e7c:	4b02      	ldr	r3, [pc, #8]	; (8007e88 <raise+0xc>)
 8007e7e:	4601      	mov	r1, r0
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	f7ff bfd3 	b.w	8007e2c <_raise_r>
 8007e86:	bf00      	nop
 8007e88:	2000000c 	.word	0x2000000c

08007e8c <_kill_r>:
 8007e8c:	b538      	push	{r3, r4, r5, lr}
 8007e8e:	4d07      	ldr	r5, [pc, #28]	; (8007eac <_kill_r+0x20>)
 8007e90:	2300      	movs	r3, #0
 8007e92:	4604      	mov	r4, r0
 8007e94:	4608      	mov	r0, r1
 8007e96:	4611      	mov	r1, r2
 8007e98:	602b      	str	r3, [r5, #0]
 8007e9a:	f7f9 fc0f 	bl	80016bc <_kill>
 8007e9e:	1c43      	adds	r3, r0, #1
 8007ea0:	d102      	bne.n	8007ea8 <_kill_r+0x1c>
 8007ea2:	682b      	ldr	r3, [r5, #0]
 8007ea4:	b103      	cbz	r3, 8007ea8 <_kill_r+0x1c>
 8007ea6:	6023      	str	r3, [r4, #0]
 8007ea8:	bd38      	pop	{r3, r4, r5, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000340 	.word	0x20000340

08007eb0 <_getpid_r>:
 8007eb0:	f7f9 bbfc 	b.w	80016ac <_getpid>

08007eb4 <__sread>:
 8007eb4:	b510      	push	{r4, lr}
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ebc:	f000 f894 	bl	8007fe8 <_read_r>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	bfab      	itete	ge
 8007ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ec8:	181b      	addge	r3, r3, r0
 8007eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ece:	bfac      	ite	ge
 8007ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ed2:	81a3      	strhlt	r3, [r4, #12]
 8007ed4:	bd10      	pop	{r4, pc}

08007ed6 <__swrite>:
 8007ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eda:	461f      	mov	r7, r3
 8007edc:	898b      	ldrh	r3, [r1, #12]
 8007ede:	05db      	lsls	r3, r3, #23
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	4616      	mov	r6, r2
 8007ee6:	d505      	bpl.n	8007ef4 <__swrite+0x1e>
 8007ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007eec:	2302      	movs	r3, #2
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f000 f868 	bl	8007fc4 <_lseek_r>
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007efa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007efe:	81a3      	strh	r3, [r4, #12]
 8007f00:	4632      	mov	r2, r6
 8007f02:	463b      	mov	r3, r7
 8007f04:	4628      	mov	r0, r5
 8007f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0a:	f000 b817 	b.w	8007f3c <_write_r>

08007f0e <__sseek>:
 8007f0e:	b510      	push	{r4, lr}
 8007f10:	460c      	mov	r4, r1
 8007f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f16:	f000 f855 	bl	8007fc4 <_lseek_r>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	bf15      	itete	ne
 8007f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f2a:	81a3      	strheq	r3, [r4, #12]
 8007f2c:	bf18      	it	ne
 8007f2e:	81a3      	strhne	r3, [r4, #12]
 8007f30:	bd10      	pop	{r4, pc}

08007f32 <__sclose>:
 8007f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f36:	f000 b813 	b.w	8007f60 <_close_r>
	...

08007f3c <_write_r>:
 8007f3c:	b538      	push	{r3, r4, r5, lr}
 8007f3e:	4d07      	ldr	r5, [pc, #28]	; (8007f5c <_write_r+0x20>)
 8007f40:	4604      	mov	r4, r0
 8007f42:	4608      	mov	r0, r1
 8007f44:	4611      	mov	r1, r2
 8007f46:	2200      	movs	r2, #0
 8007f48:	602a      	str	r2, [r5, #0]
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f7f9 fbed 	bl	800172a <_write>
 8007f50:	1c43      	adds	r3, r0, #1
 8007f52:	d102      	bne.n	8007f5a <_write_r+0x1e>
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	b103      	cbz	r3, 8007f5a <_write_r+0x1e>
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	bd38      	pop	{r3, r4, r5, pc}
 8007f5c:	20000340 	.word	0x20000340

08007f60 <_close_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d06      	ldr	r5, [pc, #24]	; (8007f7c <_close_r+0x1c>)
 8007f64:	2300      	movs	r3, #0
 8007f66:	4604      	mov	r4, r0
 8007f68:	4608      	mov	r0, r1
 8007f6a:	602b      	str	r3, [r5, #0]
 8007f6c:	f7f9 fbf9 	bl	8001762 <_close>
 8007f70:	1c43      	adds	r3, r0, #1
 8007f72:	d102      	bne.n	8007f7a <_close_r+0x1a>
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	b103      	cbz	r3, 8007f7a <_close_r+0x1a>
 8007f78:	6023      	str	r3, [r4, #0]
 8007f7a:	bd38      	pop	{r3, r4, r5, pc}
 8007f7c:	20000340 	.word	0x20000340

08007f80 <_fstat_r>:
 8007f80:	b538      	push	{r3, r4, r5, lr}
 8007f82:	4d07      	ldr	r5, [pc, #28]	; (8007fa0 <_fstat_r+0x20>)
 8007f84:	2300      	movs	r3, #0
 8007f86:	4604      	mov	r4, r0
 8007f88:	4608      	mov	r0, r1
 8007f8a:	4611      	mov	r1, r2
 8007f8c:	602b      	str	r3, [r5, #0]
 8007f8e:	f7f9 fbf4 	bl	800177a <_fstat>
 8007f92:	1c43      	adds	r3, r0, #1
 8007f94:	d102      	bne.n	8007f9c <_fstat_r+0x1c>
 8007f96:	682b      	ldr	r3, [r5, #0]
 8007f98:	b103      	cbz	r3, 8007f9c <_fstat_r+0x1c>
 8007f9a:	6023      	str	r3, [r4, #0]
 8007f9c:	bd38      	pop	{r3, r4, r5, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20000340 	.word	0x20000340

08007fa4 <_isatty_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4d06      	ldr	r5, [pc, #24]	; (8007fc0 <_isatty_r+0x1c>)
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4604      	mov	r4, r0
 8007fac:	4608      	mov	r0, r1
 8007fae:	602b      	str	r3, [r5, #0]
 8007fb0:	f7f9 fbf3 	bl	800179a <_isatty>
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	d102      	bne.n	8007fbe <_isatty_r+0x1a>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	b103      	cbz	r3, 8007fbe <_isatty_r+0x1a>
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	20000340 	.word	0x20000340

08007fc4 <_lseek_r>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	4d07      	ldr	r5, [pc, #28]	; (8007fe4 <_lseek_r+0x20>)
 8007fc8:	4604      	mov	r4, r0
 8007fca:	4608      	mov	r0, r1
 8007fcc:	4611      	mov	r1, r2
 8007fce:	2200      	movs	r2, #0
 8007fd0:	602a      	str	r2, [r5, #0]
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	f7f9 fbec 	bl	80017b0 <_lseek>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_lseek_r+0x1e>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_lseek_r+0x1e>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	20000340 	.word	0x20000340

08007fe8 <_read_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d07      	ldr	r5, [pc, #28]	; (8008008 <_read_r+0x20>)
 8007fec:	4604      	mov	r4, r0
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	602a      	str	r2, [r5, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f7f9 fb7a 	bl	80016f0 <_read>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_read_r+0x1e>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_read_r+0x1e>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	20000340 	.word	0x20000340

0800800c <_init>:
 800800c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800800e:	bf00      	nop
 8008010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008012:	bc08      	pop	{r3}
 8008014:	469e      	mov	lr, r3
 8008016:	4770      	bx	lr

08008018 <_fini>:
 8008018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800801a:	bf00      	nop
 800801c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800801e:	bc08      	pop	{r3}
 8008020:	469e      	mov	lr, r3
 8008022:	4770      	bx	lr
