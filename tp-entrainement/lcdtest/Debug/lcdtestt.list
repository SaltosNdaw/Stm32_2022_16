
lcdtestt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800454c  0800454c  0001454c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045a4  080045a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080045a4  080045a4  000145a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045ac  080045ac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045ac  080045ac  000145ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045b0  080045b0  000145b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  2000000c  080045c0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  080045c0  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016812  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002785  00000000  00000000  0003684e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  00038fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001098  00000000  00000000  0003a188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002720f  00000000  00000000  0003b220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ffb  00000000  00000000  0006242f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f186c  00000000  00000000  0007842a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00169c96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a10  00000000  00000000  00169cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004534 	.word	0x08004534

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004534 	.word	0x08004534

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	4b2b      	ldr	r3, [pc, #172]	; (8000584 <MX_GPIO_Init+0xc4>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a2a      	ldr	r2, [pc, #168]	; (8000584 <MX_GPIO_Init+0xc4>)
 80004dc:	f043 0304 	orr.w	r3, r3, #4
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b28      	ldr	r3, [pc, #160]	; (8000584 <MX_GPIO_Init+0xc4>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0304 	and.w	r3, r3, #4
 80004ea:	613b      	str	r3, [r7, #16]
 80004ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004ee:	4b25      	ldr	r3, [pc, #148]	; (8000584 <MX_GPIO_Init+0xc4>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4a24      	ldr	r2, [pc, #144]	; (8000584 <MX_GPIO_Init+0xc4>)
 80004f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4b22      	ldr	r3, [pc, #136]	; (8000584 <MX_GPIO_Init+0xc4>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000506:	4b1f      	ldr	r3, [pc, #124]	; (8000584 <MX_GPIO_Init+0xc4>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4a1e      	ldr	r2, [pc, #120]	; (8000584 <MX_GPIO_Init+0xc4>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <MX_GPIO_Init+0xc4>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <MX_GPIO_Init+0xc4>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a18      	ldr	r2, [pc, #96]	; (8000584 <MX_GPIO_Init+0xc4>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b16      	ldr	r3, [pc, #88]	; (8000584 <MX_GPIO_Init+0xc4>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	2160      	movs	r1, #96	; 0x60
 800053a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053e:	f000 ff8f 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000546:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000548:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800054c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054e:	2300      	movs	r3, #0
 8000550:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	4619      	mov	r1, r3
 8000558:	480b      	ldr	r0, [pc, #44]	; (8000588 <MX_GPIO_Init+0xc8>)
 800055a:	f000 fdd7 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA6 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6;
 800055e:	2360      	movs	r3, #96	; 0x60
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000578:	f000 fdc8 	bl	800110c <HAL_GPIO_Init>

}
 800057c:	bf00      	nop
 800057e:	3728      	adds	r7, #40	; 0x28
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40021000 	.word	0x40021000
 8000588:	48000800 	.word	0x48000800

0800058c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_I2C1_Init+0x74>)
 8000592:	4a1c      	ldr	r2, [pc, #112]	; (8000604 <MX_I2C1_Init+0x78>)
 8000594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8000596:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <MX_I2C1_Init+0x74>)
 8000598:	4a1b      	ldr	r2, [pc, #108]	; (8000608 <MX_I2C1_Init+0x7c>)
 800059a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_I2C1_Init+0x74>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a2:	4b17      	ldr	r3, [pc, #92]	; (8000600 <MX_I2C1_Init+0x74>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_I2C1_Init+0x74>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ae:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_I2C1_Init+0x74>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_I2C1_Init+0x74>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005ba:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_I2C1_Init+0x74>)
 80005bc:	2200      	movs	r2, #0
 80005be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_I2C1_Init+0x74>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c6:	480e      	ldr	r0, [pc, #56]	; (8000600 <MX_I2C1_Init+0x74>)
 80005c8:	f000 ff62 	bl	8001490 <HAL_I2C_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80005d2:	f000 fa8e 	bl	8000af2 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <MX_I2C1_Init+0x74>)
 80005da:	f001 fbe3 	bl	8001da4 <HAL_I2CEx_ConfigAnalogFilter>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80005e4:	f000 fa85 	bl	8000af2 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80005e8:	2100      	movs	r1, #0
 80005ea:	4805      	ldr	r0, [pc, #20]	; (8000600 <MX_I2C1_Init+0x74>)
 80005ec:	f001 fc25 	bl	8001e3a <HAL_I2CEx_ConfigDigitalFilter>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80005f6:	f000 fa7c 	bl	8000af2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	2000002c 	.word	0x2000002c
 8000604:	40005400 	.word	0x40005400
 8000608:	10909cec 	.word	0x10909cec

0800060c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b0ac      	sub	sp, #176	; 0xb0
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	2288      	movs	r2, #136	; 0x88
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f003 ff79 	bl	8004524 <memset>
  if(i2cHandle->Instance==I2C1)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a21      	ldr	r2, [pc, #132]	; (80006bc <HAL_I2C_MspInit+0xb0>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d13b      	bne.n	80006b4 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800063c:	2340      	movs	r3, #64	; 0x40
 800063e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000640:	2300      	movs	r3, #0
 8000642:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4618      	mov	r0, r3
 800064a:	f002 fa93 	bl	8002b74 <HAL_RCCEx_PeriphCLKConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000654:	f000 fa4d 	bl	8000af2 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <HAL_I2C_MspInit+0xb4>)
 800065a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065c:	4a18      	ldr	r2, [pc, #96]	; (80006c0 <HAL_I2C_MspInit+0xb4>)
 800065e:	f043 0302 	orr.w	r3, r3, #2
 8000662:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000664:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <HAL_I2C_MspInit+0xb4>)
 8000666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000668:	f003 0302 	and.w	r3, r3, #2
 800066c:	613b      	str	r3, [r7, #16]
 800066e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000670:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000678:	2312      	movs	r3, #18
 800067a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800067e:	2301      	movs	r3, #1
 8000680:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000684:	2303      	movs	r3, #3
 8000686:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800068a:	2304      	movs	r3, #4
 800068c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000694:	4619      	mov	r1, r3
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <HAL_I2C_MspInit+0xb8>)
 8000698:	f000 fd38 	bl	800110c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_I2C_MspInit+0xb4>)
 800069e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006a0:	4a07      	ldr	r2, [pc, #28]	; (80006c0 <HAL_I2C_MspInit+0xb4>)
 80006a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006a6:	6593      	str	r3, [r2, #88]	; 0x58
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <HAL_I2C_MspInit+0xb4>)
 80006aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006b0:	60fb      	str	r3, [r7, #12]
 80006b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006b4:	bf00      	nop
 80006b6:	37b0      	adds	r7, #176	; 0xb0
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40005400 	.word	0x40005400
 80006c0:	40021000 	.word	0x40021000
 80006c4:	48000400 	.word	0x48000400

080006c8 <lcd_init>:
#include "i2c.h"



void lcd_init(I2C_HandleTypeDef* I2Cx, rgb_lcd* DataStruct)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	; 0x28
 80006cc:	af02      	add	r7, sp, #8
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	61fb      	str	r3, [r7, #28]
	DataStruct->_displayfunction |= LCD_2LINE | LCD_5x10DOTS; // MODE 2 LIGNES
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	f043 030c 	orr.w	r3, r3, #12
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	701a      	strb	r2, [r3, #0]
	uint8_t data[2];
	data[0] = 0x80;
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	763b      	strb	r3, [r7, #24]
	data[1] = LCD_FUNCTIONSET | DataStruct->_displayfunction;
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f043 0320 	orr.w	r3, r3, #32
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	767b      	strb	r3, [r7, #25]

	HAL_UART_Transmit(&huart2,(uint8_t *)data,2,10);
 80006f4:	f107 0118 	add.w	r1, r7, #24
 80006f8:	230a      	movs	r3, #10
 80006fa:	2202      	movs	r2, #2
 80006fc:	486c      	ldr	r0, [pc, #432]	; (80008b0 <lcd_init+0x1e8>)
 80006fe:	f003 fa1f 	bl	8003b40 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8000702:	f640 230d 	movw	r3, #2573	; 0xa0d
 8000706:	82bb      	strh	r3, [r7, #20]
	HAL_UART_Transmit(&huart2, (uint8_t *) newline, 2, 10);
 8000708:	f107 0114 	add.w	r1, r7, #20
 800070c:	230a      	movs	r3, #10
 800070e:	2202      	movs	r2, #2
 8000710:	4867      	ldr	r0, [pc, #412]	; (80008b0 <lcd_init+0x1e8>)
 8000712:	f003 fa15 	bl	8003b40 <HAL_UART_Transmit>

	HAL_StatusTypeDef status = HAL_I2C_IsDeviceReady(Handle,LCD_ADDRESS,5,100);
 8000716:	2364      	movs	r3, #100	; 0x64
 8000718:	2205      	movs	r2, #5
 800071a:	217c      	movs	r1, #124	; 0x7c
 800071c:	69f8      	ldr	r0, [r7, #28]
 800071e:	f001 f83b 	bl	8001798 <HAL_I2C_IsDeviceReady>
 8000722:	4603      	mov	r3, r0
 8000724:	74fb      	strb	r3, [r7, #19]
	HAL_UART_Transmit(&huart2,&status,1,10);
 8000726:	f107 0113 	add.w	r1, r7, #19
 800072a:	230a      	movs	r3, #10
 800072c:	2201      	movs	r2, #1
 800072e:	4860      	ldr	r0, [pc, #384]	; (80008b0 <lcd_init+0x1e8>)
 8000730:	f003 fa06 	bl	8003b40 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000734:	2032      	movs	r0, #50	; 0x32
 8000736:	f000 fbdf 	bl	8000ef8 <HAL_Delay>

	HAL_StatusTypeDef status2 = HAL_I2C_Master_Transmit(Handle, LCD_ADDRESS, data,2,5000);
 800073a:	f107 0218 	add.w	r2, r7, #24
 800073e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000742:	9300      	str	r3, [sp, #0]
 8000744:	2302      	movs	r3, #2
 8000746:	217c      	movs	r1, #124	; 0x7c
 8000748:	69f8      	ldr	r0, [r7, #28]
 800074a:	f000 ff31 	bl	80015b0 <HAL_I2C_Master_Transmit>
 800074e:	4603      	mov	r3, r0
 8000750:	74bb      	strb	r3, [r7, #18]
	HAL_UART_Transmit(&huart2,&status2,1,10);
 8000752:	f107 0112 	add.w	r1, r7, #18
 8000756:	230a      	movs	r3, #10
 8000758:	2201      	movs	r2, #1
 800075a:	4855      	ldr	r0, [pc, #340]	; (80008b0 <lcd_init+0x1e8>)
 800075c:	f003 f9f0 	bl	8003b40 <HAL_UART_Transmit>
	HAL_Delay(50);
 8000760:	2032      	movs	r0, #50	; 0x32
 8000762:	f000 fbc9 	bl	8000ef8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000766:	f107 0218 	add.w	r2, r7, #24
 800076a:	f241 3388 	movw	r3, #5000	; 0x1388
 800076e:	9300      	str	r3, [sp, #0]
 8000770:	2302      	movs	r3, #2
 8000772:	217c      	movs	r1, #124	; 0x7c
 8000774:	69f8      	ldr	r0, [r7, #28]
 8000776:	f000 ff1b 	bl	80015b0 <HAL_I2C_Master_Transmit>
	HAL_Delay(5);
 800077a:	2005      	movs	r0, #5
 800077c:	f000 fbbc 	bl	8000ef8 <HAL_Delay>

	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,data,2,5000);
 8000780:	f107 0218 	add.w	r2, r7, #24
 8000784:	f241 3388 	movw	r3, #5000	; 0x1388
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2302      	movs	r3, #2
 800078c:	217c      	movs	r1, #124	; 0x7c
 800078e:	69f8      	ldr	r0, [r7, #28]
 8000790:	f000 ff0e 	bl	80015b0 <HAL_I2C_Master_Transmit>

	// CONTROL
	DataStruct->_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	2204      	movs	r2, #4
 8000798:	705a      	strb	r2, [r3, #1]

	data[1] = LCD_DISPLAYCONTROL | DataStruct->_displaycontrol;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	785b      	ldrb	r3, [r3, #1]
 800079e:	f043 0308 	orr.w	r3, r3, #8
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
 80007a6:	f107 0218 	add.w	r2, r7, #24
 80007aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2302      	movs	r3, #2
 80007b2:	217c      	movs	r1, #124	; 0x7c
 80007b4:	69f8      	ldr	r0, [r7, #28]
 80007b6:	f000 fefb 	bl	80015b0 <HAL_I2C_Master_Transmit>

	data[1] = LCD_CLEARDISPLAY;
 80007ba:	2301      	movs	r3, #1
 80007bc:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80007be:	f107 0218 	add.w	r2, r7, #24
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	9300      	str	r3, [sp, #0]
 80007c8:	2302      	movs	r3, #2
 80007ca:	217c      	movs	r1, #124	; 0x7c
 80007cc:	69f8      	ldr	r0, [r7, #28]
 80007ce:	f000 feef 	bl	80015b0 <HAL_I2C_Master_Transmit>
	HAL_Delay(2);
 80007d2:	2002      	movs	r0, #2
 80007d4:	f000 fb90 	bl	8000ef8 <HAL_Delay>

	// MODE
	DataStruct->_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2202      	movs	r2, #2
 80007dc:	709a      	strb	r2, [r3, #2]
	data[1] = LCD_ENTRYMODESET | DataStruct->_displaymode;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	789b      	ldrb	r3, [r3, #2]
 80007e2:	f043 0304 	orr.w	r3, r3, #4
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	767b      	strb	r3, [r7, #25]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)LCD_ADDRESS, (uint8_t *)data,2,1000);
 80007ea:	f107 0218 	add.w	r2, r7, #24
 80007ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f2:	9300      	str	r3, [sp, #0]
 80007f4:	2302      	movs	r3, #2
 80007f6:	217c      	movs	r1, #124	; 0x7c
 80007f8:	69f8      	ldr	r0, [r7, #28]
 80007fa:	f000 fed9 	bl	80015b0 <HAL_I2C_Master_Transmit>

	// initialisation du lcd_rgb_Backight
		uint8_t data_backlight[2];
		data_backlight[0] = REG_MODE1;
 80007fe:	2300      	movs	r3, #0
 8000800:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000806:	f107 0210 	add.w	r2, r7, #16
 800080a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800080e:	9300      	str	r3, [sp, #0]
 8000810:	2302      	movs	r3, #2
 8000812:	21c4      	movs	r1, #196	; 0xc4
 8000814:	69f8      	ldr	r0, [r7, #28]
 8000816:	f000 fecb 	bl	80015b0 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_OUTPUT;
 800081a:	2308      	movs	r3, #8
 800081c:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0xFF;
 800081e:	23ff      	movs	r3, #255	; 0xff
 8000820:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 8000822:	f107 0210 	add.w	r2, r7, #16
 8000826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082a:	9300      	str	r3, [sp, #0]
 800082c:	2302      	movs	r3, #2
 800082e:	21c4      	movs	r1, #196	; 0xc4
 8000830:	69f8      	ldr	r0, [r7, #28]
 8000832:	f000 febd 	bl	80015b0 <HAL_I2C_Master_Transmit>

		data_backlight[0] = REG_MODE2;
 8000836:	2301      	movs	r3, #1
 8000838:	743b      	strb	r3, [r7, #16]
		data_backlight[1] = 0x20;
 800083a:	2320      	movs	r3, #32
 800083c:	747b      	strb	r3, [r7, #17]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_backlight,2,1000);
 800083e:	f107 0210 	add.w	r2, r7, #16
 8000842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000846:	9300      	str	r3, [sp, #0]
 8000848:	2302      	movs	r3, #2
 800084a:	21c4      	movs	r1, #196	; 0xc4
 800084c:	69f8      	ldr	r0, [r7, #28]
 800084e:	f000 feaf 	bl	80015b0 <HAL_I2C_Master_Transmit>

		//couleur du LCD en Blanc
		uint8_t data_rgb[2];
		data_rgb[0] = REG_RED;
 8000852:	2304      	movs	r3, #4
 8000854:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000856:	23ff      	movs	r3, #255	; 0xff
 8000858:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 800085a:	f107 020c 	add.w	r2, r7, #12
 800085e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2302      	movs	r3, #2
 8000866:	21c4      	movs	r1, #196	; 0xc4
 8000868:	69f8      	ldr	r0, [r7, #28]
 800086a:	f000 fea1 	bl	80015b0 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_GREEN;
 800086e:	2303      	movs	r3, #3
 8000870:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 8000872:	23ff      	movs	r3, #255	; 0xff
 8000874:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000876:	f107 020c 	add.w	r2, r7, #12
 800087a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2302      	movs	r3, #2
 8000882:	21c4      	movs	r1, #196	; 0xc4
 8000884:	69f8      	ldr	r0, [r7, #28]
 8000886:	f000 fe93 	bl	80015b0 <HAL_I2C_Master_Transmit>

		data_rgb[0] = REG_BLUE;
 800088a:	2302      	movs	r3, #2
 800088c:	733b      	strb	r3, [r7, #12]
		data_rgb[1] = 255;
 800088e:	23ff      	movs	r3, #255	; 0xff
 8000890:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_rgb,2,1000);
 8000892:	f107 020c 	add.w	r2, r7, #12
 8000896:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2302      	movs	r3, #2
 800089e:	21c4      	movs	r1, #196	; 0xc4
 80008a0:	69f8      	ldr	r0, [r7, #28]
 80008a2:	f000 fe85 	bl	80015b0 <HAL_I2C_Master_Transmit>


}
 80008a6:	bf00      	nop
 80008a8:	3720      	adds	r7, #32
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000c4 	.word	0x200000c4

080008b4 <lcd_print>:
    unsigned char data[2] = {0x40, value};
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS, data,2,1000);
}

void lcd_print(I2C_HandleTypeDef* I2Cx, char *str)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
	I2C_HandleTypeDef* Handle = I2Cx;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	613b      	str	r3, [r7, #16]
    char data[2];
    data[0] = 0x40;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	733b      	strb	r3, [r7, #12]
    int i=0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80008ca:	e011      	b.n	80008f0 <lcd_print+0x3c>
    {
            data[1] = str[i];
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	4413      	add	r3, r2
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	737b      	strb	r3, [r7, #13]
            HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 80008d6:	f107 020c 	add.w	r2, r7, #12
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2302      	movs	r3, #2
 80008e2:	217c      	movs	r1, #124	; 0x7c
 80008e4:	6938      	ldr	r0, [r7, #16]
 80008e6:	f000 fe63 	bl	80015b0 <HAL_I2C_Master_Transmit>
            i++;
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	3301      	adds	r3, #1
 80008ee:	617b      	str	r3, [r7, #20]
    while(str[i] != '\0')
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1e7      	bne.n	80008cc <lcd_print+0x18>
   }
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <lcd_position>:

void lcd_position(I2C_HandleTypeDef* I2Cx,char col, char row) // position du curseur le lcd
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b086      	sub	sp, #24
 800090a:	af02      	add	r7, sp, #8
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	460b      	mov	r3, r1
 8000910:	70fb      	strb	r3, [r7, #3]
 8000912:	4613      	mov	r3, r2
 8000914:	70bb      	strb	r3, [r7, #2]
	I2C_HandleTypeDef* Handle = I2Cx;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	60fb      	str	r3, [r7, #12]
    if(row == 0)
 800091a:	78bb      	ldrb	r3, [r7, #2]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d104      	bne.n	800092a <lcd_position+0x24>
    {
        col = col | 0x80;
 8000920:	78fb      	ldrb	r3, [r7, #3]
 8000922:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000926:	70fb      	strb	r3, [r7, #3]
 8000928:	e003      	b.n	8000932 <lcd_position+0x2c>
    }
    else
    {
        col = col | 0xc0;
 800092a:	78fb      	ldrb	r3, [r7, #3]
 800092c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8000930:	70fb      	strb	r3, [r7, #3]
    }

    char data[2];
    data[0] = 0x80;
 8000932:	2380      	movs	r3, #128	; 0x80
 8000934:	723b      	strb	r3, [r7, #8]
    data[1] = col;
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	727b      	strb	r3, [r7, #9]
    HAL_I2C_Master_Transmit(Handle,LCD_ADDRESS,(uint8_t *) data, 2,1000);
 800093a:	f107 0208 	add.w	r2, r7, #8
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	9300      	str	r3, [sp, #0]
 8000944:	2302      	movs	r3, #2
 8000946:	217c      	movs	r1, #124	; 0x7c
 8000948:	68f8      	ldr	r0, [r7, #12]
 800094a:	f000 fe31 	bl	80015b0 <HAL_I2C_Master_Transmit>
}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
	...

08000958 <reglagecouleur>:

void reglagecouleur(uint8_t R,uint8_t G,uint8_t B)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af02      	add	r7, sp, #8
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
 8000962:	460b      	mov	r3, r1
 8000964:	71bb      	strb	r3, [r7, #6]
 8000966:	4613      	mov	r3, r2
 8000968:	717b      	strb	r3, [r7, #5]
	I2C_HandleTypeDef* Handle = &hi2c1;
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <reglagecouleur+0x74>)
 800096c:	617b      	str	r3, [r7, #20]
	uint8_t data_r[2];
	uint8_t data_g[2];
	uint8_t data_b[2];
	data_r[0] = REG_RED;
 800096e:	2304      	movs	r3, #4
 8000970:	743b      	strb	r3, [r7, #16]
	data_r[1] = R;
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_r,2,1000);
 8000976:	f107 0210 	add.w	r2, r7, #16
 800097a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2302      	movs	r3, #2
 8000982:	21c4      	movs	r1, #196	; 0xc4
 8000984:	6978      	ldr	r0, [r7, #20]
 8000986:	f000 fe13 	bl	80015b0 <HAL_I2C_Master_Transmit>

	data_g[0] = REG_GREEN;
 800098a:	2303      	movs	r3, #3
 800098c:	733b      	strb	r3, [r7, #12]
	data_g[1] = G;
 800098e:	79bb      	ldrb	r3, [r7, #6]
 8000990:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_g,2,1000);
 8000992:	f107 020c 	add.w	r2, r7, #12
 8000996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2302      	movs	r3, #2
 800099e:	21c4      	movs	r1, #196	; 0xc4
 80009a0:	6978      	ldr	r0, [r7, #20]
 80009a2:	f000 fe05 	bl	80015b0 <HAL_I2C_Master_Transmit>

	data_b[0] = REG_BLUE;
 80009a6:	2302      	movs	r3, #2
 80009a8:	723b      	strb	r3, [r7, #8]
	data_b[1] = B;
 80009aa:	797b      	ldrb	r3, [r7, #5]
 80009ac:	727b      	strb	r3, [r7, #9]
	HAL_I2C_Master_Transmit(Handle, (uint16_t)RGB_ADDRESS, (uint8_t *)data_b,2,1000);
 80009ae:	f107 0208 	add.w	r2, r7, #8
 80009b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2302      	movs	r3, #2
 80009ba:	21c4      	movs	r1, #196	; 0xc4
 80009bc:	6978      	ldr	r0, [r7, #20]
 80009be:	f000 fdf7 	bl	80015b0 <HAL_I2C_Master_Transmit>
}
 80009c2:	bf00      	nop
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000002c 	.word	0x2000002c

080009d0 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d4:	f000 fa14 	bl	8000e00 <HAL_Init>

  /* USER CODE BEGIN Init */
  lcd_init(&hi2c1, &lcdData);
 80009d8:	4919      	ldr	r1, [pc, #100]	; (8000a40 <main+0x70>)
 80009da:	481a      	ldr	r0, [pc, #104]	; (8000a44 <main+0x74>)
 80009dc:	f7ff fe74 	bl	80006c8 <lcd_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f836 	bl	8000a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f7ff fd6c 	bl	80004c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009e8:	f000 f954 	bl	8000c94 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009ec:	f7ff fdce 	bl	800058c <MX_I2C1_Init>
  MX_TIM2_Init();
 80009f0:	f000 f8e4 	bl	8000bbc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init(&hi2c1, &lcdData);
 80009f4:	4912      	ldr	r1, [pc, #72]	; (8000a40 <main+0x70>)
 80009f6:	4813      	ldr	r0, [pc, #76]	; (8000a44 <main+0x74>)
 80009f8:	f7ff fe66 	bl	80006c8 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lcd_position(&hi2c1,0,0);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2100      	movs	r1, #0
 8000a00:	4810      	ldr	r0, [pc, #64]	; (8000a44 <main+0x74>)
 8000a02:	f7ff ff80 	bl	8000906 <lcd_position>
	  lcd_print(&hi2c1,"hello");
 8000a06:	4910      	ldr	r1, [pc, #64]	; (8000a48 <main+0x78>)
 8000a08:	480e      	ldr	r0, [pc, #56]	; (8000a44 <main+0x74>)
 8000a0a:	f7ff ff53 	bl	80008b4 <lcd_print>
	  reglagecouleur(0,0,255);
 8000a0e:	22ff      	movs	r2, #255	; 0xff
 8000a10:	2100      	movs	r1, #0
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff ffa0 	bl	8000958 <reglagecouleur>
	  HAL_Delay(1000);
 8000a18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a1c:	f000 fa6c 	bl	8000ef8 <HAL_Delay>
	  lcd_position(&hi2c1,3,1);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2103      	movs	r1, #3
 8000a24:	4807      	ldr	r0, [pc, #28]	; (8000a44 <main+0x74>)
 8000a26:	f7ff ff6e 	bl	8000906 <lcd_position>
	  lcd_print(&hi2c1,"heroo");
 8000a2a:	4908      	ldr	r1, [pc, #32]	; (8000a4c <main+0x7c>)
 8000a2c:	4805      	ldr	r0, [pc, #20]	; (8000a44 <main+0x74>)
 8000a2e:	f7ff ff41 	bl	80008b4 <lcd_print>
	  reglagecouleur(255,0,0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	20ff      	movs	r0, #255	; 0xff
 8000a38:	f7ff ff8e 	bl	8000958 <reglagecouleur>
	  lcd_position(&hi2c1,0,0);
 8000a3c:	e7de      	b.n	80009fc <main+0x2c>
 8000a3e:	bf00      	nop
 8000a40:	20000028 	.word	0x20000028
 8000a44:	2000002c 	.word	0x2000002c
 8000a48:	0800454c 	.word	0x0800454c
 8000a4c:	08004554 	.word	0x08004554

08000a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b096      	sub	sp, #88	; 0x58
 8000a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	2244      	movs	r2, #68	; 0x44
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f003 fd60 	bl	8004524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a64:	463b      	mov	r3, r7
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a76:	f001 fa3b 	bl	8001ef0 <HAL_PWREx_ControlVoltageScaling>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a80:	f000 f837 	bl	8000af2 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a84:	2302      	movs	r3, #2
 8000a86:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a88:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a92:	2302      	movs	r3, #2
 8000a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a96:	2302      	movs	r3, #2
 8000a98:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a9e:	230a      	movs	r3, #10
 8000aa0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000aa2:	2307      	movs	r3, #7
 8000aa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f001 fa72 	bl	8001f9c <HAL_RCC_OscConfig>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000abe:	f000 f818 	bl	8000af2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2104      	movs	r1, #4
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fe44 	bl	8002768 <HAL_RCC_ClockConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ae6:	f000 f804 	bl	8000af2 <Error_Handler>
  }
}
 8000aea:	bf00      	nop
 8000aec:	3758      	adds	r7, #88	; 0x58
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af6:	b672      	cpsid	i
}
 8000af8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afa:	e7fe      	b.n	8000afa <Error_Handler+0x8>

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_MspInit+0x44>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <HAL_MspInit+0x44>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_MspInit+0x44>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_MspInit+0x44>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_MspInit+0x44>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b24:	6593      	str	r3, [r2, #88]	; 0x58
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_MspInit+0x44>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	603b      	str	r3, [r7, #0]
 8000b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f992 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc2:	f107 0310 	add.w	r3, r7, #16
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bda:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bdc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 80-1;
 8000be2:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000be4:	224f      	movs	r2, #79	; 0x4f
 8000be6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000bee:	4b19      	ldr	r3, [pc, #100]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf6:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c02:	4814      	ldr	r0, [pc, #80]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000c04:	f002 fc72 	bl	80034ec <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c0e:	f7ff ff70 	bl	8000af2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c16:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000c20:	f002 fcbb 	bl	800359a <HAL_TIM_ConfigClockSource>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c2a:	f7ff ff62 	bl	8000af2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <MX_TIM2_Init+0x98>)
 8000c3c:	f002 feaa 	bl	8003994 <HAL_TIMEx_MasterConfigSynchronization>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c46:	f7ff ff54 	bl	8000af2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	3720      	adds	r7, #32
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000078 	.word	0x20000078

08000c58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c68:	d10b      	bne.n	8000c82 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <HAL_TIM_Base_MspInit+0x38>)
 8000c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6e:	4a08      	ldr	r2, [pc, #32]	; (8000c90 <HAL_TIM_Base_MspInit+0x38>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	6593      	str	r3, [r2, #88]	; 0x58
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <HAL_TIM_Base_MspInit+0x38>)
 8000c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c82:	bf00      	nop
 8000c84:	3714      	adds	r7, #20
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	40021000 	.word	0x40021000

08000c94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000c9a:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <MX_USART2_UART_Init+0x5c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b11      	ldr	r3, [pc, #68]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <MX_USART2_UART_Init+0x58>)
 8000cd8:	f002 fee4 	bl	8003aa4 <HAL_UART_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ce2:	f7ff ff06 	bl	8000af2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000c4 	.word	0x200000c4
 8000cf0:	40004400 	.word	0x40004400

08000cf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b0ac      	sub	sp, #176	; 0xb0
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d00:	2200      	movs	r2, #0
 8000d02:	601a      	str	r2, [r3, #0]
 8000d04:	605a      	str	r2, [r3, #4]
 8000d06:	609a      	str	r2, [r3, #8]
 8000d08:	60da      	str	r2, [r3, #12]
 8000d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	2288      	movs	r2, #136	; 0x88
 8000d12:	2100      	movs	r1, #0
 8000d14:	4618      	mov	r0, r3
 8000d16:	f003 fc05 	bl	8004524 <memset>
  if(uartHandle->Instance==USART2)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <HAL_UART_MspInit+0xb0>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d13b      	bne.n	8000d9c <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 ff1f 	bl	8002b74 <HAL_RCCEx_PeriphCLKConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d3c:	f7ff fed9 	bl	8000af2 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d44:	4a18      	ldr	r2, [pc, #96]	; (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5c:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d5e:	f043 0301 	orr.w	r3, r3, #1
 8000d62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d64:	4b10      	ldr	r3, [pc, #64]	; (8000da8 <HAL_UART_MspInit+0xb4>)
 8000d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d70:	230c      	movs	r3, #12
 8000d72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d92:	4619      	mov	r1, r3
 8000d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d98:	f000 f9b8 	bl	800110c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	37b0      	adds	r7, #176	; 0xb0
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40004400 	.word	0x40004400
 8000da8:	40021000 	.word	0x40021000

08000dac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db0:	f7ff fef2 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	; (8000de8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	; (8000dec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	; (8000df0 <LoopForever+0xe>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	; (8000df8 <LoopForever+0x16>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f003 fb7f 	bl	80044dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dde:	f7ff fdf7 	bl	80009d0 <main>

08000de2 <LoopForever>:

LoopForever:
    b LoopForever
 8000de2:	e7fe      	b.n	8000de2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000de4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000df0:	080045b4 	.word	0x080045b4
  ldr r2, =_sbss
 8000df4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df8:	2000014c 	.word	0x2000014c

08000dfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC1_2_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_Init+0x3c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <HAL_Init+0x3c>)
 8000e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e16:	2003      	movs	r0, #3
 8000e18:	f000 f944 	bl	80010a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f000 f80f 	bl	8000e40 <HAL_InitTick>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	e001      	b.n	8000e32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e2e:	f7ff fe65 	bl	8000afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40022000 	.word	0x40022000

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_InitTick+0x6c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d023      	beq.n	8000e9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_InitTick+0x70>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_InitTick+0x6c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f941 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10f      	bne.n	8000e96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d809      	bhi.n	8000e90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f000 f919 	bl	80010ba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_InitTick+0x74>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e007      	b.n	8000ea0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e004      	b.n	8000ea0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e001      	b.n	8000ea0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000148 	.word	0x20000148

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000148 	.word	0x20000148

08000ef8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f00:	f7ff ffee 	bl	8000ee0 <HAL_GetTick>
 8000f04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f10:	d005      	beq.n	8000f1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f12:	4b0a      	ldr	r3, [pc, #40]	; (8000f3c <HAL_Delay+0x44>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	461a      	mov	r2, r3
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1e:	bf00      	nop
 8000f20:	f7ff ffde 	bl	8000ee0 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d8f7      	bhi.n	8000f20 <HAL_Delay+0x28>
  {
  }
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000008 	.word	0x20000008

08000f40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	f003 0307 	and.w	r3, r3, #7
 8000f4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f52:	68db      	ldr	r3, [r3, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f56:	68ba      	ldr	r2, [r7, #8]
 8000f58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f72:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <__NVIC_SetPriorityGrouping+0x44>)
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	60d3      	str	r3, [r2, #12]
}
 8000f78:	bf00      	nop
 8000f7a:	3714      	adds	r7, #20
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr
 8000f84:	e000ed00 	.word	0xe000ed00

08000f88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	0a1b      	lsrs	r3, r3, #8
 8000f92:	f003 0307 	and.w	r3, r3, #7
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001070:	d301      	bcc.n	8001076 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001072:	2301      	movs	r3, #1
 8001074:	e00f      	b.n	8001096 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001076:	4a0a      	ldr	r2, [pc, #40]	; (80010a0 <SysTick_Config+0x40>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107e:	210f      	movs	r1, #15
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f7ff ff8e 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x40>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x40>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f7ff ff47 	bl	8000f40 <__NVIC_SetPriorityGrouping>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b086      	sub	sp, #24
 80010be:	af00      	add	r7, sp, #0
 80010c0:	4603      	mov	r3, r0
 80010c2:	60b9      	str	r1, [r7, #8]
 80010c4:	607a      	str	r2, [r7, #4]
 80010c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff5c 	bl	8000f88 <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff8e 	bl	8000ff8 <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5d 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffb0 	bl	8001060 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111a:	e17f      	b.n	800141c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2101      	movs	r1, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8171 	beq.w	8001416 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d005      	beq.n	800114c <HAL_GPIO_Init+0x40>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d130      	bne.n	80011ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001182:	2201      	movs	r2, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f003 0201 	and.w	r2, r3, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d118      	bne.n	80011ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011c0:	2201      	movs	r2, #1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa02 f303 	lsl.w	r3, r2, r3
 80011c8:	43db      	mvns	r3, r3
 80011ca:	693a      	ldr	r2, [r7, #16]
 80011cc:	4013      	ands	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	08db      	lsrs	r3, r3, #3
 80011d6:	f003 0201 	and.w	r2, r3, #1
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d017      	beq.n	8001228 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2203      	movs	r2, #3
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	689a      	ldr	r2, [r3, #8]
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4313      	orrs	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f003 0303 	and.w	r3, r3, #3
 8001230:	2b02      	cmp	r3, #2
 8001232:	d123      	bne.n	800127c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	691a      	ldr	r2, [r3, #16]
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f003 0307 	and.w	r3, r3, #7
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	08da      	lsrs	r2, r3, #3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3208      	adds	r2, #8
 8001276:	6939      	ldr	r1, [r7, #16]
 8001278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	2203      	movs	r2, #3
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0203 	and.w	r2, r3, #3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	f000 80ac 	beq.w	8001416 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	4b5f      	ldr	r3, [pc, #380]	; (800143c <HAL_GPIO_Init+0x330>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c2:	4a5e      	ldr	r2, [pc, #376]	; (800143c <HAL_GPIO_Init+0x330>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ca:	4b5c      	ldr	r3, [pc, #368]	; (800143c <HAL_GPIO_Init+0x330>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012d6:	4a5a      	ldr	r2, [pc, #360]	; (8001440 <HAL_GPIO_Init+0x334>)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	f003 0303 	and.w	r3, r3, #3
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	220f      	movs	r2, #15
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001300:	d025      	beq.n	800134e <HAL_GPIO_Init+0x242>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4f      	ldr	r2, [pc, #316]	; (8001444 <HAL_GPIO_Init+0x338>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d01f      	beq.n	800134a <HAL_GPIO_Init+0x23e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4e      	ldr	r2, [pc, #312]	; (8001448 <HAL_GPIO_Init+0x33c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d019      	beq.n	8001346 <HAL_GPIO_Init+0x23a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4d      	ldr	r2, [pc, #308]	; (800144c <HAL_GPIO_Init+0x340>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d013      	beq.n	8001342 <HAL_GPIO_Init+0x236>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a4c      	ldr	r2, [pc, #304]	; (8001450 <HAL_GPIO_Init+0x344>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d00d      	beq.n	800133e <HAL_GPIO_Init+0x232>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a4b      	ldr	r2, [pc, #300]	; (8001454 <HAL_GPIO_Init+0x348>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d007      	beq.n	800133a <HAL_GPIO_Init+0x22e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a4a      	ldr	r2, [pc, #296]	; (8001458 <HAL_GPIO_Init+0x34c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d101      	bne.n	8001336 <HAL_GPIO_Init+0x22a>
 8001332:	2306      	movs	r3, #6
 8001334:	e00c      	b.n	8001350 <HAL_GPIO_Init+0x244>
 8001336:	2307      	movs	r3, #7
 8001338:	e00a      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800133a:	2305      	movs	r3, #5
 800133c:	e008      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800133e:	2304      	movs	r3, #4
 8001340:	e006      	b.n	8001350 <HAL_GPIO_Init+0x244>
 8001342:	2303      	movs	r3, #3
 8001344:	e004      	b.n	8001350 <HAL_GPIO_Init+0x244>
 8001346:	2302      	movs	r3, #2
 8001348:	e002      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800134a:	2301      	movs	r3, #1
 800134c:	e000      	b.n	8001350 <HAL_GPIO_Init+0x244>
 800134e:	2300      	movs	r3, #0
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	f002 0203 	and.w	r2, r2, #3
 8001356:	0092      	lsls	r2, r2, #2
 8001358:	4093      	lsls	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001360:	4937      	ldr	r1, [pc, #220]	; (8001440 <HAL_GPIO_Init+0x334>)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	089b      	lsrs	r3, r3, #2
 8001366:	3302      	adds	r3, #2
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800136e:	4b3b      	ldr	r3, [pc, #236]	; (800145c <HAL_GPIO_Init+0x350>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001392:	4a32      	ldr	r2, [pc, #200]	; (800145c <HAL_GPIO_Init+0x350>)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001398:	4b30      	ldr	r3, [pc, #192]	; (800145c <HAL_GPIO_Init+0x350>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013b4:	693a      	ldr	r2, [r7, #16]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013bc:	4a27      	ldr	r2, [pc, #156]	; (800145c <HAL_GPIO_Init+0x350>)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013c2:	4b26      	ldr	r3, [pc, #152]	; (800145c <HAL_GPIO_Init+0x350>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013e6:	4a1d      	ldr	r2, [pc, #116]	; (800145c <HAL_GPIO_Init+0x350>)
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	; (800145c <HAL_GPIO_Init+0x350>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	43db      	mvns	r3, r3
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001404:	2b00      	cmp	r3, #0
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4313      	orrs	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001410:	4a12      	ldr	r2, [pc, #72]	; (800145c <HAL_GPIO_Init+0x350>)
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	3301      	adds	r3, #1
 800141a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa22 f303 	lsr.w	r3, r2, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	f47f ae78 	bne.w	800111c <HAL_GPIO_Init+0x10>
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	371c      	adds	r7, #28
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	40010000 	.word	0x40010000
 8001444:	48000400 	.word	0x48000400
 8001448:	48000800 	.word	0x48000800
 800144c:	48000c00 	.word	0x48000c00
 8001450:	48001000 	.word	0x48001000
 8001454:	48001400 	.word	0x48001400
 8001458:	48001800 	.word	0x48001800
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800147c:	e002      	b.n	8001484 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e081      	b.n	80015a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff f8a8 	bl	800060c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2224      	movs	r2, #36	; 0x24
 80014c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f022 0201 	bic.w	r2, r2, #1
 80014d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d107      	bne.n	800150a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	e006      	b.n	8001518 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001516:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d104      	bne.n	800152a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001528:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	6812      	ldr	r2, [r2, #0]
 8001534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001538:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800154c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691a      	ldr	r2, [r3, #16]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69d9      	ldr	r1, [r3, #28]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1a      	ldr	r2, [r3, #32]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2220      	movs	r2, #32
 8001592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af02      	add	r7, sp, #8
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	607a      	str	r2, [r7, #4]
 80015ba:	461a      	mov	r2, r3
 80015bc:	460b      	mov	r3, r1
 80015be:	817b      	strh	r3, [r7, #10]
 80015c0:	4613      	mov	r3, r2
 80015c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b20      	cmp	r3, #32
 80015ce:	f040 80da 	bne.w	8001786 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_I2C_Master_Transmit+0x30>
 80015dc:	2302      	movs	r3, #2
 80015de:	e0d3      	b.n	8001788 <HAL_I2C_Master_Transmit+0x1d8>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015e8:	f7ff fc7a 	bl	8000ee0 <HAL_GetTick>
 80015ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	9300      	str	r3, [sp, #0]
 80015f2:	2319      	movs	r3, #25
 80015f4:	2201      	movs	r2, #1
 80015f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015fa:	68f8      	ldr	r0, [r7, #12]
 80015fc:	f000 f9f7 	bl	80019ee <I2C_WaitOnFlagUntilTimeout>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e0be      	b.n	8001788 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2221      	movs	r2, #33	; 0x21
 800160e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2210      	movs	r2, #16
 8001616:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	893a      	ldrh	r2, [r7, #8]
 800162a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001636:	b29b      	uxth	r3, r3
 8001638:	2bff      	cmp	r3, #255	; 0xff
 800163a:	d90e      	bls.n	800165a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	22ff      	movs	r2, #255	; 0xff
 8001640:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001646:	b2da      	uxtb	r2, r3
 8001648:	8979      	ldrh	r1, [r7, #10]
 800164a:	4b51      	ldr	r3, [pc, #324]	; (8001790 <HAL_I2C_Master_Transmit+0x1e0>)
 800164c:	9300      	str	r3, [sp, #0]
 800164e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f000 fb74 	bl	8001d40 <I2C_TransferConfig>
 8001658:	e06c      	b.n	8001734 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165e:	b29a      	uxth	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001668:	b2da      	uxtb	r2, r3
 800166a:	8979      	ldrh	r1, [r7, #10]
 800166c:	4b48      	ldr	r3, [pc, #288]	; (8001790 <HAL_I2C_Master_Transmit+0x1e0>)
 800166e:	9300      	str	r3, [sp, #0]
 8001670:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 fb63 	bl	8001d40 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800167a:	e05b      	b.n	8001734 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	6a39      	ldr	r1, [r7, #32]
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f000 f9f4 	bl	8001a6e <I2C_WaitOnTXISFlagUntilTimeout>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e07b      	b.n	8001788 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	781a      	ldrb	r2, [r3, #0]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	1c5a      	adds	r2, r3, #1
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b8:	3b01      	subs	r3, #1
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d034      	beq.n	8001734 <HAL_I2C_Master_Transmit+0x184>
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d130      	bne.n	8001734 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	2200      	movs	r2, #0
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 f986 	bl	80019ee <I2C_WaitOnFlagUntilTimeout>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e04d      	b.n	8001788 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	2bff      	cmp	r3, #255	; 0xff
 80016f4:	d90e      	bls.n	8001714 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	22ff      	movs	r2, #255	; 0xff
 80016fa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001700:	b2da      	uxtb	r2, r3
 8001702:	8979      	ldrh	r1, [r7, #10]
 8001704:	2300      	movs	r3, #0
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f000 fb17 	bl	8001d40 <I2C_TransferConfig>
 8001712:	e00f      	b.n	8001734 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001718:	b29a      	uxth	r2, r3
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001722:	b2da      	uxtb	r2, r3
 8001724:	8979      	ldrh	r1, [r7, #10]
 8001726:	2300      	movs	r3, #0
 8001728:	9300      	str	r3, [sp, #0]
 800172a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	f000 fb06 	bl	8001d40 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001738:	b29b      	uxth	r3, r3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d19e      	bne.n	800167c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	6a39      	ldr	r1, [r7, #32]
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f000 f9d3 	bl	8001aee <I2C_WaitOnSTOPFlagUntilTimeout>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e01a      	b.n	8001788 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2220      	movs	r2, #32
 8001758:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6859      	ldr	r1, [r3, #4]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <HAL_I2C_Master_Transmit+0x1e4>)
 8001766:	400b      	ands	r3, r1
 8001768:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2220      	movs	r2, #32
 800176e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	e000      	b.n	8001788 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001786:	2302      	movs	r3, #2
  }
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	80002000 	.word	0x80002000
 8001794:	fe00e800 	.word	0xfe00e800

08001798 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af02      	add	r7, sp, #8
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	460b      	mov	r3, r1
 80017a6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b20      	cmp	r3, #32
 80017b6:	f040 80f1 	bne.w	800199c <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017c8:	d101      	bne.n	80017ce <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80017ca:	2302      	movs	r3, #2
 80017cc:	e0e7      	b.n	800199e <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_I2C_IsDeviceReady+0x44>
 80017d8:	2302      	movs	r3, #2
 80017da:	e0e0      	b.n	800199e <HAL_I2C_IsDeviceReady+0x206>
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2224      	movs	r2, #36	; 0x24
 80017e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d107      	bne.n	800180a <HAL_I2C_IsDeviceReady+0x72>
 80017fa:	897b      	ldrh	r3, [r7, #10]
 80017fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001800:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001808:	e004      	b.n	8001814 <HAL_I2C_IsDeviceReady+0x7c>
 800180a:	897b      	ldrh	r3, [r7, #10]
 800180c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001810:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800181a:	f7ff fb61 	bl	8000ee0 <HAL_GetTick>
 800181e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f003 0320 	and.w	r3, r3, #32
 800182a:	2b20      	cmp	r3, #32
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	f003 0310 	and.w	r3, r3, #16
 8001840:	2b10      	cmp	r3, #16
 8001842:	bf0c      	ite	eq
 8001844:	2301      	moveq	r3, #1
 8001846:	2300      	movne	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800184c:	e034      	b.n	80018b8 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001854:	d01a      	beq.n	800188c <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001856:	f7ff fb43 	bl	8000ee0 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d302      	bcc.n	800186c <HAL_I2C_IsDeviceReady+0xd4>
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10f      	bne.n	800188c <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2220      	movs	r2, #32
 8001870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001878:	f043 0220 	orr.w	r2, r3, #32
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2200      	movs	r2, #0
 8001884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e088      	b.n	800199e <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	f003 0320 	and.w	r3, r3, #32
 8001896:	2b20      	cmp	r3, #32
 8001898:	bf0c      	ite	eq
 800189a:	2301      	moveq	r3, #1
 800189c:	2300      	movne	r3, #0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0310 	and.w	r3, r3, #16
 80018ac:	2b10      	cmp	r3, #16
 80018ae:	bf0c      	ite	eq
 80018b0:	2301      	moveq	r3, #1
 80018b2:	2300      	movne	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80018b8:	7ffb      	ldrb	r3, [r7, #31]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d102      	bne.n	80018c4 <HAL_I2C_IsDeviceReady+0x12c>
 80018be:	7fbb      	ldrb	r3, [r7, #30]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0c4      	beq.n	800184e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f003 0310 	and.w	r3, r3, #16
 80018ce:	2b10      	cmp	r3, #16
 80018d0:	d01a      	beq.n	8001908 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	2120      	movs	r1, #32
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f000 f886 	bl	80019ee <I2C_WaitOnFlagUntilTimeout>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e058      	b.n	800199e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2220      	movs	r2, #32
 80018f2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2220      	movs	r2, #32
 80018f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	e04a      	b.n	800199e <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001908:	69bb      	ldr	r3, [r7, #24]
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	2120      	movs	r1, #32
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f000 f86b 	bl	80019ee <I2C_WaitOnFlagUntilTimeout>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e03d      	b.n	800199e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	2210      	movs	r2, #16
 8001928:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2220      	movs	r2, #32
 8001930:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	429a      	cmp	r2, r3
 8001938:	d118      	bne.n	800196c <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001948:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2200      	movs	r2, #0
 8001952:	2120      	movs	r1, #32
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f84a 	bl	80019ee <I2C_WaitOnFlagUntilTimeout>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e01c      	b.n	800199e <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2220      	movs	r2, #32
 800196a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	687a      	ldr	r2, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	f63f af3b 	bhi.w	80017f2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2220      	movs	r2, #32
 8001980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001988:	f043 0220 	orr.w	r2, r3, #32
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e000      	b.n	800199e <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800199c:	2302      	movs	r3, #2
  }
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3720      	adds	r7, #32
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d103      	bne.n	80019c4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2200      	movs	r2, #0
 80019c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	699b      	ldr	r3, [r3, #24]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d007      	beq.n	80019e2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	699a      	ldr	r2, [r3, #24]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0201 	orr.w	r2, r2, #1
 80019e0:	619a      	str	r2, [r3, #24]
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4613      	mov	r3, r2
 80019fc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019fe:	e022      	b.n	8001a46 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a06:	d01e      	beq.n	8001a46 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a08:	f7ff fa6a 	bl	8000ee0 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d302      	bcc.n	8001a1e <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d113      	bne.n	8001a46 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f043 0220 	orr.w	r2, r3, #32
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2220      	movs	r2, #32
 8001a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00f      	b.n	8001a66 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	699a      	ldr	r2, [r3, #24]
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	bf0c      	ite	eq
 8001a56:	2301      	moveq	r3, #1
 8001a58:	2300      	movne	r3, #0
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d0cd      	beq.n	8001a00 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3710      	adds	r7, #16
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b084      	sub	sp, #16
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	60f8      	str	r0, [r7, #12]
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a7a:	e02c      	b.n	8001ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 f871 	bl	8001b68 <I2C_IsErrorOccurred>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e02a      	b.n	8001ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a96:	d01e      	beq.n	8001ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a98:	f7ff fa22 	bl	8000ee0 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d302      	bcc.n	8001aae <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d113      	bne.n	8001ad6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f043 0220 	orr.w	r2, r3, #32
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2220      	movs	r2, #32
 8001abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e007      	b.n	8001ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d1cb      	bne.n	8001a7c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001afa:	e028      	b.n	8001b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	68b9      	ldr	r1, [r7, #8]
 8001b00:	68f8      	ldr	r0, [r7, #12]
 8001b02:	f000 f831 	bl	8001b68 <I2C_IsErrorOccurred>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e026      	b.n	8001b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b10:	f7ff f9e6 	bl	8000ee0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	68ba      	ldr	r2, [r7, #8]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d302      	bcc.n	8001b26 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d113      	bne.n	8001b4e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f043 0220 	orr.w	r2, r3, #32
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2220      	movs	r2, #32
 8001b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e007      	b.n	8001b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d1cf      	bne.n	8001afc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
	...

08001b68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08a      	sub	sp, #40	; 0x28
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d075      	beq.n	8001c80 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2210      	movs	r2, #16
 8001b9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b9c:	e056      	b.n	8001c4c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ba4:	d052      	beq.n	8001c4c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ba6:	f7ff f99b 	bl	8000ee0 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	68ba      	ldr	r2, [r7, #8]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d302      	bcc.n	8001bbc <I2C_IsErrorOccurred+0x54>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d147      	bne.n	8001c4c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bde:	d12e      	bne.n	8001c3e <I2C_IsErrorOccurred+0xd6>
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001be6:	d02a      	beq.n	8001c3e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001be8:	7cfb      	ldrb	r3, [r7, #19]
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	d027      	beq.n	8001c3e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685a      	ldr	r2, [r3, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bfc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001bfe:	f7ff f96f 	bl	8000ee0 <HAL_GetTick>
 8001c02:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c04:	e01b      	b.n	8001c3e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c06:	f7ff f96b 	bl	8000ee0 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b19      	cmp	r3, #25
 8001c12:	d914      	bls.n	8001c3e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c18:	f043 0220 	orr.w	r2, r3, #32
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2220      	movs	r2, #32
 8001c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0320 	and.w	r3, r3, #32
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d1dc      	bne.n	8001c06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	d003      	beq.n	8001c62 <I2C_IsErrorOccurred+0xfa>
 8001c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d09d      	beq.n	8001b9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d103      	bne.n	8001c72 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	f043 0304 	orr.w	r3, r3, #4
 8001c78:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ca2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d00b      	beq.n	8001ccc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	f043 0308 	orr.w	r3, r3, #8
 8001cba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d00b      	beq.n	8001cee <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
 8001cd8:	f043 0302 	orr.w	r3, r3, #2
 8001cdc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01c      	beq.n	8001d30 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f7ff fe55 	bl	80019a6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6859      	ldr	r1, [r3, #4]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <I2C_IsErrorOccurred+0x1d4>)
 8001d08:	400b      	ands	r3, r1
 8001d0a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	431a      	orrs	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001d30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	fe00e800 	.word	0xfe00e800

08001d40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b087      	sub	sp, #28
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	817b      	strh	r3, [r7, #10]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d52:	897b      	ldrh	r3, [r7, #10]
 8001d54:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d58:	7a7b      	ldrb	r3, [r7, #9]
 8001d5a:	041b      	lsls	r3, r3, #16
 8001d5c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d60:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d6e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	0d5b      	lsrs	r3, r3, #21
 8001d7a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d7e:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <I2C_TransferConfig+0x60>)
 8001d80:	430b      	orrs	r3, r1
 8001d82:	43db      	mvns	r3, r3
 8001d84:	ea02 0103 	and.w	r1, r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d92:	bf00      	nop
 8001d94:	371c      	adds	r7, #28
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	03ff63ff 	.word	0x03ff63ff

08001da4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b20      	cmp	r3, #32
 8001db8:	d138      	bne.n	8001e2c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e032      	b.n	8001e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2224      	movs	r2, #36	; 0x24
 8001dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001df6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f042 0201 	orr.w	r2, r2, #1
 8001e16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e000      	b.n	8001e2e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e2c:	2302      	movs	r3, #2
  }
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b085      	sub	sp, #20
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b20      	cmp	r3, #32
 8001e4e:	d139      	bne.n	8001ec4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e033      	b.n	8001ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2224      	movs	r2, #36	; 0x24
 8001e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0201 	bic.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e8c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e000      	b.n	8001ec6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ec4:	2302      	movs	r3, #2
  }
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ed8:	4b04      	ldr	r3, [pc, #16]	; (8001eec <HAL_PWREx_GetVoltageRange+0x18>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40007000 	.word	0x40007000

08001ef0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001efe:	d130      	bne.n	8001f62 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f00:	4b23      	ldr	r3, [pc, #140]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f0c:	d038      	beq.n	8001f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f0e:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f16:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2232      	movs	r2, #50	; 0x32
 8001f24:	fb02 f303 	mul.w	r3, r2, r3
 8001f28:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0c9b      	lsrs	r3, r3, #18
 8001f30:	3301      	adds	r3, #1
 8001f32:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f34:	e002      	b.n	8001f3c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f48:	d102      	bne.n	8001f50 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1f2      	bne.n	8001f36 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f50:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5c:	d110      	bne.n	8001f80 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e00f      	b.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6e:	d007      	beq.n	8001f80 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f70:	4b07      	ldr	r3, [pc, #28]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f78:	4a05      	ldr	r2, [pc, #20]	; (8001f90 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f7e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f80:	2300      	movs	r3, #0
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40007000 	.word	0x40007000
 8001f94:	20000000 	.word	0x20000000
 8001f98:	431bde83 	.word	0x431bde83

08001f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e3d4      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fae:	4ba1      	ldr	r3, [pc, #644]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
 8001fb6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fb8:	4b9e      	ldr	r3, [pc, #632]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	f003 0303 	and.w	r3, r3, #3
 8001fc0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0310 	and.w	r3, r3, #16
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 80e4 	beq.w	8002198 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4a>
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	2b0c      	cmp	r3, #12
 8001fda:	f040 808b 	bne.w	80020f4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	f040 8087 	bne.w	80020f4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fe6:	4b93      	ldr	r3, [pc, #588]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d005      	beq.n	8001ffe <HAL_RCC_OscConfig+0x62>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e3ac      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a1a      	ldr	r2, [r3, #32]
 8002002:	4b8c      	ldr	r3, [pc, #560]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0308 	and.w	r3, r3, #8
 800200a:	2b00      	cmp	r3, #0
 800200c:	d004      	beq.n	8002018 <HAL_RCC_OscConfig+0x7c>
 800200e:	4b89      	ldr	r3, [pc, #548]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002016:	e005      	b.n	8002024 <HAL_RCC_OscConfig+0x88>
 8002018:	4b86      	ldr	r3, [pc, #536]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800201a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002024:	4293      	cmp	r3, r2
 8002026:	d223      	bcs.n	8002070 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	4618      	mov	r0, r3
 800202e:	f000 fd41 	bl	8002ab4 <RCC_SetFlashLatencyFromMSIRange>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e38d      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800203c:	4b7d      	ldr	r3, [pc, #500]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a7c      	ldr	r2, [pc, #496]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	6013      	str	r3, [r2, #0]
 8002048:	4b7a      	ldr	r3, [pc, #488]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	4977      	ldr	r1, [pc, #476]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002056:	4313      	orrs	r3, r2
 8002058:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800205a:	4b76      	ldr	r3, [pc, #472]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	4972      	ldr	r1, [pc, #456]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
 800206e:	e025      	b.n	80020bc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002070:	4b70      	ldr	r3, [pc, #448]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a6f      	ldr	r2, [pc, #444]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002076:	f043 0308 	orr.w	r3, r3, #8
 800207a:	6013      	str	r3, [r2, #0]
 800207c:	4b6d      	ldr	r3, [pc, #436]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	496a      	ldr	r1, [pc, #424]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800208a:	4313      	orrs	r3, r2
 800208c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800208e:	4b69      	ldr	r3, [pc, #420]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	4965      	ldr	r1, [pc, #404]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d109      	bne.n	80020bc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f000 fd01 	bl	8002ab4 <RCC_SetFlashLatencyFromMSIRange>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e34d      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020bc:	f000 fc36 	bl	800292c <HAL_RCC_GetSysClockFreq>
 80020c0:	4602      	mov	r2, r0
 80020c2:	4b5c      	ldr	r3, [pc, #368]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	495a      	ldr	r1, [pc, #360]	; (8002238 <HAL_RCC_OscConfig+0x29c>)
 80020ce:	5ccb      	ldrb	r3, [r1, r3]
 80020d0:	f003 031f 	and.w	r3, r3, #31
 80020d4:	fa22 f303 	lsr.w	r3, r2, r3
 80020d8:	4a58      	ldr	r2, [pc, #352]	; (800223c <HAL_RCC_OscConfig+0x2a0>)
 80020da:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020dc:	4b58      	ldr	r3, [pc, #352]	; (8002240 <HAL_RCC_OscConfig+0x2a4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fead 	bl	8000e40 <HAL_InitTick>
 80020e6:	4603      	mov	r3, r0
 80020e8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d052      	beq.n	8002196 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	e331      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d032      	beq.n	8002162 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020fc:	4b4d      	ldr	r3, [pc, #308]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a4c      	ldr	r2, [pc, #304]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002108:	f7fe feea 	bl	8000ee0 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002110:	f7fe fee6 	bl	8000ee0 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e31a      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002122:	4b44      	ldr	r3, [pc, #272]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800212e:	4b41      	ldr	r3, [pc, #260]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a40      	ldr	r2, [pc, #256]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002134:	f043 0308 	orr.w	r3, r3, #8
 8002138:	6013      	str	r3, [r2, #0]
 800213a:	4b3e      	ldr	r3, [pc, #248]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	493b      	ldr	r1, [pc, #236]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002148:	4313      	orrs	r3, r2
 800214a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800214c:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	4936      	ldr	r1, [pc, #216]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
 8002160:	e01a      	b.n	8002198 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002162:	4b34      	ldr	r3, [pc, #208]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a33      	ldr	r2, [pc, #204]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002168:	f023 0301 	bic.w	r3, r3, #1
 800216c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800216e:	f7fe feb7 	bl	8000ee0 <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002176:	f7fe feb3 	bl	8000ee0 <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e2e7      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002188:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f0      	bne.n	8002176 <HAL_RCC_OscConfig+0x1da>
 8002194:	e000      	b.n	8002198 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002196:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d074      	beq.n	800228e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	2b08      	cmp	r3, #8
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_OscConfig+0x21a>
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b0c      	cmp	r3, #12
 80021ae:	d10e      	bne.n	80021ce <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d10b      	bne.n	80021ce <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b6:	4b1f      	ldr	r3, [pc, #124]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d064      	beq.n	800228c <HAL_RCC_OscConfig+0x2f0>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d160      	bne.n	800228c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e2c4      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d6:	d106      	bne.n	80021e6 <HAL_RCC_OscConfig+0x24a>
 80021d8:	4b16      	ldr	r3, [pc, #88]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a15      	ldr	r2, [pc, #84]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80021de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	e01d      	b.n	8002222 <HAL_RCC_OscConfig+0x286>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80021ee:	d10c      	bne.n	800220a <HAL_RCC_OscConfig+0x26e>
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80021f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021fa:	6013      	str	r3, [r2, #0]
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002202:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	e00b      	b.n	8002222 <HAL_RCC_OscConfig+0x286>
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a09      	ldr	r2, [pc, #36]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	4b07      	ldr	r3, [pc, #28]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a06      	ldr	r2, [pc, #24]	; (8002234 <HAL_RCC_OscConfig+0x298>)
 800221c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002220:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d01c      	beq.n	8002264 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7fe fe59 	bl	8000ee0 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002230:	e011      	b.n	8002256 <HAL_RCC_OscConfig+0x2ba>
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	0800455c 	.word	0x0800455c
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002244:	f7fe fe4c 	bl	8000ee0 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b64      	cmp	r3, #100	; 0x64
 8002250:	d901      	bls.n	8002256 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e280      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002256:	4baf      	ldr	r3, [pc, #700]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d0f0      	beq.n	8002244 <HAL_RCC_OscConfig+0x2a8>
 8002262:	e014      	b.n	800228e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fe3c 	bl	8000ee0 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7fe fe38 	bl	8000ee0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e26c      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800227e:	4ba5      	ldr	r3, [pc, #660]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d1f0      	bne.n	800226c <HAL_RCC_OscConfig+0x2d0>
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800228c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d060      	beq.n	800235c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	2b04      	cmp	r3, #4
 800229e:	d005      	beq.n	80022ac <HAL_RCC_OscConfig+0x310>
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b0c      	cmp	r3, #12
 80022a4:	d119      	bne.n	80022da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d116      	bne.n	80022da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ac:	4b99      	ldr	r3, [pc, #612]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_OscConfig+0x328>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e249      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c4:	4b93      	ldr	r3, [pc, #588]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	061b      	lsls	r3, r3, #24
 80022d2:	4990      	ldr	r1, [pc, #576]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d8:	e040      	b.n	800235c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d023      	beq.n	800232a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022e2:	4b8c      	ldr	r3, [pc, #560]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a8b      	ldr	r2, [pc, #556]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7fe fdf7 	bl	8000ee0 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f6:	f7fe fdf3 	bl	8000ee0 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e227      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002308:	4b82      	ldr	r3, [pc, #520]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0f0      	beq.n	80022f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002314:	4b7f      	ldr	r3, [pc, #508]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	691b      	ldr	r3, [r3, #16]
 8002320:	061b      	lsls	r3, r3, #24
 8002322:	497c      	ldr	r1, [pc, #496]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002324:	4313      	orrs	r3, r2
 8002326:	604b      	str	r3, [r1, #4]
 8002328:	e018      	b.n	800235c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800232a:	4b7a      	ldr	r3, [pc, #488]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a79      	ldr	r2, [pc, #484]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002330:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002336:	f7fe fdd3 	bl	8000ee0 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233e:	f7fe fdcf 	bl	8000ee0 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e203      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002350:	4b70      	ldr	r3, [pc, #448]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002358:	2b00      	cmp	r3, #0
 800235a:	d1f0      	bne.n	800233e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0308 	and.w	r3, r3, #8
 8002364:	2b00      	cmp	r3, #0
 8002366:	d03c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01c      	beq.n	80023aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002370:	4b68      	ldr	r3, [pc, #416]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002376:	4a67      	ldr	r2, [pc, #412]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7fe fdae 	bl	8000ee0 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002388:	f7fe fdaa 	bl	8000ee0 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e1de      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800239a:	4b5e      	ldr	r3, [pc, #376]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 800239c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0ef      	beq.n	8002388 <HAL_RCC_OscConfig+0x3ec>
 80023a8:	e01b      	b.n	80023e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023aa:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80023ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023b0:	4a58      	ldr	r2, [pc, #352]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80023b2:	f023 0301 	bic.w	r3, r3, #1
 80023b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ba:	f7fe fd91 	bl	8000ee0 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023c2:	f7fe fd8d 	bl	8000ee0 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e1c1      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023d4:	4b4f      	ldr	r3, [pc, #316]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80023d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ef      	bne.n	80023c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	f000 80a6 	beq.w	800253c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f0:	2300      	movs	r3, #0
 80023f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80023f4:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80023f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10d      	bne.n	800241c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4b44      	ldr	r3, [pc, #272]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a43      	ldr	r2, [pc, #268]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
 800240c:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002418:	2301      	movs	r3, #1
 800241a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800241c:	4b3e      	ldr	r3, [pc, #248]	; (8002518 <HAL_RCC_OscConfig+0x57c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d118      	bne.n	800245a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002428:	4b3b      	ldr	r3, [pc, #236]	; (8002518 <HAL_RCC_OscConfig+0x57c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a3a      	ldr	r2, [pc, #232]	; (8002518 <HAL_RCC_OscConfig+0x57c>)
 800242e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002432:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002434:	f7fe fd54 	bl	8000ee0 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243c:	f7fe fd50 	bl	8000ee0 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e184      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800244e:	4b32      	ldr	r3, [pc, #200]	; (8002518 <HAL_RCC_OscConfig+0x57c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0f0      	beq.n	800243c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d108      	bne.n	8002474 <HAL_RCC_OscConfig+0x4d8>
 8002462:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	4a2a      	ldr	r2, [pc, #168]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 800246a:	f043 0301 	orr.w	r3, r3, #1
 800246e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002472:	e024      	b.n	80024be <HAL_RCC_OscConfig+0x522>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b05      	cmp	r3, #5
 800247a:	d110      	bne.n	800249e <HAL_RCC_OscConfig+0x502>
 800247c:	4b25      	ldr	r3, [pc, #148]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 800247e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002482:	4a24      	ldr	r2, [pc, #144]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002484:	f043 0304 	orr.w	r3, r3, #4
 8002488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	4a20      	ldr	r2, [pc, #128]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800249c:	e00f      	b.n	80024be <HAL_RCC_OscConfig+0x522>
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80024a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a4:	4a1b      	ldr	r2, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80024a6:	f023 0301 	bic.w	r3, r3, #1
 80024aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024ae:	4b19      	ldr	r3, [pc, #100]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80024b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b4:	4a17      	ldr	r2, [pc, #92]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80024b6:	f023 0304 	bic.w	r3, r3, #4
 80024ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d016      	beq.n	80024f4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7fe fd0b 	bl	8000ee0 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024cc:	e00a      	b.n	80024e4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ce:	f7fe fd07 	bl	8000ee0 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024dc:	4293      	cmp	r3, r2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e139      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e4:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <HAL_RCC_OscConfig+0x578>)
 80024e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0ed      	beq.n	80024ce <HAL_RCC_OscConfig+0x532>
 80024f2:	e01a      	b.n	800252a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f4:	f7fe fcf4 	bl	8000ee0 <HAL_GetTick>
 80024f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024fa:	e00f      	b.n	800251c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fc:	f7fe fcf0 	bl	8000ee0 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	; 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d906      	bls.n	800251c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e122      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800251c:	4b90      	ldr	r3, [pc, #576]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1e8      	bne.n	80024fc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800252a:	7ffb      	ldrb	r3, [r7, #31]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002530:	4b8b      	ldr	r3, [pc, #556]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	4a8a      	ldr	r2, [pc, #552]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 8002536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800253a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8108 	beq.w	8002756 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254a:	2b02      	cmp	r3, #2
 800254c:	f040 80d0 	bne.w	80026f0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002550:	4b83      	ldr	r3, [pc, #524]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f003 0203 	and.w	r2, r3, #3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	429a      	cmp	r2, r3
 8002562:	d130      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	3b01      	subs	r3, #1
 8002570:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002572:	429a      	cmp	r2, r3
 8002574:	d127      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002580:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002582:	429a      	cmp	r2, r3
 8002584:	d11f      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002590:	2a07      	cmp	r2, #7
 8002592:	bf14      	ite	ne
 8002594:	2201      	movne	r2, #1
 8002596:	2200      	moveq	r2, #0
 8002598:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800259a:	4293      	cmp	r3, r2
 800259c:	d113      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a8:	085b      	lsrs	r3, r3, #1
 80025aa:	3b01      	subs	r3, #1
 80025ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d109      	bne.n	80025c6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	3b01      	subs	r3, #1
 80025c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d06e      	beq.n	80026a4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	2b0c      	cmp	r3, #12
 80025ca:	d069      	beq.n	80026a0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025cc:	4b64      	ldr	r3, [pc, #400]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d105      	bne.n	80025e4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80025d8:	4b61      	ldr	r3, [pc, #388]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0b7      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025e8:	4b5d      	ldr	r3, [pc, #372]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a5c      	ldr	r2, [pc, #368]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 80025ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025f2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025f4:	f7fe fc74 	bl	8000ee0 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fc70 	bl	8000ee0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e0a4      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800260e:	4b54      	ldr	r3, [pc, #336]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261a:	4b51      	ldr	r3, [pc, #324]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	4b51      	ldr	r3, [pc, #324]	; (8002764 <HAL_RCC_OscConfig+0x7c8>)
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800262a:	3a01      	subs	r2, #1
 800262c:	0112      	lsls	r2, r2, #4
 800262e:	4311      	orrs	r1, r2
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002634:	0212      	lsls	r2, r2, #8
 8002636:	4311      	orrs	r1, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800263c:	0852      	lsrs	r2, r2, #1
 800263e:	3a01      	subs	r2, #1
 8002640:	0552      	lsls	r2, r2, #21
 8002642:	4311      	orrs	r1, r2
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002648:	0852      	lsrs	r2, r2, #1
 800264a:	3a01      	subs	r2, #1
 800264c:	0652      	lsls	r2, r2, #25
 800264e:	4311      	orrs	r1, r2
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002654:	0912      	lsrs	r2, r2, #4
 8002656:	0452      	lsls	r2, r2, #17
 8002658:	430a      	orrs	r2, r1
 800265a:	4941      	ldr	r1, [pc, #260]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 800265c:	4313      	orrs	r3, r2
 800265e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002660:	4b3f      	ldr	r3, [pc, #252]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a3e      	ldr	r2, [pc, #248]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800266c:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a3b      	ldr	r2, [pc, #236]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 8002672:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002676:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002678:	f7fe fc32 	bl	8000ee0 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe fc2e 	bl	8000ee0 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e062      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002692:	4b33      	ldr	r3, [pc, #204]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800269e:	e05a      	b.n	8002756 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e059      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a4:	4b2e      	ldr	r3, [pc, #184]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d152      	bne.n	8002756 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80026b0:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a2a      	ldr	r2, [pc, #168]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 80026b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026bc:	4b28      	ldr	r3, [pc, #160]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	4a27      	ldr	r2, [pc, #156]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 80026c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026c8:	f7fe fc0a 	bl	8000ee0 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d0:	f7fe fc06 	bl	8000ee0 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e03a      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e2:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x734>
 80026ee:	e032      	b.n	8002756 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	2b0c      	cmp	r3, #12
 80026f4:	d02d      	beq.n	8002752 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b1a      	ldr	r3, [pc, #104]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a19      	ldr	r2, [pc, #100]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 80026fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002700:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d105      	bne.n	800271a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	4a13      	ldr	r2, [pc, #76]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 8002714:	f023 0303 	bic.w	r3, r3, #3
 8002718:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800271a:	4b11      	ldr	r3, [pc, #68]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	4a10      	ldr	r2, [pc, #64]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 8002720:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002728:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272a:	f7fe fbd9 	bl	8000ee0 <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002732:	f7fe fbd5 	bl	8000ee0 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e009      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002744:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_RCC_OscConfig+0x7c4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x796>
 8002750:	e001      	b.n	8002756 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3720      	adds	r7, #32
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	f99d808c 	.word	0xf99d808c

08002768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d101      	bne.n	800277c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0c8      	b.n	800290e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800277c:	4b66      	ldr	r3, [pc, #408]	; (8002918 <HAL_RCC_ClockConfig+0x1b0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d910      	bls.n	80027ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800278a:	4b63      	ldr	r3, [pc, #396]	; (8002918 <HAL_RCC_ClockConfig+0x1b0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 0207 	bic.w	r2, r3, #7
 8002792:	4961      	ldr	r1, [pc, #388]	; (8002918 <HAL_RCC_ClockConfig+0x1b0>)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	4313      	orrs	r3, r2
 8002798:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800279a:	4b5f      	ldr	r3, [pc, #380]	; (8002918 <HAL_RCC_ClockConfig+0x1b0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d001      	beq.n	80027ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0b0      	b.n	800290e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d04c      	beq.n	8002852 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b03      	cmp	r3, #3
 80027be:	d107      	bne.n	80027d0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c0:	4b56      	ldr	r3, [pc, #344]	; (800291c <HAL_RCC_ClockConfig+0x1b4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d121      	bne.n	8002810 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e09e      	b.n	800290e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d8:	4b50      	ldr	r3, [pc, #320]	; (800291c <HAL_RCC_ClockConfig+0x1b4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d115      	bne.n	8002810 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e092      	b.n	800290e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027f0:	4b4a      	ldr	r3, [pc, #296]	; (800291c <HAL_RCC_ClockConfig+0x1b4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e086      	b.n	800290e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002800:	4b46      	ldr	r3, [pc, #280]	; (800291c <HAL_RCC_ClockConfig+0x1b4>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e07e      	b.n	800290e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002810:	4b42      	ldr	r3, [pc, #264]	; (800291c <HAL_RCC_ClockConfig+0x1b4>)
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f023 0203 	bic.w	r2, r3, #3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	493f      	ldr	r1, [pc, #252]	; (800291c <HAL_RCC_ClockConfig+0x1b4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002822:	f7fe fb5d 	bl	8000ee0 <HAL_GetTick>
 8002826:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002828:	e00a      	b.n	8002840 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282a:	f7fe fb59 	bl	8000ee0 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e066      	b.n	800290e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002840:	4b36      	ldr	r3, [pc, #216]	; (800291c <HAL_RCC_ClockConfig+0x1b4>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 020c 	and.w	r2, r3, #12
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	429a      	cmp	r2, r3
 8002850:	d1eb      	bne.n	800282a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d008      	beq.n	8002870 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285e:	4b2f      	ldr	r3, [pc, #188]	; (800291c <HAL_RCC_ClockConfig+0x1b4>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	492c      	ldr	r1, [pc, #176]	; (800291c <HAL_RCC_ClockConfig+0x1b4>)
 800286c:	4313      	orrs	r3, r2
 800286e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002870:	4b29      	ldr	r3, [pc, #164]	; (8002918 <HAL_RCC_ClockConfig+0x1b0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d210      	bcs.n	80028a0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b26      	ldr	r3, [pc, #152]	; (8002918 <HAL_RCC_ClockConfig+0x1b0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 0207 	bic.w	r2, r3, #7
 8002886:	4924      	ldr	r1, [pc, #144]	; (8002918 <HAL_RCC_ClockConfig+0x1b0>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b22      	ldr	r3, [pc, #136]	; (8002918 <HAL_RCC_ClockConfig+0x1b0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e036      	b.n	800290e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ac:	4b1b      	ldr	r3, [pc, #108]	; (800291c <HAL_RCC_ClockConfig+0x1b4>)
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4918      	ldr	r1, [pc, #96]	; (800291c <HAL_RCC_ClockConfig+0x1b4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ca:	4b14      	ldr	r3, [pc, #80]	; (800291c <HAL_RCC_ClockConfig+0x1b4>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4910      	ldr	r1, [pc, #64]	; (800291c <HAL_RCC_ClockConfig+0x1b4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028de:	f000 f825 	bl	800292c <HAL_RCC_GetSysClockFreq>
 80028e2:	4602      	mov	r2, r0
 80028e4:	4b0d      	ldr	r3, [pc, #52]	; (800291c <HAL_RCC_ClockConfig+0x1b4>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	490c      	ldr	r1, [pc, #48]	; (8002920 <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	5ccb      	ldrb	r3, [r1, r3]
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	fa22 f303 	lsr.w	r3, r2, r3
 80028fa:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028fe:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe fa9c 	bl	8000e40 <HAL_InitTick>
 8002908:	4603      	mov	r3, r0
 800290a:	72fb      	strb	r3, [r7, #11]

  return status;
 800290c:	7afb      	ldrb	r3, [r7, #11]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40022000 	.word	0x40022000
 800291c:	40021000 	.word	0x40021000
 8002920:	0800455c 	.word	0x0800455c
 8002924:	20000000 	.word	0x20000000
 8002928:	20000004 	.word	0x20000004

0800292c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	; 0x24
 8002930:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
 8002936:	2300      	movs	r3, #0
 8002938:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800293a:	4b3e      	ldr	r3, [pc, #248]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f003 030c 	and.w	r3, r3, #12
 8002942:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002944:	4b3b      	ldr	r3, [pc, #236]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_GetSysClockFreq+0x34>
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d121      	bne.n	800299e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d11e      	bne.n	800299e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002960:	4b34      	ldr	r3, [pc, #208]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d107      	bne.n	800297c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800296c:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800296e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	f003 030f 	and.w	r3, r3, #15
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	e005      	b.n	8002988 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800297c:	4b2d      	ldr	r3, [pc, #180]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x108>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002988:	4a2b      	ldr	r2, [pc, #172]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x10c>)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002990:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10d      	bne.n	80029b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800299c:	e00a      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d102      	bne.n	80029aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029a4:	4b25      	ldr	r3, [pc, #148]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x110>)
 80029a6:	61bb      	str	r3, [r7, #24]
 80029a8:	e004      	b.n	80029b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029b0:	4b23      	ldr	r3, [pc, #140]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x114>)
 80029b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2b0c      	cmp	r3, #12
 80029b8:	d134      	bne.n	8002a24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029ba:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d003      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d003      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0xac>
 80029d0:	e005      	b.n	80029de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029d2:	4b1a      	ldr	r3, [pc, #104]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x110>)
 80029d4:	617b      	str	r3, [r7, #20]
      break;
 80029d6:	e005      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029d8:	4b19      	ldr	r3, [pc, #100]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x114>)
 80029da:	617b      	str	r3, [r7, #20]
      break;
 80029dc:	e002      	b.n	80029e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	617b      	str	r3, [r7, #20]
      break;
 80029e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	091b      	lsrs	r3, r3, #4
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	3301      	adds	r3, #1
 80029f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	fb02 f203 	mul.w	r2, r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	0e5b      	lsrs	r3, r3, #25
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	3301      	adds	r3, #1
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a24:	69bb      	ldr	r3, [r7, #24]
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3724      	adds	r7, #36	; 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08004574 	.word	0x08004574
 8002a3c:	00f42400 	.word	0x00f42400
 8002a40:	007a1200 	.word	0x007a1200

08002a44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a48:	4b03      	ldr	r3, [pc, #12]	; (8002a58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	20000000 	.word	0x20000000

08002a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a60:	f7ff fff0 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	4904      	ldr	r1, [pc, #16]	; (8002a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a72:	5ccb      	ldrb	r3, [r1, r3]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	0800456c 	.word	0x0800456c

08002a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a8c:	f7ff ffda 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002a90:	4602      	mov	r2, r0
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	0adb      	lsrs	r3, r3, #11
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	4904      	ldr	r1, [pc, #16]	; (8002ab0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a9e:	5ccb      	ldrb	r3, [r1, r3]
 8002aa0:	f003 031f 	and.w	r3, r3, #31
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	0800456c 	.word	0x0800456c

08002ab4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002abc:	2300      	movs	r3, #0
 8002abe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ac0:	4b2a      	ldr	r3, [pc, #168]	; (8002b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002acc:	f7ff fa02 	bl	8001ed4 <HAL_PWREx_GetVoltageRange>
 8002ad0:	6178      	str	r0, [r7, #20]
 8002ad2:	e014      	b.n	8002afe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ad4:	4b25      	ldr	r3, [pc, #148]	; (8002b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad8:	4a24      	ldr	r2, [pc, #144]	; (8002b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ade:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae0:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002aec:	f7ff f9f2 	bl	8001ed4 <HAL_PWREx_GetVoltageRange>
 8002af0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002af2:	4b1e      	ldr	r3, [pc, #120]	; (8002b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002af8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b04:	d10b      	bne.n	8002b1e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b80      	cmp	r3, #128	; 0x80
 8002b0a:	d919      	bls.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2ba0      	cmp	r3, #160	; 0xa0
 8002b10:	d902      	bls.n	8002b18 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b12:	2302      	movs	r3, #2
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	e013      	b.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b18:	2301      	movs	r3, #1
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	e010      	b.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b80      	cmp	r3, #128	; 0x80
 8002b22:	d902      	bls.n	8002b2a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b24:	2303      	movs	r3, #3
 8002b26:	613b      	str	r3, [r7, #16]
 8002b28:	e00a      	b.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b80      	cmp	r3, #128	; 0x80
 8002b2e:	d102      	bne.n	8002b36 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b30:	2302      	movs	r3, #2
 8002b32:	613b      	str	r3, [r7, #16]
 8002b34:	e004      	b.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b70      	cmp	r3, #112	; 0x70
 8002b3a:	d101      	bne.n	8002b40 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f023 0207 	bic.w	r2, r3, #7
 8002b48:	4909      	ldr	r1, [pc, #36]	; (8002b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b50:	4b07      	ldr	r3, [pc, #28]	; (8002b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d001      	beq.n	8002b62 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	40022000 	.word	0x40022000

08002b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b80:	2300      	movs	r3, #0
 8002b82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d041      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b94:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b98:	d02a      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002b9a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b9e:	d824      	bhi.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002ba0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ba4:	d008      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ba6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002baa:	d81e      	bhi.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002bb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bb4:	d010      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002bb6:	e018      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002bb8:	4b86      	ldr	r3, [pc, #536]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4a85      	ldr	r2, [pc, #532]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bc4:	e015      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f000 fabb 	bl	8003148 <RCCEx_PLLSAI1_Config>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bd6:	e00c      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3320      	adds	r3, #32
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fba6 	bl	8003330 <RCCEx_PLLSAI2_Config>
 8002be4:	4603      	mov	r3, r0
 8002be6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002be8:	e003      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	74fb      	strb	r3, [r7, #19]
      break;
 8002bee:	e000      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002bf0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bf2:	7cfb      	ldrb	r3, [r7, #19]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10b      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bf8:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c06:	4973      	ldr	r1, [pc, #460]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c0e:	e001      	b.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c10:	7cfb      	ldrb	r3, [r7, #19]
 8002c12:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d041      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c28:	d02a      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002c2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002c2e:	d824      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c34:	d008      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c3a:	d81e      	bhi.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c44:	d010      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c46:	e018      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c48:	4b62      	ldr	r3, [pc, #392]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4a61      	ldr	r2, [pc, #388]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c52:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c54:	e015      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 fa73 	bl	8003148 <RCCEx_PLLSAI1_Config>
 8002c62:	4603      	mov	r3, r0
 8002c64:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c66:	e00c      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3320      	adds	r3, #32
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fb5e 	bl	8003330 <RCCEx_PLLSAI2_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002c78:	e003      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c7e:	e000      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002c80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c82:	7cfb      	ldrb	r3, [r7, #19]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c88:	4b52      	ldr	r3, [pc, #328]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c96:	494f      	ldr	r1, [pc, #316]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002c9e:	e001      	b.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ca0:	7cfb      	ldrb	r3, [r7, #19]
 8002ca2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 80a0 	beq.w	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cb6:	4b47      	ldr	r3, [pc, #284]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d101      	bne.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00d      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ccc:	4b41      	ldr	r3, [pc, #260]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd0:	4a40      	ldr	r2, [pc, #256]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cd8:	4b3e      	ldr	r3, [pc, #248]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ce8:	4b3b      	ldr	r3, [pc, #236]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a3a      	ldr	r2, [pc, #232]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cf4:	f7fe f8f4 	bl	8000ee0 <HAL_GetTick>
 8002cf8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002cfa:	e009      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cfc:	f7fe f8f0 	bl	8000ee0 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d902      	bls.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	74fb      	strb	r3, [r7, #19]
        break;
 8002d0e:	e005      	b.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d10:	4b31      	ldr	r3, [pc, #196]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0ef      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d15c      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d22:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d01f      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d019      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d40:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d52:	4a20      	ldr	r2, [pc, #128]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	4a1c      	ldr	r2, [pc, #112]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d6c:	4a19      	ldr	r2, [pc, #100]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d016      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7e:	f7fe f8af 	bl	8000ee0 <HAL_GetTick>
 8002d82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d84:	e00b      	b.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d86:	f7fe f8ab 	bl	8000ee0 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d902      	bls.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	74fb      	strb	r3, [r7, #19]
            break;
 8002d9c:	e006      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9e:	4b0d      	ldr	r3, [pc, #52]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0ec      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002dac:	7cfb      	ldrb	r3, [r7, #19]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10c      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002db2:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc2:	4904      	ldr	r1, [pc, #16]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dca:	e009      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dcc:	7cfb      	ldrb	r3, [r7, #19]
 8002dce:	74bb      	strb	r3, [r7, #18]
 8002dd0:	e006      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002de0:	7c7b      	ldrb	r3, [r7, #17]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d105      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de6:	4b9e      	ldr	r3, [pc, #632]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	4a9d      	ldr	r2, [pc, #628]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002dec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002df0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dfe:	4b98      	ldr	r3, [pc, #608]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	f023 0203 	bic.w	r2, r3, #3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0c:	4994      	ldr	r1, [pc, #592]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e20:	4b8f      	ldr	r3, [pc, #572]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f023 020c 	bic.w	r2, r3, #12
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2e:	498c      	ldr	r1, [pc, #560]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0304 	and.w	r3, r3, #4
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e42:	4b87      	ldr	r3, [pc, #540]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	4983      	ldr	r1, [pc, #524]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e64:	4b7e      	ldr	r3, [pc, #504]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e72:	497b      	ldr	r1, [pc, #492]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0310 	and.w	r3, r3, #16
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e86:	4b76      	ldr	r3, [pc, #472]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e94:	4972      	ldr	r1, [pc, #456]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ea8:	4b6d      	ldr	r3, [pc, #436]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb6:	496a      	ldr	r1, [pc, #424]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eca:	4b65      	ldr	r3, [pc, #404]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	4961      	ldr	r1, [pc, #388]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002eec:	4b5c      	ldr	r3, [pc, #368]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ef2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efa:	4959      	ldr	r1, [pc, #356]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f0e:	4b54      	ldr	r3, [pc, #336]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f14:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f1c:	4950      	ldr	r1, [pc, #320]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f30:	4b4b      	ldr	r3, [pc, #300]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f36:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	4948      	ldr	r1, [pc, #288]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f52:	4b43      	ldr	r3, [pc, #268]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f60:	493f      	ldr	r1, [pc, #252]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d028      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f74:	4b3a      	ldr	r3, [pc, #232]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f82:	4937      	ldr	r1, [pc, #220]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f92:	d106      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f94:	4b32      	ldr	r3, [pc, #200]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4a31      	ldr	r2, [pc, #196]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f9e:	60d3      	str	r3, [r2, #12]
 8002fa0:	e011      	b.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002faa:	d10c      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f8c8 	bl	8003148 <RCCEx_PLLSAI1_Config>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fbc:	7cfb      	ldrb	r3, [r7, #19]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002fc2:	7cfb      	ldrb	r3, [r7, #19]
 8002fc4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d028      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe0:	491f      	ldr	r1, [pc, #124]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ff0:	d106      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	4a1a      	ldr	r2, [pc, #104]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ffc:	60d3      	str	r3, [r2, #12]
 8002ffe:	e011      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003004:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003008:	d10c      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3304      	adds	r3, #4
 800300e:	2101      	movs	r1, #1
 8003010:	4618      	mov	r0, r3
 8003012:	f000 f899 	bl	8003148 <RCCEx_PLLSAI1_Config>
 8003016:	4603      	mov	r3, r0
 8003018:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800301a:	7cfb      	ldrb	r3, [r7, #19]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d001      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003020:	7cfb      	ldrb	r3, [r7, #19]
 8003022:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d02b      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303e:	4908      	ldr	r1, [pc, #32]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800304e:	d109      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003050:	4b03      	ldr	r3, [pc, #12]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a02      	ldr	r2, [pc, #8]	; (8003060 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800305a:	60d3      	str	r3, [r2, #12]
 800305c:	e014      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003068:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800306c:	d10c      	bne.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	3304      	adds	r3, #4
 8003072:	2101      	movs	r1, #1
 8003074:	4618      	mov	r0, r3
 8003076:	f000 f867 	bl	8003148 <RCCEx_PLLSAI1_Config>
 800307a:	4603      	mov	r3, r0
 800307c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800307e:	7cfb      	ldrb	r3, [r7, #19]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003084:	7cfb      	ldrb	r3, [r7, #19]
 8003086:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d02f      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003094:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030a2:	4928      	ldr	r1, [pc, #160]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030b2:	d10d      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3304      	adds	r3, #4
 80030b8:	2102      	movs	r1, #2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f844 	bl	8003148 <RCCEx_PLLSAI1_Config>
 80030c0:	4603      	mov	r3, r0
 80030c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030c4:	7cfb      	ldrb	r3, [r7, #19]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d014      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030ca:	7cfb      	ldrb	r3, [r7, #19]
 80030cc:	74bb      	strb	r3, [r7, #18]
 80030ce:	e011      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3320      	adds	r3, #32
 80030de:	2102      	movs	r1, #2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f925 	bl	8003330 <RCCEx_PLLSAI2_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ea:	7cfb      	ldrb	r3, [r7, #19]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003100:	4b10      	ldr	r3, [pc, #64]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800310e:	490d      	ldr	r1, [pc, #52]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003122:	4b08      	ldr	r3, [pc, #32]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003132:	4904      	ldr	r1, [pc, #16]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800313a:	7cbb      	ldrb	r3, [r7, #18]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3718      	adds	r7, #24
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000

08003148 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003156:	4b75      	ldr	r3, [pc, #468]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d018      	beq.n	8003194 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003162:	4b72      	ldr	r3, [pc, #456]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f003 0203 	and.w	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d10d      	bne.n	800318e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
       ||
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800317a:	4b6c      	ldr	r3, [pc, #432]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	f003 0307 	and.w	r3, r3, #7
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
       ||
 800318a:	429a      	cmp	r2, r3
 800318c:	d047      	beq.n	800321e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	73fb      	strb	r3, [r7, #15]
 8003192:	e044      	b.n	800321e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d018      	beq.n	80031ce <RCCEx_PLLSAI1_Config+0x86>
 800319c:	2b03      	cmp	r3, #3
 800319e:	d825      	bhi.n	80031ec <RCCEx_PLLSAI1_Config+0xa4>
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d002      	beq.n	80031aa <RCCEx_PLLSAI1_Config+0x62>
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d009      	beq.n	80031bc <RCCEx_PLLSAI1_Config+0x74>
 80031a8:	e020      	b.n	80031ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80031aa:	4b60      	ldr	r3, [pc, #384]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11d      	bne.n	80031f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ba:	e01a      	b.n	80031f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80031bc:	4b5b      	ldr	r3, [pc, #364]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d116      	bne.n	80031f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031cc:	e013      	b.n	80031f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80031ce:	4b57      	ldr	r3, [pc, #348]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10f      	bne.n	80031fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80031da:	4b54      	ldr	r3, [pc, #336]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031ea:	e006      	b.n	80031fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
      break;
 80031f0:	e004      	b.n	80031fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031f2:	bf00      	nop
 80031f4:	e002      	b.n	80031fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10d      	bne.n	800321e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003202:	4b4a      	ldr	r3, [pc, #296]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6819      	ldr	r1, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	3b01      	subs	r3, #1
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	430b      	orrs	r3, r1
 8003218:	4944      	ldr	r1, [pc, #272]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 800321a:	4313      	orrs	r3, r2
 800321c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800321e:	7bfb      	ldrb	r3, [r7, #15]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d17d      	bne.n	8003320 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003224:	4b41      	ldr	r3, [pc, #260]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a40      	ldr	r2, [pc, #256]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 800322a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800322e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003230:	f7fd fe56 	bl	8000ee0 <HAL_GetTick>
 8003234:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003236:	e009      	b.n	800324c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003238:	f7fd fe52 	bl	8000ee0 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d902      	bls.n	800324c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	73fb      	strb	r3, [r7, #15]
        break;
 800324a:	e005      	b.n	8003258 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800324c:	4b37      	ldr	r3, [pc, #220]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1ef      	bne.n	8003238 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003258:	7bfb      	ldrb	r3, [r7, #15]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d160      	bne.n	8003320 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d111      	bne.n	8003288 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003264:	4b31      	ldr	r3, [pc, #196]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800326c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6892      	ldr	r2, [r2, #8]
 8003274:	0211      	lsls	r1, r2, #8
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68d2      	ldr	r2, [r2, #12]
 800327a:	0912      	lsrs	r2, r2, #4
 800327c:	0452      	lsls	r2, r2, #17
 800327e:	430a      	orrs	r2, r1
 8003280:	492a      	ldr	r1, [pc, #168]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003282:	4313      	orrs	r3, r2
 8003284:	610b      	str	r3, [r1, #16]
 8003286:	e027      	b.n	80032d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d112      	bne.n	80032b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800328e:	4b27      	ldr	r3, [pc, #156]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003296:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6892      	ldr	r2, [r2, #8]
 800329e:	0211      	lsls	r1, r2, #8
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6912      	ldr	r2, [r2, #16]
 80032a4:	0852      	lsrs	r2, r2, #1
 80032a6:	3a01      	subs	r2, #1
 80032a8:	0552      	lsls	r2, r2, #21
 80032aa:	430a      	orrs	r2, r1
 80032ac:	491f      	ldr	r1, [pc, #124]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	610b      	str	r3, [r1, #16]
 80032b2:	e011      	b.n	80032d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032b6:	691b      	ldr	r3, [r3, #16]
 80032b8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80032bc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6892      	ldr	r2, [r2, #8]
 80032c4:	0211      	lsls	r1, r2, #8
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6952      	ldr	r2, [r2, #20]
 80032ca:	0852      	lsrs	r2, r2, #1
 80032cc:	3a01      	subs	r2, #1
 80032ce:	0652      	lsls	r2, r2, #25
 80032d0:	430a      	orrs	r2, r1
 80032d2:	4916      	ldr	r1, [pc, #88]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80032d8:	4b14      	ldr	r3, [pc, #80]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a13      	ldr	r2, [pc, #76]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 80032de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e4:	f7fd fdfc 	bl	8000ee0 <HAL_GetTick>
 80032e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032ea:	e009      	b.n	8003300 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032ec:	f7fd fdf8 	bl	8000ee0 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d902      	bls.n	8003300 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	73fb      	strb	r3, [r7, #15]
          break;
 80032fe:	e005      	b.n	800330c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003300:	4b0a      	ldr	r3, [pc, #40]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d0ef      	beq.n	80032ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800330c:	7bfb      	ldrb	r3, [r7, #15]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d106      	bne.n	8003320 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003312:	4b06      	ldr	r3, [pc, #24]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	4904      	ldr	r1, [pc, #16]	; (800332c <RCCEx_PLLSAI1_Config+0x1e4>)
 800331c:	4313      	orrs	r3, r2
 800331e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003320:	7bfb      	ldrb	r3, [r7, #15]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000

08003330 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800333e:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d018      	beq.n	800337c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800334a:	4b67      	ldr	r3, [pc, #412]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	f003 0203 	and.w	r2, r3, #3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d10d      	bne.n	8003376 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
       ||
 800335e:	2b00      	cmp	r3, #0
 8003360:	d009      	beq.n	8003376 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003362:	4b61      	ldr	r3, [pc, #388]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	1c5a      	adds	r2, r3, #1
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
       ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d047      	beq.n	8003406 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	73fb      	strb	r3, [r7, #15]
 800337a:	e044      	b.n	8003406 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2b03      	cmp	r3, #3
 8003382:	d018      	beq.n	80033b6 <RCCEx_PLLSAI2_Config+0x86>
 8003384:	2b03      	cmp	r3, #3
 8003386:	d825      	bhi.n	80033d4 <RCCEx_PLLSAI2_Config+0xa4>
 8003388:	2b01      	cmp	r3, #1
 800338a:	d002      	beq.n	8003392 <RCCEx_PLLSAI2_Config+0x62>
 800338c:	2b02      	cmp	r3, #2
 800338e:	d009      	beq.n	80033a4 <RCCEx_PLLSAI2_Config+0x74>
 8003390:	e020      	b.n	80033d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003392:	4b55      	ldr	r3, [pc, #340]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d11d      	bne.n	80033da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a2:	e01a      	b.n	80033da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80033a4:	4b50      	ldr	r3, [pc, #320]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d116      	bne.n	80033de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b4:	e013      	b.n	80033de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80033b6:	4b4c      	ldr	r3, [pc, #304]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10f      	bne.n	80033e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80033c2:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033d2:	e006      	b.n	80033e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
      break;
 80033d8:	e004      	b.n	80033e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033da:	bf00      	nop
 80033dc:	e002      	b.n	80033e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033de:	bf00      	nop
 80033e0:	e000      	b.n	80033e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80033e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10d      	bne.n	8003406 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033ea:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6819      	ldr	r1, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	3b01      	subs	r3, #1
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	430b      	orrs	r3, r1
 8003400:	4939      	ldr	r1, [pc, #228]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003402:	4313      	orrs	r3, r2
 8003404:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d167      	bne.n	80034dc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800340c:	4b36      	ldr	r3, [pc, #216]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a35      	ldr	r2, [pc, #212]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003412:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003418:	f7fd fd62 	bl	8000ee0 <HAL_GetTick>
 800341c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800341e:	e009      	b.n	8003434 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003420:	f7fd fd5e 	bl	8000ee0 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d902      	bls.n	8003434 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	73fb      	strb	r3, [r7, #15]
        break;
 8003432:	e005      	b.n	8003440 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003434:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d1ef      	bne.n	8003420 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d14a      	bne.n	80034dc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d111      	bne.n	8003470 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800344c:	4b26      	ldr	r3, [pc, #152]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6892      	ldr	r2, [r2, #8]
 800345c:	0211      	lsls	r1, r2, #8
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68d2      	ldr	r2, [r2, #12]
 8003462:	0912      	lsrs	r2, r2, #4
 8003464:	0452      	lsls	r2, r2, #17
 8003466:	430a      	orrs	r2, r1
 8003468:	491f      	ldr	r1, [pc, #124]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800346a:	4313      	orrs	r3, r2
 800346c:	614b      	str	r3, [r1, #20]
 800346e:	e011      	b.n	8003494 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003478:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6892      	ldr	r2, [r2, #8]
 8003480:	0211      	lsls	r1, r2, #8
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6912      	ldr	r2, [r2, #16]
 8003486:	0852      	lsrs	r2, r2, #1
 8003488:	3a01      	subs	r2, #1
 800348a:	0652      	lsls	r2, r2, #25
 800348c:	430a      	orrs	r2, r1
 800348e:	4916      	ldr	r1, [pc, #88]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003490:	4313      	orrs	r3, r2
 8003492:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003494:	4b14      	ldr	r3, [pc, #80]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a13      	ldr	r2, [pc, #76]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800349a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800349e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a0:	f7fd fd1e 	bl	8000ee0 <HAL_GetTick>
 80034a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034a6:	e009      	b.n	80034bc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034a8:	f7fd fd1a 	bl	8000ee0 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	1ad3      	subs	r3, r2, r3
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d902      	bls.n	80034bc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	73fb      	strb	r3, [r7, #15]
          break;
 80034ba:	e005      	b.n	80034c8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80034bc:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ef      	beq.n	80034a8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	4904      	ldr	r1, [pc, #16]	; (80034e8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40021000 	.word	0x40021000

080034ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e049      	b.n	8003592 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd fba0 	bl	8000c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f000 f8fe 	bl	800372c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_TIM_ConfigClockSource+0x1c>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e0b6      	b.n	8003724 <HAL_TIM_ConfigClockSource+0x18a>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80035d8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035e0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f2:	d03e      	beq.n	8003672 <HAL_TIM_ConfigClockSource+0xd8>
 80035f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f8:	f200 8087 	bhi.w	800370a <HAL_TIM_ConfigClockSource+0x170>
 80035fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003600:	f000 8086 	beq.w	8003710 <HAL_TIM_ConfigClockSource+0x176>
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003608:	d87f      	bhi.n	800370a <HAL_TIM_ConfigClockSource+0x170>
 800360a:	2b70      	cmp	r3, #112	; 0x70
 800360c:	d01a      	beq.n	8003644 <HAL_TIM_ConfigClockSource+0xaa>
 800360e:	2b70      	cmp	r3, #112	; 0x70
 8003610:	d87b      	bhi.n	800370a <HAL_TIM_ConfigClockSource+0x170>
 8003612:	2b60      	cmp	r3, #96	; 0x60
 8003614:	d050      	beq.n	80036b8 <HAL_TIM_ConfigClockSource+0x11e>
 8003616:	2b60      	cmp	r3, #96	; 0x60
 8003618:	d877      	bhi.n	800370a <HAL_TIM_ConfigClockSource+0x170>
 800361a:	2b50      	cmp	r3, #80	; 0x50
 800361c:	d03c      	beq.n	8003698 <HAL_TIM_ConfigClockSource+0xfe>
 800361e:	2b50      	cmp	r3, #80	; 0x50
 8003620:	d873      	bhi.n	800370a <HAL_TIM_ConfigClockSource+0x170>
 8003622:	2b40      	cmp	r3, #64	; 0x40
 8003624:	d058      	beq.n	80036d8 <HAL_TIM_ConfigClockSource+0x13e>
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d86f      	bhi.n	800370a <HAL_TIM_ConfigClockSource+0x170>
 800362a:	2b30      	cmp	r3, #48	; 0x30
 800362c:	d064      	beq.n	80036f8 <HAL_TIM_ConfigClockSource+0x15e>
 800362e:	2b30      	cmp	r3, #48	; 0x30
 8003630:	d86b      	bhi.n	800370a <HAL_TIM_ConfigClockSource+0x170>
 8003632:	2b20      	cmp	r3, #32
 8003634:	d060      	beq.n	80036f8 <HAL_TIM_ConfigClockSource+0x15e>
 8003636:	2b20      	cmp	r3, #32
 8003638:	d867      	bhi.n	800370a <HAL_TIM_ConfigClockSource+0x170>
 800363a:	2b00      	cmp	r3, #0
 800363c:	d05c      	beq.n	80036f8 <HAL_TIM_ConfigClockSource+0x15e>
 800363e:	2b10      	cmp	r3, #16
 8003640:	d05a      	beq.n	80036f8 <HAL_TIM_ConfigClockSource+0x15e>
 8003642:	e062      	b.n	800370a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	6899      	ldr	r1, [r3, #8]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f000 f97e 	bl	8003954 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003666:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	609a      	str	r2, [r3, #8]
      break;
 8003670:	e04f      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	6899      	ldr	r1, [r3, #8]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685a      	ldr	r2, [r3, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f000 f967 	bl	8003954 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003694:	609a      	str	r2, [r3, #8]
      break;
 8003696:	e03c      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6818      	ldr	r0, [r3, #0]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	6859      	ldr	r1, [r3, #4]
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	461a      	mov	r2, r3
 80036a6:	f000 f8db 	bl	8003860 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2150      	movs	r1, #80	; 0x50
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 f934 	bl	800391e <TIM_ITRx_SetConfig>
      break;
 80036b6:	e02c      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6818      	ldr	r0, [r3, #0]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	6859      	ldr	r1, [r3, #4]
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	461a      	mov	r2, r3
 80036c6:	f000 f8fa 	bl	80038be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2160      	movs	r1, #96	; 0x60
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 f924 	bl	800391e <TIM_ITRx_SetConfig>
      break;
 80036d6:	e01c      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	6859      	ldr	r1, [r3, #4]
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	461a      	mov	r2, r3
 80036e6:	f000 f8bb 	bl	8003860 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2140      	movs	r1, #64	; 0x40
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f914 	bl	800391e <TIM_ITRx_SetConfig>
      break;
 80036f6:	e00c      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4619      	mov	r1, r3
 8003702:	4610      	mov	r0, r2
 8003704:	f000 f90b 	bl	800391e <TIM_ITRx_SetConfig>
      break;
 8003708:	e003      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
      break;
 800370e:	e000      	b.n	8003712 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003710:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a40      	ldr	r2, [pc, #256]	; (8003840 <TIM_Base_SetConfig+0x114>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d013      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800374a:	d00f      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a3d      	ldr	r2, [pc, #244]	; (8003844 <TIM_Base_SetConfig+0x118>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d00b      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a3c      	ldr	r2, [pc, #240]	; (8003848 <TIM_Base_SetConfig+0x11c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d007      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a3b      	ldr	r2, [pc, #236]	; (800384c <TIM_Base_SetConfig+0x120>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d003      	beq.n	800376c <TIM_Base_SetConfig+0x40>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a3a      	ldr	r2, [pc, #232]	; (8003850 <TIM_Base_SetConfig+0x124>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d108      	bne.n	800377e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003772:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4313      	orrs	r3, r2
 800377c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a2f      	ldr	r2, [pc, #188]	; (8003840 <TIM_Base_SetConfig+0x114>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d01f      	beq.n	80037c6 <TIM_Base_SetConfig+0x9a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800378c:	d01b      	beq.n	80037c6 <TIM_Base_SetConfig+0x9a>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a2c      	ldr	r2, [pc, #176]	; (8003844 <TIM_Base_SetConfig+0x118>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d017      	beq.n	80037c6 <TIM_Base_SetConfig+0x9a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a2b      	ldr	r2, [pc, #172]	; (8003848 <TIM_Base_SetConfig+0x11c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d013      	beq.n	80037c6 <TIM_Base_SetConfig+0x9a>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a2a      	ldr	r2, [pc, #168]	; (800384c <TIM_Base_SetConfig+0x120>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00f      	beq.n	80037c6 <TIM_Base_SetConfig+0x9a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a29      	ldr	r2, [pc, #164]	; (8003850 <TIM_Base_SetConfig+0x124>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00b      	beq.n	80037c6 <TIM_Base_SetConfig+0x9a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a28      	ldr	r2, [pc, #160]	; (8003854 <TIM_Base_SetConfig+0x128>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d007      	beq.n	80037c6 <TIM_Base_SetConfig+0x9a>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a27      	ldr	r2, [pc, #156]	; (8003858 <TIM_Base_SetConfig+0x12c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d003      	beq.n	80037c6 <TIM_Base_SetConfig+0x9a>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a26      	ldr	r2, [pc, #152]	; (800385c <TIM_Base_SetConfig+0x130>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d108      	bne.n	80037d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a10      	ldr	r2, [pc, #64]	; (8003840 <TIM_Base_SetConfig+0x114>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d00f      	beq.n	8003824 <TIM_Base_SetConfig+0xf8>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a12      	ldr	r2, [pc, #72]	; (8003850 <TIM_Base_SetConfig+0x124>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00b      	beq.n	8003824 <TIM_Base_SetConfig+0xf8>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a11      	ldr	r2, [pc, #68]	; (8003854 <TIM_Base_SetConfig+0x128>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d007      	beq.n	8003824 <TIM_Base_SetConfig+0xf8>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a10      	ldr	r2, [pc, #64]	; (8003858 <TIM_Base_SetConfig+0x12c>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d003      	beq.n	8003824 <TIM_Base_SetConfig+0xf8>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a0f      	ldr	r2, [pc, #60]	; (800385c <TIM_Base_SetConfig+0x130>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d103      	bne.n	800382c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	615a      	str	r2, [r3, #20]
}
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40012c00 	.word	0x40012c00
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800
 800384c:	40000c00 	.word	0x40000c00
 8003850:	40013400 	.word	0x40013400
 8003854:	40014000 	.word	0x40014000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800

08003860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003860:	b480      	push	{r7}
 8003862:	b087      	sub	sp, #28
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a1b      	ldr	r3, [r3, #32]
 8003870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	f023 0201 	bic.w	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	699b      	ldr	r3, [r3, #24]
 8003882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800388a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f023 030a 	bic.w	r3, r3, #10
 800389c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	621a      	str	r2, [r3, #32]
}
 80038b2:	bf00      	nop
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038be:	b480      	push	{r7}
 80038c0:	b087      	sub	sp, #28
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	f023 0210 	bic.w	r2, r3, #16
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	031b      	lsls	r3, r3, #12
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4313      	orrs	r3, r2
 8003904:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	621a      	str	r2, [r3, #32]
}
 8003912:	bf00      	nop
 8003914:	371c      	adds	r7, #28
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800391e:	b480      	push	{r7}
 8003920:	b085      	sub	sp, #20
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4313      	orrs	r3, r2
 800393c:	f043 0307 	orr.w	r3, r3, #7
 8003940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	609a      	str	r2, [r3, #8]
}
 8003948:	bf00      	nop
 800394a:	3714      	adds	r7, #20
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800396e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	021a      	lsls	r2, r3, #8
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	431a      	orrs	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	4313      	orrs	r3, r2
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	4313      	orrs	r3, r2
 8003980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	609a      	str	r2, [r3, #8]
}
 8003988:	bf00      	nop
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039a8:	2302      	movs	r3, #2
 80039aa:	e068      	b.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2202      	movs	r2, #2
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2e      	ldr	r2, [pc, #184]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a2d      	ldr	r2, [pc, #180]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d108      	bne.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80039e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1e      	ldr	r2, [pc, #120]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d01d      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a1e:	d018      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a1b      	ldr	r2, [pc, #108]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d013      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a1a      	ldr	r2, [pc, #104]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d10c      	bne.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40012c00 	.word	0x40012c00
 8003a90:	40013400 	.word	0x40013400
 8003a94:	40000400 	.word	0x40000400
 8003a98:	40000800 	.word	0x40000800
 8003a9c:	40000c00 	.word	0x40000c00
 8003aa0:	40014000 	.word	0x40014000

08003aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e040      	b.n	8003b38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fd f914 	bl	8000cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	; 0x24
 8003ad0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 f8c0 	bl	8003c68 <UART_SetConfig>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d101      	bne.n	8003af2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e022      	b.n	8003b38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d002      	beq.n	8003b00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fb3e 	bl	800417c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fbc5 	bl	80042c0 <UART_CheckIdleState>
 8003b36:	4603      	mov	r3, r0
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3708      	adds	r7, #8
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	f040 8082 	bne.w	8003c5e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <HAL_UART_Transmit+0x26>
 8003b60:	88fb      	ldrh	r3, [r7, #6]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d101      	bne.n	8003b6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e07a      	b.n	8003c60 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d101      	bne.n	8003b78 <HAL_UART_Transmit+0x38>
 8003b74:	2302      	movs	r3, #2
 8003b76:	e073      	b.n	8003c60 <HAL_UART_Transmit+0x120>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2221      	movs	r2, #33	; 0x21
 8003b8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b8e:	f7fd f9a7 	bl	8000ee0 <HAL_GetTick>
 8003b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	88fa      	ldrh	r2, [r7, #6]
 8003b98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	88fa      	ldrh	r2, [r7, #6]
 8003ba0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bac:	d108      	bne.n	8003bc0 <HAL_UART_Transmit+0x80>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d104      	bne.n	8003bc0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	e003      	b.n	8003bc8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003bd0:	e02d      	b.n	8003c2e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	2180      	movs	r1, #128	; 0x80
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f000 fbb8 	bl	8004352 <UART_WaitOnFlagUntilTimeout>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e039      	b.n	8003c60 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10b      	bne.n	8003c0a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	881a      	ldrh	r2, [r3, #0]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bfe:	b292      	uxth	r2, r2
 8003c00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	3302      	adds	r3, #2
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	e008      	b.n	8003c1c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	781a      	ldrb	r2, [r3, #0]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	b292      	uxth	r2, r2
 8003c14:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	3b01      	subs	r3, #1
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1cb      	bne.n	8003bd2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	2200      	movs	r2, #0
 8003c42:	2140      	movs	r1, #64	; 0x40
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f000 fb84 	bl	8004352 <UART_WaitOnFlagUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003c50:	2303      	movs	r3, #3
 8003c52:	e005      	b.n	8003c60 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	e000      	b.n	8003c60 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003c5e:	2302      	movs	r3, #2
  }
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3720      	adds	r7, #32
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c68:	b5b0      	push	{r4, r5, r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689a      	ldr	r2, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	69db      	ldr	r3, [r3, #28]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	4bad      	ldr	r3, [pc, #692]	; (8003f48 <UART_SetConfig+0x2e0>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6812      	ldr	r2, [r2, #0]
 8003c9a:	69f9      	ldr	r1, [r7, #28]
 8003c9c:	430b      	orrs	r3, r1
 8003c9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4aa2      	ldr	r2, [pc, #648]	; (8003f4c <UART_SetConfig+0x2e4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d004      	beq.n	8003cd0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a99      	ldr	r2, [pc, #612]	; (8003f50 <UART_SetConfig+0x2e8>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d121      	bne.n	8003d32 <UART_SetConfig+0xca>
 8003cee:	4b99      	ldr	r3, [pc, #612]	; (8003f54 <UART_SetConfig+0x2ec>)
 8003cf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf4:	f003 0303 	and.w	r3, r3, #3
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d817      	bhi.n	8003d2c <UART_SetConfig+0xc4>
 8003cfc:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <UART_SetConfig+0x9c>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d15 	.word	0x08003d15
 8003d08:	08003d21 	.word	0x08003d21
 8003d0c:	08003d1b 	.word	0x08003d1b
 8003d10:	08003d27 	.word	0x08003d27
 8003d14:	2301      	movs	r3, #1
 8003d16:	76fb      	strb	r3, [r7, #27]
 8003d18:	e0e7      	b.n	8003eea <UART_SetConfig+0x282>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	76fb      	strb	r3, [r7, #27]
 8003d1e:	e0e4      	b.n	8003eea <UART_SetConfig+0x282>
 8003d20:	2304      	movs	r3, #4
 8003d22:	76fb      	strb	r3, [r7, #27]
 8003d24:	e0e1      	b.n	8003eea <UART_SetConfig+0x282>
 8003d26:	2308      	movs	r3, #8
 8003d28:	76fb      	strb	r3, [r7, #27]
 8003d2a:	e0de      	b.n	8003eea <UART_SetConfig+0x282>
 8003d2c:	2310      	movs	r3, #16
 8003d2e:	76fb      	strb	r3, [r7, #27]
 8003d30:	e0db      	b.n	8003eea <UART_SetConfig+0x282>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a88      	ldr	r2, [pc, #544]	; (8003f58 <UART_SetConfig+0x2f0>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d132      	bne.n	8003da2 <UART_SetConfig+0x13a>
 8003d3c:	4b85      	ldr	r3, [pc, #532]	; (8003f54 <UART_SetConfig+0x2ec>)
 8003d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d42:	f003 030c 	and.w	r3, r3, #12
 8003d46:	2b0c      	cmp	r3, #12
 8003d48:	d828      	bhi.n	8003d9c <UART_SetConfig+0x134>
 8003d4a:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <UART_SetConfig+0xe8>)
 8003d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d50:	08003d85 	.word	0x08003d85
 8003d54:	08003d9d 	.word	0x08003d9d
 8003d58:	08003d9d 	.word	0x08003d9d
 8003d5c:	08003d9d 	.word	0x08003d9d
 8003d60:	08003d91 	.word	0x08003d91
 8003d64:	08003d9d 	.word	0x08003d9d
 8003d68:	08003d9d 	.word	0x08003d9d
 8003d6c:	08003d9d 	.word	0x08003d9d
 8003d70:	08003d8b 	.word	0x08003d8b
 8003d74:	08003d9d 	.word	0x08003d9d
 8003d78:	08003d9d 	.word	0x08003d9d
 8003d7c:	08003d9d 	.word	0x08003d9d
 8003d80:	08003d97 	.word	0x08003d97
 8003d84:	2300      	movs	r3, #0
 8003d86:	76fb      	strb	r3, [r7, #27]
 8003d88:	e0af      	b.n	8003eea <UART_SetConfig+0x282>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	76fb      	strb	r3, [r7, #27]
 8003d8e:	e0ac      	b.n	8003eea <UART_SetConfig+0x282>
 8003d90:	2304      	movs	r3, #4
 8003d92:	76fb      	strb	r3, [r7, #27]
 8003d94:	e0a9      	b.n	8003eea <UART_SetConfig+0x282>
 8003d96:	2308      	movs	r3, #8
 8003d98:	76fb      	strb	r3, [r7, #27]
 8003d9a:	e0a6      	b.n	8003eea <UART_SetConfig+0x282>
 8003d9c:	2310      	movs	r3, #16
 8003d9e:	76fb      	strb	r3, [r7, #27]
 8003da0:	e0a3      	b.n	8003eea <UART_SetConfig+0x282>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a6d      	ldr	r2, [pc, #436]	; (8003f5c <UART_SetConfig+0x2f4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d120      	bne.n	8003dee <UART_SetConfig+0x186>
 8003dac:	4b69      	ldr	r3, [pc, #420]	; (8003f54 <UART_SetConfig+0x2ec>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003db6:	2b30      	cmp	r3, #48	; 0x30
 8003db8:	d013      	beq.n	8003de2 <UART_SetConfig+0x17a>
 8003dba:	2b30      	cmp	r3, #48	; 0x30
 8003dbc:	d814      	bhi.n	8003de8 <UART_SetConfig+0x180>
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d009      	beq.n	8003dd6 <UART_SetConfig+0x16e>
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d810      	bhi.n	8003de8 <UART_SetConfig+0x180>
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <UART_SetConfig+0x168>
 8003dca:	2b10      	cmp	r3, #16
 8003dcc:	d006      	beq.n	8003ddc <UART_SetConfig+0x174>
 8003dce:	e00b      	b.n	8003de8 <UART_SetConfig+0x180>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	76fb      	strb	r3, [r7, #27]
 8003dd4:	e089      	b.n	8003eea <UART_SetConfig+0x282>
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	76fb      	strb	r3, [r7, #27]
 8003dda:	e086      	b.n	8003eea <UART_SetConfig+0x282>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	76fb      	strb	r3, [r7, #27]
 8003de0:	e083      	b.n	8003eea <UART_SetConfig+0x282>
 8003de2:	2308      	movs	r3, #8
 8003de4:	76fb      	strb	r3, [r7, #27]
 8003de6:	e080      	b.n	8003eea <UART_SetConfig+0x282>
 8003de8:	2310      	movs	r3, #16
 8003dea:	76fb      	strb	r3, [r7, #27]
 8003dec:	e07d      	b.n	8003eea <UART_SetConfig+0x282>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a5b      	ldr	r2, [pc, #364]	; (8003f60 <UART_SetConfig+0x2f8>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d120      	bne.n	8003e3a <UART_SetConfig+0x1d2>
 8003df8:	4b56      	ldr	r3, [pc, #344]	; (8003f54 <UART_SetConfig+0x2ec>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e02:	2bc0      	cmp	r3, #192	; 0xc0
 8003e04:	d013      	beq.n	8003e2e <UART_SetConfig+0x1c6>
 8003e06:	2bc0      	cmp	r3, #192	; 0xc0
 8003e08:	d814      	bhi.n	8003e34 <UART_SetConfig+0x1cc>
 8003e0a:	2b80      	cmp	r3, #128	; 0x80
 8003e0c:	d009      	beq.n	8003e22 <UART_SetConfig+0x1ba>
 8003e0e:	2b80      	cmp	r3, #128	; 0x80
 8003e10:	d810      	bhi.n	8003e34 <UART_SetConfig+0x1cc>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <UART_SetConfig+0x1b4>
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	d006      	beq.n	8003e28 <UART_SetConfig+0x1c0>
 8003e1a:	e00b      	b.n	8003e34 <UART_SetConfig+0x1cc>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	76fb      	strb	r3, [r7, #27]
 8003e20:	e063      	b.n	8003eea <UART_SetConfig+0x282>
 8003e22:	2302      	movs	r3, #2
 8003e24:	76fb      	strb	r3, [r7, #27]
 8003e26:	e060      	b.n	8003eea <UART_SetConfig+0x282>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	76fb      	strb	r3, [r7, #27]
 8003e2c:	e05d      	b.n	8003eea <UART_SetConfig+0x282>
 8003e2e:	2308      	movs	r3, #8
 8003e30:	76fb      	strb	r3, [r7, #27]
 8003e32:	e05a      	b.n	8003eea <UART_SetConfig+0x282>
 8003e34:	2310      	movs	r3, #16
 8003e36:	76fb      	strb	r3, [r7, #27]
 8003e38:	e057      	b.n	8003eea <UART_SetConfig+0x282>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a49      	ldr	r2, [pc, #292]	; (8003f64 <UART_SetConfig+0x2fc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d125      	bne.n	8003e90 <UART_SetConfig+0x228>
 8003e44:	4b43      	ldr	r3, [pc, #268]	; (8003f54 <UART_SetConfig+0x2ec>)
 8003e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e52:	d017      	beq.n	8003e84 <UART_SetConfig+0x21c>
 8003e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e58:	d817      	bhi.n	8003e8a <UART_SetConfig+0x222>
 8003e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e5e:	d00b      	beq.n	8003e78 <UART_SetConfig+0x210>
 8003e60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e64:	d811      	bhi.n	8003e8a <UART_SetConfig+0x222>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <UART_SetConfig+0x20a>
 8003e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6e:	d006      	beq.n	8003e7e <UART_SetConfig+0x216>
 8003e70:	e00b      	b.n	8003e8a <UART_SetConfig+0x222>
 8003e72:	2300      	movs	r3, #0
 8003e74:	76fb      	strb	r3, [r7, #27]
 8003e76:	e038      	b.n	8003eea <UART_SetConfig+0x282>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	76fb      	strb	r3, [r7, #27]
 8003e7c:	e035      	b.n	8003eea <UART_SetConfig+0x282>
 8003e7e:	2304      	movs	r3, #4
 8003e80:	76fb      	strb	r3, [r7, #27]
 8003e82:	e032      	b.n	8003eea <UART_SetConfig+0x282>
 8003e84:	2308      	movs	r3, #8
 8003e86:	76fb      	strb	r3, [r7, #27]
 8003e88:	e02f      	b.n	8003eea <UART_SetConfig+0x282>
 8003e8a:	2310      	movs	r3, #16
 8003e8c:	76fb      	strb	r3, [r7, #27]
 8003e8e:	e02c      	b.n	8003eea <UART_SetConfig+0x282>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a2d      	ldr	r2, [pc, #180]	; (8003f4c <UART_SetConfig+0x2e4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d125      	bne.n	8003ee6 <UART_SetConfig+0x27e>
 8003e9a:	4b2e      	ldr	r3, [pc, #184]	; (8003f54 <UART_SetConfig+0x2ec>)
 8003e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ea8:	d017      	beq.n	8003eda <UART_SetConfig+0x272>
 8003eaa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003eae:	d817      	bhi.n	8003ee0 <UART_SetConfig+0x278>
 8003eb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb4:	d00b      	beq.n	8003ece <UART_SetConfig+0x266>
 8003eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eba:	d811      	bhi.n	8003ee0 <UART_SetConfig+0x278>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <UART_SetConfig+0x260>
 8003ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ec4:	d006      	beq.n	8003ed4 <UART_SetConfig+0x26c>
 8003ec6:	e00b      	b.n	8003ee0 <UART_SetConfig+0x278>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	76fb      	strb	r3, [r7, #27]
 8003ecc:	e00d      	b.n	8003eea <UART_SetConfig+0x282>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	76fb      	strb	r3, [r7, #27]
 8003ed2:	e00a      	b.n	8003eea <UART_SetConfig+0x282>
 8003ed4:	2304      	movs	r3, #4
 8003ed6:	76fb      	strb	r3, [r7, #27]
 8003ed8:	e007      	b.n	8003eea <UART_SetConfig+0x282>
 8003eda:	2308      	movs	r3, #8
 8003edc:	76fb      	strb	r3, [r7, #27]
 8003ede:	e004      	b.n	8003eea <UART_SetConfig+0x282>
 8003ee0:	2310      	movs	r3, #16
 8003ee2:	76fb      	strb	r3, [r7, #27]
 8003ee4:	e001      	b.n	8003eea <UART_SetConfig+0x282>
 8003ee6:	2310      	movs	r3, #16
 8003ee8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a17      	ldr	r2, [pc, #92]	; (8003f4c <UART_SetConfig+0x2e4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	f040 8087 	bne.w	8004004 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ef6:	7efb      	ldrb	r3, [r7, #27]
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d837      	bhi.n	8003f6c <UART_SetConfig+0x304>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <UART_SetConfig+0x29c>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f29 	.word	0x08003f29
 8003f08:	08003f6d 	.word	0x08003f6d
 8003f0c:	08003f31 	.word	0x08003f31
 8003f10:	08003f6d 	.word	0x08003f6d
 8003f14:	08003f37 	.word	0x08003f37
 8003f18:	08003f6d 	.word	0x08003f6d
 8003f1c:	08003f6d 	.word	0x08003f6d
 8003f20:	08003f6d 	.word	0x08003f6d
 8003f24:	08003f3f 	.word	0x08003f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f28:	f7fe fd98 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 8003f2c:	6178      	str	r0, [r7, #20]
        break;
 8003f2e:	e022      	b.n	8003f76 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f30:	4b0d      	ldr	r3, [pc, #52]	; (8003f68 <UART_SetConfig+0x300>)
 8003f32:	617b      	str	r3, [r7, #20]
        break;
 8003f34:	e01f      	b.n	8003f76 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f36:	f7fe fcf9 	bl	800292c <HAL_RCC_GetSysClockFreq>
 8003f3a:	6178      	str	r0, [r7, #20]
        break;
 8003f3c:	e01b      	b.n	8003f76 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f42:	617b      	str	r3, [r7, #20]
        break;
 8003f44:	e017      	b.n	8003f76 <UART_SetConfig+0x30e>
 8003f46:	bf00      	nop
 8003f48:	efff69f3 	.word	0xefff69f3
 8003f4c:	40008000 	.word	0x40008000
 8003f50:	40013800 	.word	0x40013800
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40004400 	.word	0x40004400
 8003f5c:	40004800 	.word	0x40004800
 8003f60:	40004c00 	.word	0x40004c00
 8003f64:	40005000 	.word	0x40005000
 8003f68:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	76bb      	strb	r3, [r7, #26]
        break;
 8003f74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f000 80f1 	beq.w	8004160 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	4613      	mov	r3, r2
 8003f84:	005b      	lsls	r3, r3, #1
 8003f86:	4413      	add	r3, r2
 8003f88:	697a      	ldr	r2, [r7, #20]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d305      	bcc.n	8003f9a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d902      	bls.n	8003fa0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	76bb      	strb	r3, [r7, #26]
 8003f9e:	e0df      	b.n	8004160 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f04f 0100 	mov.w	r1, #0
 8003fa8:	f04f 0200 	mov.w	r2, #0
 8003fac:	f04f 0300 	mov.w	r3, #0
 8003fb0:	020b      	lsls	r3, r1, #8
 8003fb2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003fb6:	0202      	lsls	r2, r0, #8
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	6849      	ldr	r1, [r1, #4]
 8003fbc:	0849      	lsrs	r1, r1, #1
 8003fbe:	4608      	mov	r0, r1
 8003fc0:	f04f 0100 	mov.w	r1, #0
 8003fc4:	1814      	adds	r4, r2, r0
 8003fc6:	eb43 0501 	adc.w	r5, r3, r1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	461a      	mov	r2, r3
 8003fd0:	f04f 0300 	mov.w	r3, #0
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	f7fc f8f6 	bl	80001c8 <__aeabi_uldivmod>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	460b      	mov	r3, r1
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fea:	d308      	bcc.n	8003ffe <UART_SetConfig+0x396>
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff2:	d204      	bcs.n	8003ffe <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	60da      	str	r2, [r3, #12]
 8003ffc:	e0b0      	b.n	8004160 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	76bb      	strb	r3, [r7, #26]
 8004002:	e0ad      	b.n	8004160 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
 8004008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800400c:	d15b      	bne.n	80040c6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800400e:	7efb      	ldrb	r3, [r7, #27]
 8004010:	2b08      	cmp	r3, #8
 8004012:	d828      	bhi.n	8004066 <UART_SetConfig+0x3fe>
 8004014:	a201      	add	r2, pc, #4	; (adr r2, 800401c <UART_SetConfig+0x3b4>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	08004041 	.word	0x08004041
 8004020:	08004049 	.word	0x08004049
 8004024:	08004051 	.word	0x08004051
 8004028:	08004067 	.word	0x08004067
 800402c:	08004057 	.word	0x08004057
 8004030:	08004067 	.word	0x08004067
 8004034:	08004067 	.word	0x08004067
 8004038:	08004067 	.word	0x08004067
 800403c:	0800405f 	.word	0x0800405f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004040:	f7fe fd0c 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 8004044:	6178      	str	r0, [r7, #20]
        break;
 8004046:	e013      	b.n	8004070 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004048:	f7fe fd1e 	bl	8002a88 <HAL_RCC_GetPCLK2Freq>
 800404c:	6178      	str	r0, [r7, #20]
        break;
 800404e:	e00f      	b.n	8004070 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004050:	4b49      	ldr	r3, [pc, #292]	; (8004178 <UART_SetConfig+0x510>)
 8004052:	617b      	str	r3, [r7, #20]
        break;
 8004054:	e00c      	b.n	8004070 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004056:	f7fe fc69 	bl	800292c <HAL_RCC_GetSysClockFreq>
 800405a:	6178      	str	r0, [r7, #20]
        break;
 800405c:	e008      	b.n	8004070 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800405e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004062:	617b      	str	r3, [r7, #20]
        break;
 8004064:	e004      	b.n	8004070 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	76bb      	strb	r3, [r7, #26]
        break;
 800406e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d074      	beq.n	8004160 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	005a      	lsls	r2, r3, #1
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	085b      	lsrs	r3, r3, #1
 8004080:	441a      	add	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	fbb2 f3f3 	udiv	r3, r2, r3
 800408a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	2b0f      	cmp	r3, #15
 8004090:	d916      	bls.n	80040c0 <UART_SetConfig+0x458>
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004098:	d212      	bcs.n	80040c0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	b29b      	uxth	r3, r3
 800409e:	f023 030f 	bic.w	r3, r3, #15
 80040a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	085b      	lsrs	r3, r3, #1
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	89fb      	ldrh	r3, [r7, #14]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	89fa      	ldrh	r2, [r7, #14]
 80040bc:	60da      	str	r2, [r3, #12]
 80040be:	e04f      	b.n	8004160 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	76bb      	strb	r3, [r7, #26]
 80040c4:	e04c      	b.n	8004160 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040c6:	7efb      	ldrb	r3, [r7, #27]
 80040c8:	2b08      	cmp	r3, #8
 80040ca:	d828      	bhi.n	800411e <UART_SetConfig+0x4b6>
 80040cc:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <UART_SetConfig+0x46c>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	080040f9 	.word	0x080040f9
 80040d8:	08004101 	.word	0x08004101
 80040dc:	08004109 	.word	0x08004109
 80040e0:	0800411f 	.word	0x0800411f
 80040e4:	0800410f 	.word	0x0800410f
 80040e8:	0800411f 	.word	0x0800411f
 80040ec:	0800411f 	.word	0x0800411f
 80040f0:	0800411f 	.word	0x0800411f
 80040f4:	08004117 	.word	0x08004117
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040f8:	f7fe fcb0 	bl	8002a5c <HAL_RCC_GetPCLK1Freq>
 80040fc:	6178      	str	r0, [r7, #20]
        break;
 80040fe:	e013      	b.n	8004128 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004100:	f7fe fcc2 	bl	8002a88 <HAL_RCC_GetPCLK2Freq>
 8004104:	6178      	str	r0, [r7, #20]
        break;
 8004106:	e00f      	b.n	8004128 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004108:	4b1b      	ldr	r3, [pc, #108]	; (8004178 <UART_SetConfig+0x510>)
 800410a:	617b      	str	r3, [r7, #20]
        break;
 800410c:	e00c      	b.n	8004128 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800410e:	f7fe fc0d 	bl	800292c <HAL_RCC_GetSysClockFreq>
 8004112:	6178      	str	r0, [r7, #20]
        break;
 8004114:	e008      	b.n	8004128 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004116:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800411a:	617b      	str	r3, [r7, #20]
        break;
 800411c:	e004      	b.n	8004128 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	76bb      	strb	r3, [r7, #26]
        break;
 8004126:	bf00      	nop
    }

    if (pclk != 0U)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d018      	beq.n	8004160 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	085a      	lsrs	r2, r3, #1
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	441a      	add	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b0f      	cmp	r3, #15
 8004146:	d909      	bls.n	800415c <UART_SetConfig+0x4f4>
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800414e:	d205      	bcs.n	800415c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	b29a      	uxth	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	60da      	str	r2, [r3, #12]
 800415a:	e001      	b.n	8004160 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800416c:	7ebb      	ldrb	r3, [r7, #26]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bdb0      	pop	{r4, r5, r7, pc}
 8004176:	bf00      	nop
 8004178:	00f42400 	.word	0x00f42400

0800417c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	f003 0302 	and.w	r3, r3, #2
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00a      	beq.n	80041ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	f003 0308 	and.w	r3, r3, #8
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00a      	beq.n	800422e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004232:	f003 0320 	and.w	r3, r3, #32
 8004236:	2b00      	cmp	r3, #0
 8004238:	d00a      	beq.n	8004250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004258:	2b00      	cmp	r3, #0
 800425a:	d01a      	beq.n	8004292 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427a:	d10a      	bne.n	8004292 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00a      	beq.n	80042b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	430a      	orrs	r2, r1
 80042b2:	605a      	str	r2, [r3, #4]
  }
}
 80042b4:	bf00      	nop
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af02      	add	r7, sp, #8
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042d0:	f7fc fe06 	bl	8000ee0 <HAL_GetTick>
 80042d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d10e      	bne.n	8004302 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f82d 	bl	8004352 <UART_WaitOnFlagUntilTimeout>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e023      	b.n	800434a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b04      	cmp	r3, #4
 800430e:	d10e      	bne.n	800432e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f817 	bl	8004352 <UART_WaitOnFlagUntilTimeout>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e00d      	b.n	800434a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b09c      	sub	sp, #112	; 0x70
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	603b      	str	r3, [r7, #0]
 800435e:	4613      	mov	r3, r2
 8004360:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004362:	e0a5      	b.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004364:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436a:	f000 80a1 	beq.w	80044b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800436e:	f7fc fdb7 	bl	8000ee0 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800437a:	429a      	cmp	r2, r3
 800437c:	d302      	bcc.n	8004384 <UART_WaitOnFlagUntilTimeout+0x32>
 800437e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004380:	2b00      	cmp	r3, #0
 8004382:	d13e      	bne.n	8004402 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004394:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004398:	667b      	str	r3, [r7, #100]	; 0x64
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043aa:	e841 2300 	strex	r3, r2, [r1]
 80043ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1e6      	bne.n	8004384 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	3308      	adds	r3, #8
 80043bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c0:	e853 3f00 	ldrex	r3, [r3]
 80043c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c8:	f023 0301 	bic.w	r3, r3, #1
 80043cc:	663b      	str	r3, [r7, #96]	; 0x60
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3308      	adds	r3, #8
 80043d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80043d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043de:	e841 2300 	strex	r3, r2, [r1]
 80043e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1e5      	bne.n	80043b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2220      	movs	r2, #32
 80043ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2220      	movs	r2, #32
 80043f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e067      	b.n	80044d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	d04f      	beq.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	69db      	ldr	r3, [r3, #28]
 8004416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800441a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800441e:	d147      	bne.n	80044b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004428:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800443e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
 800444a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800444e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004450:	e841 2300 	strex	r3, r2, [r1]
 8004454:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e6      	bne.n	800442a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	3308      	adds	r3, #8
 8004462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	613b      	str	r3, [r7, #16]
   return(result);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	66bb      	str	r3, [r7, #104]	; 0x68
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3308      	adds	r3, #8
 800447a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800447c:	623a      	str	r2, [r7, #32]
 800447e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004480:	69f9      	ldr	r1, [r7, #28]
 8004482:	6a3a      	ldr	r2, [r7, #32]
 8004484:	e841 2300 	strex	r3, r2, [r1]
 8004488:	61bb      	str	r3, [r7, #24]
   return(result);
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1e5      	bne.n	800445c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2220      	movs	r2, #32
 80044a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e010      	b.n	80044d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69da      	ldr	r2, [r3, #28]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	429a      	cmp	r2, r3
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	f43f af4a 	beq.w	8004364 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3770      	adds	r7, #112	; 0x70
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <__libc_init_array>:
 80044dc:	b570      	push	{r4, r5, r6, lr}
 80044de:	4d0d      	ldr	r5, [pc, #52]	; (8004514 <__libc_init_array+0x38>)
 80044e0:	4c0d      	ldr	r4, [pc, #52]	; (8004518 <__libc_init_array+0x3c>)
 80044e2:	1b64      	subs	r4, r4, r5
 80044e4:	10a4      	asrs	r4, r4, #2
 80044e6:	2600      	movs	r6, #0
 80044e8:	42a6      	cmp	r6, r4
 80044ea:	d109      	bne.n	8004500 <__libc_init_array+0x24>
 80044ec:	4d0b      	ldr	r5, [pc, #44]	; (800451c <__libc_init_array+0x40>)
 80044ee:	4c0c      	ldr	r4, [pc, #48]	; (8004520 <__libc_init_array+0x44>)
 80044f0:	f000 f820 	bl	8004534 <_init>
 80044f4:	1b64      	subs	r4, r4, r5
 80044f6:	10a4      	asrs	r4, r4, #2
 80044f8:	2600      	movs	r6, #0
 80044fa:	42a6      	cmp	r6, r4
 80044fc:	d105      	bne.n	800450a <__libc_init_array+0x2e>
 80044fe:	bd70      	pop	{r4, r5, r6, pc}
 8004500:	f855 3b04 	ldr.w	r3, [r5], #4
 8004504:	4798      	blx	r3
 8004506:	3601      	adds	r6, #1
 8004508:	e7ee      	b.n	80044e8 <__libc_init_array+0xc>
 800450a:	f855 3b04 	ldr.w	r3, [r5], #4
 800450e:	4798      	blx	r3
 8004510:	3601      	adds	r6, #1
 8004512:	e7f2      	b.n	80044fa <__libc_init_array+0x1e>
 8004514:	080045ac 	.word	0x080045ac
 8004518:	080045ac 	.word	0x080045ac
 800451c:	080045ac 	.word	0x080045ac
 8004520:	080045b0 	.word	0x080045b0

08004524 <memset>:
 8004524:	4402      	add	r2, r0
 8004526:	4603      	mov	r3, r0
 8004528:	4293      	cmp	r3, r2
 800452a:	d100      	bne.n	800452e <memset+0xa>
 800452c:	4770      	bx	lr
 800452e:	f803 1b01 	strb.w	r1, [r3], #1
 8004532:	e7f9      	b.n	8004528 <memset+0x4>

08004534 <_init>:
 8004534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004536:	bf00      	nop
 8004538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453a:	bc08      	pop	{r3}
 800453c:	469e      	mov	lr, r3
 800453e:	4770      	bx	lr

08004540 <_fini>:
 8004540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004542:	bf00      	nop
 8004544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004546:	bc08      	pop	{r3}
 8004548:	469e      	mov	lr, r3
 800454a:	4770      	bx	lr
